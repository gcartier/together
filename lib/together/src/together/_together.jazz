;;;============
;;;  Together
;;;============
;;;
;;;; Together
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together jazz


(import (jazz.io)
        (jazz.presence)
        (jazz.presence.transmission)
        (jazz.version)
        (world)
        (world.build))


;;;
;;;; Hubs
;;;


(hub get-in-circle?)
(hub get-replay)
(hub goto-space)
(hub together-enter)
(hub together-exit)
(hub check-invalid-key-exception)


;;;
;;;; Settings
;;;


(definition protected (determine-settings-root)
  (cond-expand (prod   {Directory Home ".together" "prod"})
               (stage  {Directory Home ".together" "stage"})
               (stable {Directory Home ".together" "stable"})
               (triage {Directory Home ".together" "triage"})
               (test   {Directory Home ".together" "test"})
               (trial  {Directory Home ".together" "trial"})
               (else   {Directory Home ".together" "devel"})))


;;;
;;;; Documents
;;;


(definition protected (determine-documents-root)
  (cond-expand
    (mac
     (cond-expand (prod   '(Home "Together" "prod"))
                  (stage  '(Home "Together" "stage"))
                  (stable '(Home "Together" "stable"))
                  (triage '(Home "Together" "triage"))
                  (test   '(Home "Together" "test"))
                  (trial  '(Home "Together" "trial"))
                  (else   '(Home "Together" "devel"))))
    (windows
     (let ((dir (tokenise-filename (pathname-normalize (get-special-folder CSIDL_PERSONAL)))))
       (cond-expand (prod   (append dir '("Together" "prod")))
                    (stage  (append dir '("Together" "stage")))
                    (stable (append dir '("Together" "stable")))
                    (triage (append dir '("Together" "triage")))
                    (test   (append dir '("Together" "test")))
                    (trial  (append dir '("Together" "trial")))
                    (else   (append dir '("Together" "devel"))))))
    (else
     '(Settings))))


;;;
;;;; Universe
;;;


(definition protected (determine-universe-root)
  '(Home ".together"))


;;;
;;;; Version
;;;


(definition public together-code
  (code-string->32-bit-integer "TWJG"))

(definition public together-version
  {Version 1 1 0 0})


(definition protected (setup-presence)
  (let ((code (cond-expand
                (devel together-code)
                (trial together-code)
                (test together-code)
                (triage together-code)
                (stable together-code)
                (else together-code @wait build-digest))))
    (set-udp-code code)
    (set-presence-code code)
    (set-presence-version together-version)))


;;;
;;;; Aliases
;;;


(definition public (setup-aliases)
  (register-alias 'Application
                  (if (is-alias? 'Together)
                      (list 'Together)
                    (cond-expand
                      (windows (list 'Build))
                      (mac (get-list (get-parent {Directory Build})))
                      (else (list 'Build)))))
  (unless (find-alias 'Resources)
    (register-resources-alias 'Together)))


;;;
;;;; Client
;;;


(set-default-server-host
  (cond-expand @sydney (test "34.116.114.191")
               (else "togethersphere.com")))


;;;
;;;; Server
;;;


(definition public (determine-server-filename)
  (cond-expand (mac "together-server.app/Contents/MacOS/Together-Server")
               (else "Together-Server")))


;;;
;;;; Processor
;;;


(definition public (determine-processor-filename)
  (cond-expand (mac "together-processor.app/Contents/MacOS/Together-Processor")
               (else "Together-Processor")))


;;;
;;;; Worker
;;;


(definition public (determine-worker-filename)
  (cond-expand (mac "together-worker.app/Contents/MacOS/Together-Worker")
               (else "Together-Worker")))


;;;
;;;; Together
;;;


(definition protected *current-together*
  #f)

(definition public (current-together)
  *current-together*)

(definition public (set-current-together together)
  (set! *current-together* together)
  (set-?g together))


;;;
;;;; Devel
;;;


@buggy-probably-use-t&trun
(cond-expand
  (devel
   (when (not tier-kind)
     (set-window? #f)
     (set-tier-title "Together")
     (set-tier-kind 'client)
     (set-process-kind 'application)
     (set-settings-alias 'Resources)
     (set-settings-root (determine-settings-root))
     (set-documents-root (determine-documents-root))
     (set-universe-root (determine-universe-root))
     (set-aliases-setup setup-aliases)
     (set-valid-roles '(user developer))
     (set-server-filename (determine-server-filename))
     (set-worker-filename (determine-worker-filename))))
  (else)))
