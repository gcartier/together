;;;============
;;;  Together
;;;============
;;;
;;;; Together
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together jazz


(import (jazz.io)
        (jazz.presence)
        (jazz.presence.transmission)
        (jazz.version)
        (jiri.platform (cond windows))
        (world)
        (world.build))


;;;
;;;; Hubs
;;;


(hub get-in-circle?)
(hub get-replay)


;;;
;;;; Settings
;;;


(definition protected (determine-settings-root)
  (cond-expand (prod   {Directory Home ".together" "prod"})
               (stage  {Directory Home ".together" "stage"})
               (triage {Directory Home ".together" "triage"})
               (test   {Directory Home ".together" "test"})
               (else   {Directory Home ".together" "devel"})))


;;;
;;;; Documents
;;;


(definition protected (determine-documents-root)
  (cond-expand
    (mac
     (cond-expand (prod   '(Home "Documents" "Together" "prod"))
                  (stage  '(Home "Documents" "Together" "stage"))
                  (triage '(Home "Documents" "Together" "triage"))
                  (test   '(Home "Documents" "Together" "test"))
                  (else   '(Home "Documents" "Together" "devel"))))
    (windows
     (let ((dir (get-special-folder CSIDL_PERSONAL)))
       (cond-expand (prod   (list dir "Together" "prod"))
                    (stage  (list dir "Together" "stage"))
                    (triage (list dir "Together" "triage"))
                    (test   (list dir "Together" "test"))
                    (else   (list dir "Together" "devel")))))
    (else
     '(Settings))))


;;;
;;;; Version
;;;


(definition public together-code
  (code-string->32-bit-integer "TWJG"))

(definition public together-version
  {Version 0 1 1 0 closed-alpha})


(definition protected (setup-presence)
  (let ((code (cond-expand
                (devel together-code)
                (else build-digest))))
    (set-udp-code code)
    (set-presence-code code)
    (set-presence-version together-version)))


;;;
;;;; Aliases
;;;


(definition public (setup-aliases)
  (register-alias 'Application
                  (if (is-alias? 'Together)
                      (list 'Together)
                    (cond-expand
                      (windows (list 'Build))
                      (mac (get-list (get-parent {Directory Build})))
                      (else (get-list (get-parent (get-parent {Directory Build})))))))
  (register-resources-alias 'Together 'together))


;;;
;;;; Server
;;;


(definition public (determine-server-filename)
  (cond-expand (mac "together-server.app/Contents/MacOS/Together-Server")
               (else "Together-Server")))


;;;
;;;; Processor
;;;


(definition public (determine-processor-filename)
  (cond-expand (mac "together-processor.app/Contents/MacOS/Together-Processor")
               (else "Together-Processor")))


;;;
;;;; Worker
;;;


(definition public (determine-worker-filename)
  (cond-expand (mac "together-worker.app/Contents/MacOS/Together-Worker")
               (else "Together-Worker")))


;;;
;;;; Devel
;;;


(when (command-argument "devel")
  (set-window? #t)
  (set-tier-title "Together")
  (set-tier-kind 'client)
  (set-process-kind 'application)
  (set-settings-alias 'Resources)
  (set-settings-root (determine-settings-root))
  (set-documents-root (determine-documents-root))
  (set-aliases-setup setup-aliases)
  (set-valid-roles '(user developer))
  (set-server-filename (determine-server-filename))
  (set-worker-filename (determine-worker-filename))))
