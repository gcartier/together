;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Emulation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.emulation jazz


(import (jazz.math)
        (jazz.stream)
        (world)
        (world.audio)
        (world.client.tier)
        (world.context)
        (world.event)
        (world.evolution)
        (world.client.udp)
        (world.record (phase syntax))
        (world.server.udp)
        (world.settings)
        (world.simulation)
        (world.udp)
        (world.video))


(definition show-visualize?
  (world-setting 'world.show-visualize? #f))

(definition debug-visualize?
  (world-setting 'world.debug-visualize? #f))


(definition protected video-position
  {Point 176 39})

(definition protected (set-video-position position)
  (set! video-position position))


(definition protected video-size
  {Dimension 178 100})

(definition protected (set-video-size size)
  (set! video-size size))


;;;
;;;; Ring
;;;


(class Ring-Emulator extends Object
  
  
  (slot call                      getter generate)
  (slot origin                    getter generate)
  (slot evolution                 getter generate)
  (slot audio-no                  getter generate)
  (slot video-no                  getter generate)
  (slot audio-channel             getter generate)
  (slot video-channel             getter generate)
  (slot audio-ring                getter generate)
  (slot video-ring                getter generate)
  (slot audio-creates             getter generate)
  (slot video-creates             getter generate)
  (slot audio-adds                getter generate)
  (slot video-adds                getter generate)
  (slot audio-removes             getter generate)
  (slot video-removes             getter generate)
  (slot last-time   initialize #f accessors generate)
  (slot last-event  initialize #f accessors generate)
  
  
  (method override (initialize self call origin evolution audio-creates video-creates)
    (nextmethod self)
    (set! self.call call)
    (set! self.origin origin)
    (set! self.evolution evolution)
    (set! self.audio-creates audio-creates)
    (set! self.video-creates video-creates)
    (set! self.audio-adds (make-table test: eqv?))
    (set! self.video-adds (make-table test: eqv?))
    (set! self.audio-removes (make-table test: eqv?))
    (set! self.video-removes (make-table test: eqv?)))
  
  
  (method protected (emulate self to-time playing?)
    (emulate-from self #f to-time playing?))
  
  
  (method protected (emulate-from-last self to-time playing?)
    (emulate-from self (and last-event (+ last-event 1)) to-time playing?))
  
  
  (method protected (emulate-from self from-event to-time playing?)
    (declare (proper-tail-calls))
    (let ((first (first-position evolution))
          (last (last-position evolution)))
      (let (loop (n (or from-event first)))
        (when (<= n last)
          (let ((time (evolutionary-udp-time evolution n)))
            (when (<= time to-time)
              (emulate-event self n playing?)
              (set! last-time time)
              (set! last-event n)
              (loop (+ n 1))))))))
  
  
  (method protected virtual (emulate-event self n playing?)
    ))


;;;
;;;; Retain
;;;


(class Retain-Emulator extends Ring-Emulator
  
  
  (method override (emulate-event self n playing?)
    (let ((no (flonum->fixnum (evolutionary-udp-channel evolution n))))
      (when (or (eqv? no audio-no)
                (eqv? no video-no))
        (let ((id (evolutionary-udp-id evolution n))
              (kind (flonum->fixnum (evolutionary-udp-kind evolution n))))
          (let ((ring (if (= kind udp-audio) audio-ring video-ring))
                (creates (if (= kind udp-audio) audio-creates video-creates))
                (adds (if (= kind udp-audio) audio-adds video-adds))
                (removes (if (= kind udp-audio) audio-removes video-removes)))
            (define (find-create sequence)
              (table-ref creates sequence #f))
            
            (ecase id
              ;; retain
              ((udp-id-retain-packet)
               (let ((time (evolutionary-udp-time evolution n))
                     (sequence (evolutionary-udp-sequence evolution n)))
                 (let ((time-base (let ((time-base (evolutionary-udp-insert-packet-base evolution n)))
                                    (if (= time-base -1.)
                                        (- time (evolutionary-udp-insert-packet-dts evolution n))
                                      time-base)))
                       (time-latency (evolutionary-udp-insert-packet-latency evolution n)))
                   (let ((data (find-create sequence)))
                     (when data
                       (when show-visualize?
                         (terminal 'retain sequence))
                       (visualizer-update-time ring time-base time-latency)
                       (let ((from (and (/= (get-count ring) 0) (get-highest ring))))
                         (insert ring data)
                         (table-set! adds sequence time)
                         (when from
                           (let ((to (get-highest ring)))
                             (loop (for seq from (+ from 1) below to)
                                   (table-set! adds seq time))))))))))
              ;; got
              ((udp-id-got-packet)
               (let ((sequence (evolutionary-udp-sequence evolution n)))
                 (let ((data (find-create sequence)))
                   (when data
                     (when show-visualize?
                       (terminal 'got sequence))
                     (visualizer-replace-got ring sequence data)))))
              ;; release
              ((udp-id-release-packet)
               (let ((sequence (evolutionary-udp-sequence evolution n)))
                 (when show-visualize?
                   (terminal 'release sequence))
                 (let ((packet (visualizer-earliest-packet ring)))
                   (let ((consistent? (and packet (eqv? (get-sequence packet) sequence))))
                     (when (if debug-visualize? (assert consistent? #t) consistent?)
                       (table-set! removes (get-sequence packet) (list packet (evolutionary-udp-time evolution n) #f))
                       (remove-packet ring)))))))))))))


;;;
;;;; Sender
;;;


(class Sender-Emulator extends Retain-Emulator
  
  
  (method override (initialize self call tier origin evolution audio-creates video-creates channel-name channel-audio channel-video)
    (nextmethod self call origin evolution audio-creates video-creates)
    (set! self.audio-no channel-audio)
    (set! self.video-no channel-video)
    (let ((sender (require-tier call tier)))
      (set! audio-channel (and audio-no (find-send-channel sender audio-no)))
      (set! video-channel (and video-no (find-send-channel sender video-no))))
    (set! self.audio-ring (and audio-channel (get-retain-ring audio-channel)))
    (set! self.video-ring (and video-channel (get-retain-ring video-channel)))))


;;;
;;;; Server
;;;


(class Server-Emulator extends Retain-Emulator
  
  
  (method override (initialize self call tier origin evolution audio-creates video-creates channel-name channel-audio channel-video)
    (nextmethod self call origin evolution audio-creates video-creates)
    (set! self.audio-no channel-audio)
    (set! self.video-no channel-video)
    (let ((server (require-tier call tier)))
      (set! audio-channel (and audio-no (find-server-channel server audio-no)))
      (set! video-channel (and video-no (find-server-channel server video-no))))
    (set! self.audio-ring (and audio-channel (get-retain-ring audio-channel)))
    (set! self.video-ring (and video-channel (get-retain-ring video-channel)))))


;;;
;;;; Receiver
;;;


(class Receiver-Emulator extends Ring-Emulator
  
  
  (slot origin-audio                     getter generate)
  (slot origin-video                     getter generate)
  (slot origin-evolution                 getter generate)
  (slot video-keyframe-played?           getter generate)
  (slot audio-output       initialize #f getter generate)
  (slot video-output       initialize #f getter generate)
  
  
  (method override (initialize self call tier origin origin-audio audio-caps origin-video origin-evolution evolution audio-creates video-creates channel-name channel-audio channel-video)
    (nextmethod self call origin evolution audio-creates video-creates)
    (set! self.audio-no channel-audio)
    (set! self.video-no channel-video)
    (let ((receiver (require-tier call tier)))
      (set! audio-channel (and audio-no (find-receive-channel receiver audio-no)))
      (set! video-channel (and video-no (find-receive-channel receiver video-no))))
    (set! self.audio-ring (and audio-channel (get-process-ring audio-channel)))
    (set! self.video-ring (and video-channel (get-process-ring video-channel)))
    (set! self.origin-audio origin-audio)
    (set! self.origin-video origin-video)
    (set! self.origin-evolution origin-evolution)
    (set! self.audio-output (and origin-audio (visualizer-output (current-audio) caps: audio-caps)))
    (set! self.video-output (and origin-video (visualizer-output (current-video) video-position video-size)))
    (set! self.video-keyframe-played? #f))
  
  
  (method override (destroy self)
    (when audio-output
      (release audio-output)
      (close audio-output))
    (when video-output
      (release video-output)
      (close video-output))
    (nextmethod self))
  
  
  (method override (emulate-event self n playing?)
    (let ((no (flonum->fixnum (evolutionary-udp-channel evolution n))))
      (when (or (eqv? no audio-no)
                (eqv? no video-no))
        (let ((id (evolutionary-udp-id evolution n))
              (kind (flonum->fixnum (evolutionary-udp-kind evolution n))))
          (let ((ring (if (= kind udp-audio) audio-ring video-ring))
                (creates (if (= kind udp-audio) audio-creates video-creates))
                (adds (if (= kind udp-audio) audio-adds video-adds))
                (removes (if (= kind udp-audio) audio-removes video-removes)))
            (define (find-create sequence)
              (table-ref creates sequence #f))
            
            (ecase id
              ;; src / sink / draw
              ((udp-id-src-media udp-id-sink-media udp-id-draw-video))
              ;; create / info
              ((udp-id-create-packet udp-id-create-info))
              ;; retain / release
              ((udp-id-retain-packet udp-id-release-packet))
              ;; resend / absent
              ((udp-id-resend-packet udp-id-absent-packet))
              ;; time
              ((udp-id-update-time))
              ;; insert
              ((udp-id-insert-packet)
               (let ((time (evolutionary-udp-time evolution n))
                     (sequence (evolutionary-udp-sequence evolution n)))
                 (let ((time-base (let ((time-base (evolutionary-udp-insert-packet-base evolution n)))
                                    (if (= time-base -1.)
                                        (- time (evolutionary-udp-insert-packet-dts evolution n))
                                      time-base)))
                       (time-latency (evolutionary-udp-insert-packet-latency evolution n)))
                   (let ((data (find-create sequence)))
                     (when data
                       (when show-visualize?
                         (terminal 'insert sequence))
                       (visualizer-update-time ring time-base time-latency)
                       (let ((from (and (/= (get-count ring) 0) (get-highest ring))))
                         (insert ring data)
                         (table-set! adds sequence time)
                         (when from
                           (let ((to (get-highest ring)))
                             (loop (for seq from (+ from 1) below to)
                                   (table-set! adds seq time))))))))))
              ;; missing
              ((udp-id-missing-packet))
              ;; gap
              ((udp-id-packet-gap))
              ;; got
              ((udp-id-got-packet)
               (let ((sequence (evolutionary-udp-sequence evolution n)))
                 (let ((data (find-create sequence)))
                   (when data
                     (when show-visualize?
                       (terminal 'got sequence))
                     (visualizer-replace-got ring sequence data)))))
              ;; duplicate
              ((udp-id-duplicate-packet))
              ;; reject
              ((udp-id-reject-packet))
              ;; play / freeze
              ((udp-id-play-frame udp-id-freeze-frame)
               (let ((frame (evolutionary-udp-frame evolution n)))
                 (when show-visualize?
                   (terminal 'play frame))
                 (let ((packet (visualizer-earliest-packet ring)))
                   (let ((consistent? (and packet (eqv? (get-frame packet) frame))))
                     (when (if debug-visualize? (assert consistent? #t) consistent?)
                       ;; we cannot rely on having the video keyframes in the evolution
                       ;; on the other hand playing implies state ok or late...
                       (if (= id udp-id-play-frame)
                           (state-ok ring)
                         (state-late ring))
                       (let ((complete? (visualizer-frame-complete? ring 0)))
                         (visualizer-iterate-frame ring
                           (lambda (packet)
                             (table-set! removes (get-sequence packet) (list packet (evolutionary-udp-time evolution n) complete?))))
                         (when complete?
                           (let ((origin-media (if (= kind udp-audio) origin-audio origin-video)))
                             (when origin-media
                               (let ((first (packet-ref ring 0)))
                                 (let ((sequence (get-sequence first))
                                       (total (get-total first))
                                       (keyframe? (get-keyframe? first)))
                                   (let ((packets (loop (for n from 0 below total)
                                                        (collect (locate-packet origin-media (+ sequence n))))))
                                     (when (loop (for packet in packets)
                                                 (every (and packet (get-data packet))))
                                       (let ((buffer (with-record media
                                                       (if (= total 1)
                                                           (read-media-payload (get-data (car packets)))
                                                         (let ((chunks (map (lambda (data)
                                                                              (read-media-payload data))
                                                                            (map get-data packets))))
                                                           (apply u8vector-append chunks)))))
                                             (dts (flonum->timestamp (get-dts packet)))
                                             (pts (flonum->timestamp (get-pts packet)))
                                             (duration (get-duration packet))
                                             (keyframe? (get-keyframe? packet)))
                                         (ecase kind
                                           ((udp-audio)
                                            (when playing?
                                              (receive-visualizer-audio (current-audio) audio-output buffer dts pts duration)))
                                           ((udp-video)
                                            (if keyframe?
                                                (begin
                                                  (set! video-keyframe-played? #t)
                                                  (receive-visualizer-video (current-video) video-output buffer dts pts duration keyframe?))
                                              (when video-keyframe-played?
                                                (receive-visualizer-video (current-video) video-output buffer dts pts duration keyframe?))))))))))))))
                       (visualizer-remove-frame ring))))))
              ;; lost
              ((udp-id-lost-packet)
               (let ((sequence (evolutionary-udp-sequence evolution n)))
                 (when show-visualize?
                   (terminal 'missing sequence))
                 (let ((packet (visualizer-earliest-packet ring)))
                   (let ((consistent? (and packet (eqv? (get-sequence packet) sequence))))
                     (when (if debug-visualize? (assert consistent? #t) consistent?)
                       (assert (not (get-data packet))
                         (table-set! removes (get-sequence packet) (list packet (evolutionary-udp-time evolution n) #f))
                         (remove-packet ring)))))))
              ;; discard
              ((udp-id-discard-packet)
               (let ((sequence (evolutionary-udp-sequence evolution n)))
                 (when show-visualize?
                   (terminal 'discard sequence))
                 (let ((packet (visualizer-earliest-packet ring)))
                   (let ((consistent? (and packet (eqv? (get-sequence packet) sequence))))
                     (when (if debug-visualize? (assert consistent? #t) consistent?)
                       (assert (get-data packet)
                         (table-set! removes (get-sequence packet) (list packet (evolutionary-udp-time evolution n) (visualizer-frame-complete? ring 0)))
                         (remove-packet ring)))))))
              ;; ok
              ((udp-id-state-ok)
               (when show-visualize?
                 (terminal 'ok))
               (state-ok ring))
              ;; late
              ((udp-id-state-late)
               (when show-visualize?
                 (terminal 'late))
               (state-late ring))
              ;; waiting
              ((udp-id-state-waiting)
               (when show-visualize?
                 (terminal 'waiting))
               (state-waiting ring))
              ;; ack / traffic
              ((udp-id-send-state udp-id-send-ack udp-id-receive-ack udp-id-traffic-rate))
              ;; reset
              ((udp-id-reset-media))
              ;; throttle throttle-on throttle-off
              ((udp-id-throttle-frame udp-id-throttle-on udp-id-throttle-off))
              ;; system
              ((udp-id-paint-event udp-id-reshape-event udp-id-close-event udp-id-key-event udp-id-char-event udp-id-button-event udp-id-moved-event udp-id-wheel-event udp-id-file-event udp-id-drop-event udp-id-enter-event udp-id-leave-event udp-id-activate-event udp-id-deactivate-event udp-id-quit-event udp-id-user-event udp-id-other-event))
              ;; other
              (else
               (terminal 'unemulated (evolution-id->abbrev id)))))))))))
