;;;============
;;;  Together
;;;============
;;;
;;;; Together Run
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.run jazz


(import (jazz.action)
        (jazz.io)
        (jazz.platform)
        (jazz.settings)
        (world)
        (world.profiling)
        (together)
        (together.domain))


(definition protected (prepare-together)
  (set-together? #t)
  (set-window? #t)
  (set-tier-title "Together")
  (set-tier-kind 'client)
  (set-process-kind 'application)
  (set-settings-alias 'Resources)
  (set-settings-root (determine-settings-root))
  (set-documents-root (determine-documents-root))
  (set-settings-setup setup-settings)
  (set-settings-override override-settings)
  (set-aliases-setup setup-aliases)
  (set-valid-roles '(user developer))
  (set-default-server "Together")
  (set-server-filename (determine-server-filename))
  (set-worker-filename (determine-worker-filename))
  (set-action-item-visibility #f)
  (register-domain-names)
  (setup-profiling)
  (advise-sites))


(definition protected (prepare-settings)
  (load-unit 'world.settings)
  (when start-tier-listener
    (start-tier-listener))
  (when connect-slave-to-master
    (connect-slave-to-master)))


(definition (setup-settings settings)
  (for-each-property (lambda (property value)
                       (set-setting settings property value))
                     '(;; role
                       world.role                 user
                       ;; configure
                       world.render-rate          30.
                       world.render-rate-inactive 30.
                       ;; media
                       world.video-layout         circle
                       ;; test
                       world.init-script          #f
                       world.test-script          #f
                       world.test1-script         #f
                       world.test2-script         #f
                       world.test3-script         #f
                       world.test4-script         #f
                       world.test5-script         #f
                       world.test6-script         #f
                       world.test7-script         #f
                       world.test8-script         #f
                       world.test9-script         #f
                       world.test0-script         #f
                       ;; worker
                       world.worker?              #f)))


(definition (override-settings settings)
  (for-each-property (lambda (property value)
                       (set-setting settings property value))
                     '(;; interface
                       world.show-belt?           #f
                       ;; audio
                       world.music?               #f
                       world.ambience?            #f
                       ;; video
                       world.sun-cycle?           #f
                       world.start-time           day
                       ;; generation
                       world.tile-pack            "minecraft"
                       world.tile-resolution      16
                       world.generate-mipmap?     #t
                       world.min-filter           linear
                       world.mag-filter           nearest)))


(definition (create-documents)
  (create-directories {Directory Documents "assets"})
  (create-directories {Directory Documents "shared"})
  (create-directories {Directory Documents "streams"}))


(definition (install-valid?)
  (define (inside-installer?)
    (and kernel-bundle-root
         (let ((root (new Directory (tokenise-filename kernel-bundle-root))))
           (and (filename=? (get-name root) "Together.app")
                (let ((apps (get-parent root)))
                  (and (filename=? (get-name apps) "Apps")
                       (exists? (new-directory apps "Update.app"))
                       (let ((contents (get-parent apps)))
                         (and (filename=? (get-name contents) "Contents")
                              (exists? (new-directory contents "MacOS"))
                              (exists? (new-directory contents "Worlds"))
                              (let ((app (get-parent contents)))
                                (filename=? (get-name app) "Together.app"))))))))))
  
  (if (and (inside-installer?)
           (not (equal? (string-argument "called-from" #f)
                        "installer")))
      (begin
        (system-message (format "Please use the green icon to launch Together")
                        type: 'problem
                        title: "Together")
        #f)
    #t))


(definition (run-together descriptor)
  (when (install-valid?)
    (prepare-together)
    (prepare-settings)
    (create-documents)
    (load-unit 'world.work)
    (load-unit 'together.boot)
    (boot-process)))


(register-product-run 'together
  run-together))
