;;;============
;;;  Together
;;;============
;;;
;;;; Community Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.community jazz


(import (jazz.component)
        (jazz.event)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.process)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.audio)
        (world.autoload)
        (world.client.tier)
        (world.context)
        (world.geometry)
        (world.interface)
        (world.interface.clients)
        (world.interface.command)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.text)
        (world.interface.tiers)
        (world.io)
        (world.ring)
        (world.settings)
        (world.skybox)
        (world.task)
        (world.video)
        (world.window)
        (together.settings)
        (together.zone))


(class Community-Zone extends Together-Zone
  
  
  (slot stage           initialize #f                getter generate)
  (slot configuration   initialize #f                getter generate)
  (slot selected-group  initialize #f                getter generate)
  (slot selected-player initialize #f                getter generate)
  (slot joined-circle   initialize #f                getter generate)
  (slot view-focused    initialize #f                getter generate)
  (slot draw-hook       initialize #f                getter generate)
  (slot hide-ring       initialize (new Time-Ring 1) getter generate)
  (slot hide-thread     initialize #f                getter generate)
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (when (window?)
      (let ((world (current-world)))
        (setup-stage self)
        (setup-configuration self)
        (install-zone self)
        (install-stage self)
        (install-hooks self)
        (install-hider self)
        (set-escape-hook world (lambda () (close-frame self)))
        (set-draw-me? self #f)
        (view-people self)
        (when (world-setting 'together.guillaume? #f)
          (create-group (current-tier) "Circle")))))
  
  
  (method override (destroy self)
    (when (window?)
      (let ((world (current-world)))
        (uninstall-hider self)
        (uninstall-hooks self)
        (uninstall-stage self)
        (no-showcase world)
        (set-draw-me? self #t)
        (uninstall-camera)))
    (nextmethod self))
  
  
  (method (setup-stage self)
    (set! stage 'gathering))
  
  
  (method (setup-configuration self)
    (let ((file (together-file)))
      (set! configuration (instantiate (read-form file)))))
  
  
  (method override (mute-audio? self)
    (neq? stage 'circle))
  
  
  (method (hide-all self)
    (let ((interface (current-interface))
          (world (current-world)))
      (for-each (lambda (child)
                  (set-visible? child #f))
                (get-children interface))))
  
  
  (method (install-zone self)
    (let ((interface (current-interface)))
      (let ((version (process-version (current-process)))
            (release (process-release (current-process)))
            (name (get-character-name configuration)))
        ;; gathering
        (new Label-View name: 'together parent: interface title: tier-title location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
        (new Name-Label name: 'name parent: interface title: name location: '(-10 10) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present version)) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(30 -30) size: {Dimension 100 24} action-handler: (~ on-quit self))
        @invite
        (new Label-View name: 'join-invite parent: interface title: "Join an existing circle" location: '(center (center -75)) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 30 shadow: thin})
        (new Kind-Label name: 'circle parent: interface title: "" location: '(center (center -40)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} background: {Color Black alpha: .2} justification: 'center)
        (new Push-Button name: 'join parent: interface title: "Join" enabled?: #f location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 15.5} action-handler: (~ on-join self))
        (new Kind-Label name: 'people-label parent: interface title: "People" location: '(10 60) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (new People-Panel name: 'people parent: interface location: '(10 100) proportion: '(220 (bounds -300)) layout-type: 'border)
        (new Kind-Label name: 'chat-label parent: interface title: "Chat" location: '(-10 60) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (let ((chat (child interface 'chat)))
          (set-border-type (child chat 'border) 'solid)
          (set-border-color (child chat 'border) {Color Dark-Gray})
          (set-location chat '(-10 100))
          (set-proportion chat '(220 (bounds -300))))
        (new Kind-Label name: 'command-to parent: interface title: "To The gathering" location: '(-10 -158) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'head)
        (let ((command (child interface 'command)))
          (set-border-type (child command 'border) 'solid)
          (set-border-color (child command 'border) {Color Dark-Gray})
          (set-location command '(-10 -146))
          (set-size command (new Dimension 220 19)))
        (new Toggle-Button name: 'about parent: interface title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} action-handler: (~ on-about self))
        ;; create
        @invite
        (new Label-View name: 'create-invite parent: interface title: "or create your own" location: '(center -170) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 30 shadow: thin})
        (new Kind-Label name: 'circle-label parent: interface title: "New circle name" location: '(center -120) size: {Dimension 200 40} auto-size?: #t font: {Font Label-User point-size: 17.5 antialias: default} background: {Color Black alpha: .2} justification: 'tail)
        (new Name-View name: 'circle-view parent: interface location: '(center -90) border-type: 'solid border-color: {Color Dark-Gray} action-view: 'circle-create)
        (new Push-Button name: 'circle-create parent: interface title: "Create & Join" enabled?: #f location: '(center -30) size: {Dimension 180 36} font: {Font Label-User point-size: 15.5} action-handler: (~ on-create&join self))
        ;; circle
        (new Kind-Label name: 'circle-name parent: interface title: name location: '(-10 10) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
        (new Push-Button name: 'leave parent: interface title: "Leave" location: '(30 -30) size: {Dimension 100 24} action-handler: (~ on-leave self))
        (new Push-Button name: 'audio parent: interface location: '(180 -30) size: {Dimension 150 24} action-handler: (~ on-toggle-audio self))
        (new Push-Button name: 'video parent: interface location: '(340 -30) size: {Dimension 150 24} action-handler: (~ on-toggle-video self))
        (new Push-Button name: 'layouts parent: interface location: '(540 -30) size: {Dimension 150 24} action-handler: (~ on-cycle-layouts self))
        (new Push-Button name: 'people-button parent: interface location: '(-190 -30) size: {Dimension 150 24} action-handler: (~ on-toggle-people self))
        (new Push-Button name: 'chat-button parent: interface location: '(-30 -30) size: {Dimension 150 24} action-handler: (~ on-toggle-chat self))
        ;; hide
        (hide-all self))))
  
  
  (method (install-stage self)
    (case stage
      ((gathering)
       (install-gathering self))
      ((circle)
       (install-circle self))))
  
  
  (method (install-gathering self)
    (let ((interface (current-interface))
          (world (current-world))
          (audio (current-audio))
          (video (current-video)))
      (define (show name)
        (set-visible? (child interface name) #t))
      
      (define (title name str)
        (set-title (child interface name) str))
      
      (define (enabled? name flag)
        (set-enabled? (child interface name) flag))
      
      (stop-audio audio feedback?: #f)
      (stop-video video feedback?: #f)
      (show 'together)
      (show 'version)
      (show 'release)
      (show 'quit)
      @invite
      (show 'join-invite)
      (show 'name)
      (show 'circle)
      (show 'join)
      ;; quicky for test
      (cond ((and selected-group (not selected-player))
             (title 'circle selected-group)
             (enabled? 'join #t))
            (else
             (title 'circle "")
             (enabled? 'join #f)))
      @invite
      (show 'create-invite)
      (show 'circle-label)
      (show 'circle-view)
      (show 'circle-create)
      (show 'people-label)
      (show 'people)
      (show 'chat-label)
      (show 'chat)
      (show 'command-to)
      (title 'command-to "To The gathering")
      (show 'command)
      (show 'about)
      (add-exception-view self)
      (mute-all self)
      (layout-view interface)
      (no-showcase world)))
  
  
  (method (install-circle self)
    (let ((interface (current-interface))
          (world (current-world))
          (audio (current-audio))
          (video (current-video)))
      (define (show name)
        (set-visible? (child interface name) #t))
      
      (define (title name str)
        (set-title (child interface name) str))
      
      (show 'circle-name)
      (title 'circle-name joined-circle)
      (show 'leave)
      (show 'audio)
      (show 'video)
      (show 'layouts)
      (show 'people-button)
      (show 'chat-button)
      (when (not (world-setting 'together.hide-people? #t))
        (show 'people-label)
        (show 'people))
      (when (not (world-setting 'together.hide-chat? #t))
        (show 'chat-label)
        (show 'chat)
        (show 'command-to)
        (show 'command))
      (title 'command-to (format "To {a}" joined-circle))
      (delay-hide-interface self)
      (add-exception-view self)
      (unmute-all self)
      (layout-view interface)
      (no-showcase world)
      (when (world-setting 'together.auto-audio? #t)
        (start-audio audio))
      (when (world-setting 'together.auto-video? #t)
        (start-video video))
      (update-audio self)
      (update-video self)
      (update-layouts self)
      (update-buttons self)
      (focus-world)))
  
  
  (method (uninstall-stage self)
    (hide-all self))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (define (show name)
        (set-visible? (child interface name) #t))
      
      (define (closer frame)
        (show 'circle)
        (show 'join)
        (show 'people-label)
        (show 'people)
        (show 'chat-label)
        (show 'chat)
        (show 'command-to)
        (show 'command)
        (show 'circle-label)
        (show 'circle-view)
        (show 'circle-create)
        (when view-focused
          (inhibit-focus-selects-all self view-focused
            (lambda ()
              (acquire-focus view-focused)))))
      
      (let ((frame (top-frame)))
        (if (is? frame World-Document)
            (begin
              (close frame)
              (closer frame))
          (show-about self closer: closer)))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (define (hide name)
        (set-visible? (child interface name) #f))
      
      (set! view-focused (active-focus))
      (hide 'circle)
      (hide 'join)
      (hide 'people-label)
      (hide 'people)
      (hide 'chat-label)
      (hide 'chat)
      (hide 'command-to)
      (hide 'command)
      (hide 'circle-label)
      (hide 'circle-view)
      (hide 'circle-create)
      (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-moved self x y)
    (when (eq? stage 'circle)
      (show-interface self))
    (when (developer?)
      (show/hide-debug self (fxround x) (fxround y))))
  
  
  (method override (mouse-action self h v)
    (when (eq? stage 'circle)
      (show-interface self)))
  
  
  (method (install-hider self)
    (let ((thread (new-thread
                    (lambda ()
                      (declare (proper-tail-calls))
                      (let (loop)
                        (let ((proc (wait hide-ring)))
                          (when proc
                            (delay-event
                              (lambda ()
                                (proc)))
                            (loop)))))
                    'hider)))
      (set! hide-thread thread)
      (thread-start! thread)))
  
  
  (method (uninstall-hider self)
    (empty hide-ring)
    (insert hide-ring (current-seconds) #f))
  
  
  ;; we probably need a tolerance so moving
  ;; only 1 pixel doesn't show the interface
  (method (show-interface self)
    (let ((window (current-window))
          (interface (current-interface)))
      (show-cursor window)
      (set-visible? (child interface 'circle-name) #t)
      (set-visible? (child interface 'leave) #t)
      (set-visible? (child interface 'audio) #t)
      (set-visible? (child interface 'video) #t)
      (set-visible? (child interface 'layouts) #t)
      (delay-hide-interface self)))
  
  
  (method (delay-hide-interface self)
    (when (world-setting 'together.auto-hide? #t)
      (let ((hide-time (+ (current-seconds) 2.)))
        (empty hide-ring)
        (insert hide-ring hide-time (lambda ()
                                      (with-task-mutex
                                        (lambda ()
                                          (when (eq? stage 'circle)
                                            (let ((window (current-window))
                                                  (interface (current-interface)))
                                              (hide-cursor window)
                                              (set-visible? (child interface 'circle-name) #f)
                                              (set-visible? (child interface 'leave) #f)
                                              (set-visible? (child interface 'audio) #f)
                                              (set-visible? (child interface 'video) #f)
                                              (set-visible? (child interface 'layouts) #f))))))))))
  
  
  (method (show/hide-debug self h v)
    (let ((interface (current-interface)))
      (let ((toolbar (child interface 'debug)))
        (let ((pos (new Point h v)))
          (let ((in? (in-rect? pos (get-rect toolbar))))
            (set-visible? toolbar in?))))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-people self evt)
    (let ((interface (current-interface)))
      (when (eq? stage 'circle)
        (toggle-visible? (child interface 'people-label))
        (toggle-visible? (child interface 'people))
        (update-buttons self))))
  
  
  (method (on-toggle-chat self evt)
    (let ((interface (current-interface)))
      (when (eq? stage 'circle)
        (toggle-visible? (child interface 'chat-label))
        (toggle-visible? (child interface 'chat))
        (toggle-visible? (child interface 'command-to))
        (toggle-visible? (child interface 'command))
        (update-buttons self))))
  
  
  (method (update-buttons self)
    (let ((interface (current-interface)))
      (set-title (child interface 'people-button) (if (get-visible? (child interface 'people))
                                                      "Hide People"
                                                    "Show People"))
      (set-title (child interface 'chat-button) (if (get-visible? (child interface 'chat))
                                                    "Hide Chat"
                                                  "Show Chat"))))
  
  
  (method (on-toggle-audio self evt)
    (let ((audio (current-audio)))
      (when (eq? stage 'circle)
        (toggle-audio audio)
        (update-audio self))))
  
  
  (method (update-audio self)
    (let ((interface (current-interface))
          (audio (current-audio)))
      (set-title (child interface 'audio) (if (audio-playing? audio)
                                              "Stop Audio"
                                            "Start Audio"))))
  
  
  (method (on-toggle-video self evt)
    (let ((video (current-video)))
      (when (eq? stage 'circle)
        (toggle-video video)
        (update-video self)
        (invalidate-interface))))
  
  
  (method (update-video self)
    (let ((interface (current-interface))
          (video (current-video)))
      (set-title (child interface 'video) (if (video-playing? video)
                                              "Stop Video"
                                            "Start Video"))))
  
  
  (method override (enter-press self)
    (when (and (eq? stage 'gathering)
               (eq? (active-focus) (current-interface))
               selected-group
               (not selected-player))
      (join-circle self selected-group)))
  
  
  (method override (tab-press self)
    )
  
  
  (method package (on-join self evt)
    (join-circle self selected-group))
  
  
  (method (on-leave self evt)
    (leave-circle self))
  
  
  (method (on-create&join self evt)
    (create&join-circle self))
  
  
  (method override (name-return self)
    (create&join-circle self))
  
  
  (method (create&join-circle self)
    (let ((interface (current-interface))
          (tier (current-client))
          (world (current-world)))
      (let ((view (child interface 'circle-view)))
        (let ((text (locate view 'text)))
          (let ((name (trim-whitespace (get-string-content text))))
            (unless (empty-string? name)
              (let ((exception (create-group tier name)))
                (if exception
                    (display-error world exception)
                  (clear-message world)
                  (set-string-content text "")
                  (join-circle self name)))))))))
  
  
  (method (join-circle self name)
    (let ((tier (current-client))
          (world (current-world))
          (zone (current-zone)))
      (let ((exception (join-group tier name)))
        (if exception
            (display-error world exception)
          (clear-message world)
          (uninstall-camera)
          (remove-skybox zone)
          (set! joined-circle name)
          (goto-stage self 'circle)
          (invalidate-interface)))))
  
  
  (method (leave-circle self)
    (let ((tier (current-client))
          (zone (current-zone)))
      (leave-group tier joined-circle)
      (install-camera)
      (install-skybox zone (find-skybox (world-setting 'world.welcome-skybox "nebula")))
      (set! joined-circle #f)
      (goto-stage self 'gathering)
      (invalidate-interface)))
  
  
  (method (goto-stage self what)
    (uninstall-stage self)
    (set! stage what)
    (install-stage self))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  ;;;
  ;;;; Hooks
  ;;;
  
  
  (method (install-hooks self)
    (let ((interface (current-interface))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-processor-entered-hook tier (~ processor-entered self))
      (set-processor-exited-hook tier (~ processor-exited self))
      (set-hierarchy-update-hook tier (~ hierarchy-update self))
      (set-render-hook video (~ render-video self))
      (set! draw-hook (~ draw-frames self))
      (register-draw-hook interface draw-hook)
      (set-return-handler (child interface 'command) (~ command-return self))
      (set-escape-handler (child interface 'command) (~ command-escape self))))
  
  
  (method (uninstall-hooks self)
    (let ((interface (current-interface))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-processor-entered-hook tier #f)
      (set-processor-exited-hook tier #f)
      (set-hierarchy-update-hook tier #f)
      (set-render-hook video #f)
      (unregister-draw-hook interface draw-hook)
      (set-return-handler (child interface 'command) #f)
      (set-escape-handler (child interface 'command) #f)))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method (processor-entered self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} entered" character-name))))
  
  
  (method (processor-exited self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} exited" character-name))))
  
  
  (method (hierarchy-update self hierarchy)
    (let ((tree (people-tree self)))
      (with-preserved-selection tree
        (lambda ()
          (view-hierarchy self hierarchy))
        use: 'data
        test: equal?)
      (when (world-setting 'together.guillaume? #f)
        (when (not (get-single-selection tree))
          (select-user-data-row tree '(group "Circle") test: equal? error?: #f)))))
  
  
  ;;;
  ;;;; Media
  ;;;
  
  
  (method (render-video self video)
    (neq? stage 'circle))
  
  
  (method (draw-frames self surface)
    (let ((video (current-video)))
      (define (draw-output output)
        (when (is? output Sheet-Video-Sink)
          (when (not (get-on? output))
            (let ((sheet (get-sheet output)))
              (fill-rect surface (inflate-rect (get-rect sheet) -1 -1) {Color red: 30 green: 30 blue: 30})
              (frame-rect surface (get-rect sheet) {Color Dim-Gray})
              (set-font surface {Font font-name: tahoma point-size: 24 hint-style: slight hint-metrics: on})
              (let ((player (get-player output)))
                (let ((name (if (not player) "Me" (get-name player))))
                  (let ((extent (get-text-extent surface name)))
                    (let ((pos (get-position sheet))
                          (offset (center extent (get-size sheet))))
                      (draw-text surface (+ (get-h pos) (get-h offset)) (+ (get-v pos) (get-v offset)) name {Color White})))))))))
      
      (let ((self-output (find-output video #f)))
        (when (eq? stage 'circle)
          (for-each (lambda (output)
                      (unless (eq? output self-output)
                        (draw-output output)))
                    (get-ordered-outputs video))
          (when self-output
            (draw-output self-output))))))
  
  
  (method (mute-all self)
    (let ((audio (current-audio)))
      (iterate-table (get-outputs audio)
        (lambda (id output)
          (mute output)))))
  
  
  (method (unmute-all self)
    (let ((audio (current-audio)))
      (iterate-table (get-outputs audio)
        (lambda (id output)
          (unmute output)))))
  
  
  ;;;
  ;;;; People
  ;;;
  
  
  (method (people-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'people) '(people people))))
  
  
  (method (view-people self)
    (let ((tier (current-tier)))
      (view-hierarchy self (list-hierarchy tier))))
  
  
  (method (view-hierarchy self hierarchy)
    (let ((tier (current-tier))
          (me (current-me)))
      (let ((tree (people-tree self)))
        (remove-every-row tree)
        (with-update-locked tree
          (lambda ()
            (bind (gathering . groups) hierarchy
              (let ((players (cdr gathering)))
                (let ((row (add-row tree
                                  state: 'expanded
                                  children: (list (new Tree-Node
                                                    title: "The gathering"
                                                    font: {Font Label-User}
                                                    color: {Color red: 32 green: 205 blue: 33})))))
                  (for-each (lambda (info)
                              (bind (player id no) info
                                (add-row tree
                                         father: row
                                         children: (list (new Tree-Node title: player font: {Font Label-User} color: {Color World-Blue}))
                                         user-data: (list 'player player #f))))
                            (let ((me (get-name me)))
                              (sort di<? players key: (lambda (player)
                                                        (if (equal? player me)
                                                            (cons 0 player)
                                                          (cons 1 player))))))))
              (when (not-null? hierarchy)
                (add-row tree
                         children: (list (new Tree-Node title: "" font: {Font Label-User})))
                (for-each (lambda (info)
                            (bind (group . players) info
                              (let ((row (add-row tree
                                                  state: 'expanded
                                                  children: (list (new Tree-Node title: group font: {Font Label-User} color: {Color World-Red}))
                                                  user-data: (list 'group group))))
                                (for-each (lambda (info)
                                            (bind (player id no) info
                                              (add-row tree
                                                       father: row
                                                       children: (list (new Tree-Node title: player font: {Font Label-User} color: {Color World-Blue}))
                                                       user-data: (list 'player player group))))
                                          players))))
                          (sort di<? groups key: car)))))))))
  
  
  (method package (people-selection-change self)
    (let ((interface (current-interface)))
      (let ((tree (people-tree self)))
        (let ((selected (or (get-single-selected-data tree) (list 'group #f))))
          (bind (kind . rest) selected
            (define (select group player)
              (set! selected-group group)
              (set! selected-player player)
              (cond ((not group)
                     (set-title (child interface 'circle) "")
                     (set-enabled? (child interface 'join) #f))
                    (else
                     (set-title (child interface 'circle) group)
                     (set-enabled? (child interface 'join) #t)
                     (layout-view interface))))
            
            (case kind
              ((player)
               (bind (player group) rest
                 (select group player)))
              ((group)
               (bind (group) rest
                 (select group #f)))))))))
  
  
  (method package (people-double-click self)
    (when (and selected-group (not selected-player))
      (join-circle self selected-group)))
  
  
  ;;;
  ;;;; Chat
  ;;;
  
  
  (method (command-return self command)
    (define (parse-content content)
      (if (not (developer?))
          (values 'group (group-recipient) content)
        (cond ((starts-with? content "/s ")
               (values 'server #f (substring content 3 (string-length content))))
              ((starts-with? content "/g ")
               (values 'group (group-recipient) (substring content 3 (string-length content))))
              ((starts-with? content "/w ")
               (let ((str (substring content 3 (string-length content))))
                 (let ((pos (find str #\space)))
                   (if (not pos)
                       (values 'whisper (get-name (current-me)) str)
                     (let ((recipient (substring str 0 pos))
                           (message (substring str (+ pos 1) (string-length str))))
                       (show-panel-whisper recipient message)
                       (values 'whisper recipient message))))))
              ((starts-with? content "/r ")
               (let ((last-whisperer (get-last-whisperer (current-world)))
                     (message (substring content 3 (string-length content))))
                 (if (not last-whisperer)
                     (values 'group (group-recipient) message)
                   (show-panel-whisper last-whisperer message)
                   (values 'whisper last-whisperer message))))
              (else
               (values 'group (group-recipient) content)))))
    
    (define (group-recipient)
      (if (eq? stage 'circle)
          joined-circle
        #f))
    
    (define (show-panel-whisper recipient message)
      (let ((interface (current-interface)))
        (let ((panel (child interface 'chat)))
          (show-whisper panel recipient message))))
    
    (let ((world (current-world))
          (tier (current-client)))
      (let ((text (locate command 'text)))
        (let ((content (get-string-content text)))
          (unless (whitespace? content)
            (receive (kind recipient message) (parse-content content)
              (client-message tier kind recipient message)
              (set-string-content text "")))))))
  
  
  (method (command-escape self command)
    )
  
  
  ;;;
  ;;;; Layouts
  ;;;


  (method (on-cycle-layouts self evt)
    (let ((world (current-world)))
      (when (eq? stage 'circle)
        (cycle-layouts self)
        (update-layouts self)
        (display-message world (capitalize (symbol->string (get-video-layout)))))))
  
  
  (method (cycle-layouts self)
    (let ((video (current-video)))
      (case (get-video-layout)
        ((gallery)
         (fullscreen-layout video)
         (invalidate-interface))
        ((fullscreen)
         (gallery-layout video)
         (invalidate-interface)))))
  
  
  (method (update-layouts self)
    (let ((interface (current-interface)))
      (set-title (child interface 'layouts)
                 (case (get-video-layout)
                   ((gallery) "Fullscreen")
                   (else "Gallery"))))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (when (developer?)
      (open-login-zone))))


;;;
;;;; People-Panel
;;;


(class People-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>   name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<People-View> name: people  location: center)))))


;;;
;;;; People-View
;;;


(class People-View extends Scroller-View
  
  
  (form
    (<install>                                 style: document hscroll?: #t vscroll?: #t
      (<content~>                              layout-type: fill
        (<Tree-Header>                         style: document shown?: #f
          (<content~>
            (<Tree-View>          name: people portfolio: :images filled-column: person background: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click}
              (<Tree-Node-Column> name: person title: "Person" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-selection-change self evt)
    (let ((zone (current-zone)))
      (people-selection-change zone)))
  
  
  (method package (on-double-click self evt)
    (let ((zone (current-zone)))
      (people-double-click zone)))))
