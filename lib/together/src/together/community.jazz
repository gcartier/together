;;;============
;;;  Together
;;;============
;;;
;;;; Community Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.community jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.console)
        (jazz.editor)
        (jazz.event)
        (jazz.exemplar)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.math)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.stream)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (time)
        (world)
        (world.asset)
        (world.audio)
        (world.autoload)
        (world.camera)
        (world.chronology)
        (world.circle)
        (world.client.text)
        (world.client.tier)
        (world.client.udp)
        (world.context)
        (world.evolution)
        (world.geometry)
        (world.interface)
        (world.interface.bindings)
        (world.interface.chat)
        (world.interface.clients)
        (world.interface.command)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.evolution)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.script)
        (world.interface.sheet)
        (world.interface.text)
        (world.interface.tiers)
        (world.interface.timeline)
        (world.io)
        (world.manager)
        (world.pane)
        (world.profile)
        (world.profiling)
        (world.ring)
        (world.script.asset)
        (world.settings)
        (world.skybox)
        (world.sound)
        (world.stream)
        (world.streamer)
        (world.streaming)
        (world.task)
        (world.timeline)
        (world.udp)
        (world.video)
        (world.window)
        (together)
        (together.network)
        (together.replay)
        (together.script)
        (together.settings)
        (together.simulator)
        (together.visualizer)
        (together.zone))


(definition auto-hide?
  (world-setting 'together.auto-hide? #t))

(definition auto-audio?
  (world-setting 'together.auto-audio? #t))

(definition auto-video?
  (world-setting 'together.auto-video? #t))

(definition auto-live?
  (if (developer?)
      (world-setting 'together.auto-live? #t)
    #t))

(definition hide-people?
  (world-setting 'together.hide-people? #t))

(definition hide-chat?
  (world-setting 'together.hide-chat? #t))


(definition auto-create
  (world-setting 'together.auto-create #f))

(definition auto-join
  (world-setting 'together.auto-join #f))


(definition protected show-dropped?
  (world-setting 'together.show-dropped? #f))


(definition protected show-debug?
  #f)

(definition protected (set-show-debug? flag)
  (set! show-debug? flag))


(class Community-Zone extends Together-Zone
  
  
  (slot configuration     initialize #f getter generate)
  (slot selected-group    initialize #f getter generate)
  (slot selected-player   initialize #f getter generate)
  (slot joined-circle     initialize #f getter generate)
  (slot circle-start      initialize #f getter generate)
  (slot message-recipient initialize #f getter generate)
  (slot view-focused      initialize #f getter generate)
  (slot draw-hook         initialize #f getter generate)
  (slot hide-ring         initialize #f getter generate)
  (slot hide-thread       initialize #f getter generate)
  (slot first-hierarchy?  initialize #t getter generate)
  (slot buttons-shown?    initialize #t getter generate)
  (slot disconnected?     initialize #f getter generate)
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (when (window?)
      (let ((world (current-world))
            (client (current-client)))
        (setup-stage self)
        (setup-configuration self)
        (install-zone self)
        (install-stage self)
        (install-hooks self)
        (install-experiments self)
        (set-escape-hook world (~ escape-press self))
        (set-unbind-camera? (world-setting 'together.unbind-camera? #f))
        (view-people self)
        (when auto-create
          (for-each (lambda (name)
                      (create-group client name #t))
                    (listify auto-create)))
        (when auto-join
          (join-circle self auto-join)))))
  
  
  (method override (destroy self)
    (when (window?)
      (let ((world (current-world))
            (client (current-client)))
        (let ((udp-client (get-udp-client client)))
          (stop udp-client)
          (close-live-stream client)
          (close-send-streams udp-client)
          (close-receive-streams udp-client))
        (uninstall-hooks self)
        (uninstall-stage self)
        (uninstall-zone self)
        (set-unbind-camera? #t)
        (set! stage #f)
        (no-showcase world)
        (uninstall-camera)))
    (nextmethod self))
  
  
  (method (setup-stage self)
    (set! stage 'gathering))
  
  
  (method (setup-configuration self)
    (let ((file (together-file)))
      (set! configuration (instantiate (read-form file)))))
  
  
  (method override (show-me? self)
    (and sphere? (eq? stage 'circle)))
  
  
  (method override (mute-audio? self)
    (neq? stage 'circle))
  
  
  (method (install-zone self)
    (let ((interface (current-interface)))
      (let ((version (process-version (current-process)))
            (release (process-release (current-process)))
            (name (get-character-name configuration)))
        ;; common
        (new Profile-Label name: 'profile parent: interface location: '(-10 10) size: {Dimension 100 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: '(tail head))
        (new Kind-Label name: 'people-label parent: interface title: "People" location: '(10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (new People-Panel name: 'people parent: interface location: '(10 100) proportion: '(220 (bounds -300)) layout-type: 'border)
        (new Kind-Label name: 'streams-label parent: interface title: "Streams" location: '(10 64) size: {Dimension 300 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (new Streams-Panel name: 'streams parent: interface location: '(10 100) proportion: '(300 (bounds -300)) layout-type: 'border)
        (new Kind-Label name: 'chat-label parent: interface title: "Chat" location: '(-10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (let ((chat (child interface 'chat)))
          (set-border-type (child chat 'border) 'solid)
          (set-border-color (child chat 'border) {Color Dark-Gray})
          (set-location chat '(-10 100))
          (set-proportion chat '(220 (bounds -354))))
        (let ((to (new View name: 'command-to parent: interface size: {Dimension 220 40})))
          (new Kind-Label name: 'to-label parent: to title: "To" position: {Point 0 0} size: {Dimension 22 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'head)
          (new Kind-Label name: 'to parent: to title: "The gathering" position: {Point 22 0} size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'head))
        (let ((command (child interface 'command)))
          (set-border-type (child command 'border) 'solid)
          (set-border-color (child command 'border) {Color Dark-Gray})
          (set-location command '(-10 -200))
          (set-size command (new Dimension 220 19)))
        (new Kind-Label name: 'experiment-label parent: interface title: "Experiment" location: '(center 144) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (new Experiment-Panel name: 'experiment parent: interface location: '(center 180) proportion: '((bounds -500) (bounds -380)) layout-type: 'fill)
        (when (developer?)
          (new Kind-Label name: 'admin-label parent: interface title: "Admin" location: '(center 144) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
          (new Admin-Panel name: 'admin parent: interface location: '(center 180) proportion: '((bounds -500) (bounds -380)) layout-type: 'fill)
          (initial-banner (locate (child interface 'admin) '(console text)) (format "Together server v{a}" (present version))))
        (update-profile (child interface 'profile))
        (add-exception-view self)
        ;; gathering
        (let ((root (new Together-Root name: 'gathering parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Label-View name: 'together parent: root title: tier-title location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
          (new Name-Label name: 'name parent: root title: name location: '(-125 10) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
          (new Version-Label name: 'version parent: root title: (format "v{a}{a}" (present version) environment-suffix) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Version-Label name: 'release parent: root title: release location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Push-Button name: 'quit parent: root title: "Quit" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-quit self))
          (new Kind-Label name: 'circle parent: root title: "" location: '(center (center -40)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'center)
          (new Push-Button name: 'join parent: root title: "Join" enabled?: #f location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-join self))
          (new Toggle-Button name: 'about parent: root title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-about self))
          (new Kind-Label name: 'circle-label parent: root title: "New circle name" location: '(center -120) size: {Dimension 200 40} auto-size?: #t font: {Font Label-User point-size: 17.5 antialias: default} justification: 'tail)
          (new Name-View name: 'circle-view parent: root location: '(center -90) border-type: 'solid border-color: {Color Dark-Gray} action-view: 'circle-create)
          (new Push-Button name: 'circle-create parent: root title: "Create & Join" enabled?: #f location: '(center -30) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-create&join self)))
        ;; circle
        (let ((root (new Together-Root name: 'circle parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Kind-Label name: 'circle-name parent: root title: name location: '(-125 10) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
          (new Push-Button name: 'audio parent: root location: '(30 30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-audio self))
          (new Push-Button name: 'video parent: root location: '(195 30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-video self))
          (new Push-Button name: 'leave parent: root title: "Leave" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-leave self))
          (new Push-Button name: 'layouts parent: root location: '(180 -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-cycle-layouts self))
          (new Push-Button name: 'toggle-people parent: root location: '(-210 -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-people self))
          (new Push-Button name: 'toggle-chat parent: root location: '(-30 -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-chat self)))
        ;; script
        (let ((root (new Together-Root name: 'script-root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Push-Button name: 'back parent: root title: "Back" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-back self)))
        ;; replay
        (let ((root (new Together-Replay-Panel name: 'replay parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Together-Visualizer-Panel parent: root name: 'visualizer visible?: #t layouter: (lambda (panel) (together-visualizer-panel-layouter panel)))
          (new Together-Timeline-Panel parent: root name: 'timeline visible?: #t layouter: (lambda (panel) (together-timeline-panel-layouter panel)))
          (new Together-Evolution-Panel parent: root name: 'evolution visible?: #t layouter: (lambda (panel) (together-evolution-panel-layouter panel)))
          (new Push-Button name: 'back parent: root title: "Back" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-back self)))
        ;; simulate
        (let ((root (new Together-Root name: 'simulate parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Together-Simulator-Panel parent: root name: 'simulator visible?: #t layouter: (lambda (panel) (together-simulator-panel-layouter panel)))
          (new Push-Button name: 'back parent: root title: "Back" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-back self)))
        ;; hide all
        (for-each (lambda (child)
                    (set-visible? child #f))
                  (get-children interface)))))
  
  
  (method (install-stage self)
    (let ((interface (current-interface)))
      (case stage
        ((gathering)
         (install-gathering self))
        ((circle)
         (install-circle self))
        ((script)
         (install-script self))
        ((replay)
         (install-replay self))
        ((simulate)
         (install-simulate self)))
      (show root)
      (send-to-back root)
      (if (developer?)
          (unless (eq? (active-focus) (locate (child interface 'admin) '(console text)))
            (focus-world))
        (focus-world))))
  
  
  (method (install-gathering self)
    (let ((interface (current-interface))
          (world (current-world)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (hide parent name)
        (set-visible? (child parent name) #f))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (define (title parent name str)
        (set-title (child parent name) str))
      
      (define (color parent name color)
        (set-color (child parent name) color))
      
      (define (location parent name loc)
        (set-location (child parent name) loc))
      
      (define (proportion parent name prop)
        (set-proportion (child parent name) prop))
      
      (set! root (child interface 'gathering))
      (show root 'together)
      (show root 'version)
      (show root 'release)
      (show root 'quit)
      (show root 'name)
      (when (developer?)
        (let ((admin-visible? (get-visible? (child interface 'admin))))
          (visible root 'circle (not admin-visible?))
          (visible root 'join (not admin-visible?))))
      (show root 'circle-label)
      (show root 'circle-view)
      (show root 'circle-create)
      (show interface 'profile)
      (show interface 'people-label)
      (show interface 'people)
      (hide interface 'streams-label)
      (hide interface 'streams)
      (show interface 'chat-label)
      (show interface 'chat)
      (proportion interface 'chat '(220 (bounds -300)))
      (show interface 'command-to)
      (location interface 'command-to '(-10 -158))
      (show interface 'command)
      (location interface 'command '(-10 -146))
      (show root 'about)
      (title interface '(command-to to) "The gathering")
      (color interface '(command-to to) {Color red: 32 green: 205 blue: 33})
      (update-to self)
      (update-circle/join self)
      (layout-view interface)
      (layout-view root)
      (no-showcase world)))
  
  
  (method (install-circle self)
    (let ((interface (current-interface))
          (world (current-world)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (define (title parent name str)
        (set-title (child parent name) str))
      
      (define (color parent name color)
        (set-color (child parent name) color))
      
      (define (location parent name loc)
        (set-location (child parent name) loc))
      
      (define (proportion parent name prop)
        (set-proportion (child parent name) prop))
      
      (set! root (child interface 'circle))
      (show root 'circle-name)
      (title root 'circle-name joined-circle)
      (show root 'toggle-people)
      (show root 'toggle-chat)
      (show root 'leave)
      (show root 'audio)
      (show root 'video)
      (show root 'layouts)
      (show interface 'profile)
      (visible interface 'people-label (not hide-people?))
      (visible interface 'people (not hide-people?))
      (proportion interface 'chat '(220 (bounds -354)))
      (location interface 'command-to '(-10 -212))
      (location interface 'command '(-10 -200))
      (visible interface 'chat-label (not hide-chat?))
      (visible interface 'chat (not hide-chat?))
      (visible interface 'command-to (not hide-chat?))
      (visible interface 'command (not hide-chat?))
      (update-to self)
      (layout-view interface)
      (layout-view root)
      (no-showcase world)
      (update-audio self)
      (update-video self)
      (update-layouts self)
      (update-buttons self)
      (when auto-hide?
        (install-hider self)
        (delay-hide-interface self #t))))
  
  
  (method (install-script self)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (set! root (child interface 'script-root))
      (show root 'back)
      (show interface 'script)
      (visible interface 'profile #f)
      (visible interface 'people-label #f)
      (visible interface 'people #f)
      (visible interface 'streams-label #f)
      (visible interface 'streams #f)
      (visible interface 'chat-label #f)
      (visible interface 'chat #f)
      (visible interface 'command-to #f)
      (visible interface 'command #f)
      (layout-view interface)
      (layout-view root)))
  
  
  (method (install-replay self)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (set! root (child interface 'replay))
      (show root 'visualizer)
      (show root 'timeline)
      (show root 'evolution)
      (show root 'back)
      (visible interface 'profile #f)
      (visible interface 'people-label #f)
      (visible interface 'people #f)
      (visible interface 'streams-label #f)
      (visible interface 'streams #f)
      (visible interface 'chat-label #f)
      (visible interface 'chat #f)
      (visible interface 'command-to #f)
      (visible interface 'command #f)
      (layout-view interface)
      (layout-view root)))
  
  
  (method (install-simulate self)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (set! root (child interface 'simulate))
      (show root 'simulator)
      (show root 'back)
      (visible interface 'profile #f)
      (visible interface 'people-label #f)
      (visible interface 'people #f)
      (visible interface 'streams-label #f)
      (visible interface 'streams #f)
      (visible interface 'chat-label #f)
      (visible interface 'chat #f)
      (visible interface 'command-to #f)
      (visible interface 'command #f)
      (layout-view interface)
      (layout-view root)))
  
  
  (method (uninstall-stage self)
    (let ((interface (current-interface)))
      (case stage
        ((circle)
         (when auto-hide?
           (uninstall-hider self)))
        ((script)
         (let ((panel (child interface 'script)))
           (let ((manager (locate panel 'manager)))
             (save-script manager))
           (hide panel))))
      (hide root)))
  
  
  (method (uninstall-zone self)
    (let ((interface (current-interface)))
      (close (child interface 'profile))
      (close (child interface 'people-label))
      (close (child interface 'people))
      (close (child interface 'streams-label))
      (close (child interface 'streams))
      (close (child interface 'chat-label))
      (close (child interface 'command-to))
      (when (developer?)
        (close (child interface 'admin-label))
        (close (child interface 'admin)))
      (close (child interface 'gathering))
      (close (child interface 'circle))
      (close (child interface 'replay))
      (close (child interface 'simulate))
      (close (child interface 'exception))))
  
  
  (method protected (sleep-process self)
    (with-task-mutex
      (lambda ()
        (let ((client (current-client)))
          (when (eq? stage 'circle)
            (leave-circle self)
            (set! disconnected? #t))
          (sleep-to-server client)))))
  
  
  (method protected (wake-process self)
    (with-task-mutex
      (lambda ()
        (let ((client (current-client))
              (world (current-world)))
          (wake-to-server client)
          (when disconnected?
            (display-message world "Disconnected from circle" duration: 5.)
            (set! disconnected? #f))))))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (closer frame)
        (show root 'circle)
        (show root 'join)
        (show interface 'people-label)
        (show interface 'people)
        (show interface 'chat-label)
        (show interface 'chat)
        (show interface 'command-to)
        (show interface 'command)
        (show root 'circle-label)
        (show root 'circle-view)
        (show root 'circle-create)
        (when view-focused
          (inhibit-focus-selects-all self view-focused
            (lambda ()
              (acquire-focus view-focused)))))
      
      (let ((frame (top-frame)))
        (if (is? frame World-Document)
            (begin
              (close frame)
              (closer frame))
          (show-about self closer: closer)))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (define (hide parent name)
        (set-visible? (child parent name) #f))
      
      (set! view-focused (active-focus))
      (hide root 'circle)
      (hide root 'join)
      (hide interface 'people-label)
      (hide interface 'people)
      (hide interface 'streams-label)
      (hide interface 'streams)
      (hide interface 'chat-label)
      (hide interface 'chat)
      (hide interface 'command-to)
      (hide interface 'command)
      (when (developer?)
        (hide interface 'admin-label)
        (hide interface 'admin))
      (hide root 'circle-label)
      (hide root 'circle-view)
      (hide root 'circle-create)
      (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  (method (update-circle/join self)
    (let ((interface (current-interface)))
      (cond ((not selected-group)
             (set-title (child root 'circle) "")
             (set-enabled? (child root 'join) #f))
            (else
             (set-title (child root 'circle) selected-group)
             (set-enabled? (child root 'join) #t)
             (layout-view root)))))
  
  
  (method (update-to self)
    (let ((interface (current-interface)))
      (let ((to (child interface '(command-to to))))
        (cond (selected-player
               (set-title to selected-player)
               (set-color to {Color World-Blue})
               (set! message-recipient (list 'player selected-player)))
              (selected-group
               (when (and (eq? stage 'circle)
                          (equal? selected-group joined-circle))
                 (set-title to selected-group)
                 (set-color to {Color World-Red})
                 (set! message-recipient (list 'group selected-group))))
              (else
               (set-title to "The gathering")
               (set-color to {Color red: 32 green: 205 blue: 33})
               (set! message-recipient #f))))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-moved self x y)
    (unless (script-visible? self)
      (when (eq? stage 'circle)
        (show-interface self #t))
      (when (developer?)
        (show/hide-debug self (fxround x) (fxround y)))))
  
  
  (method override (mouse-down self h v)
    (mouse-activity self #f))
  
  
  (method override (mouse-up self h v)
    (mouse-activity self))
  
  
  (method override (mouse-action self h v)
    (mouse-activity self))
  
  
  (method override (double-click self h v)
    (mouse-activity self))
  
  
  (method override (multiple-click self h v)
    (mouse-activity self))
  
  
  (method (mouse-activity self (hide-interface? #t))
    (unless (script-visible? self)
      (when (eq? stage 'circle)
        (show-interface self hide-interface?))))
  
  
  (method (install-hider self)
    (unless hide-thread
      (let ((thread (new-thread
                      (lambda ()
                        (declare (proper-tail-calls))
                        (let (loop)
                          (let ((proc (wait hide-ring)))
                            (when proc
                              (delay-event
                                (lambda ()
                                  (proc)))
                              (loop)))))
                      'hider)))
        (set! hide-ring (new Time-Ring 1))
        (set! hide-thread thread)
        (thread-start! thread))))
  
  
  (method (uninstall-hider self)
    (when hide-thread
      (terminate hide-ring)
      (thread-join! hide-thread)
      (set! hide-ring #f)
      (set! hide-thread #f)))
  
  
  ;; we probably need a tolerance so moving
  ;; only 1 pixel doesn't show the interface
  (method protected (show-interface self hide-interface?)
    (let ((window (current-window))
          (interface (current-interface))
          (video (current-video)))
      (unless buttons-shown?
        @wait-later-version-as-it-needs-debugging
        (show-cursor window)
        (set-visible? (child interface 'profile) #t)
        (set-visible? (child root 'circle-name) #t)
        (set-visible? (child root 'toggle-people) #t)
        (set-visible? (child root 'toggle-chat) #t)
        (set-visible? (child root 'leave) #t)
        (set-visible? (child root 'audio) #t)
        (set-visible? (child root 'video) #t)
        (set-visible? (child root 'layouts) #t)
        (set-video-interface? #t)
        (invalidate-outputs video)
        (set! buttons-shown? #t))
      (delay-hide-interface self hide-interface?)))
  
  
  (method (delay-hide-interface self hide-interface?)
    (when auto-hide?
      (let ((hide-time (+ (current-seconds) 2.)))
        (empty hide-ring)
        (when hide-interface?
          (insert hide-ring hide-time (lambda ()
                                        (with-task-mutex
                                          (lambda ()
                                            (when (and (eq? stage 'circle)
                                                       auto-hide?
                                                       buttons-shown?)
                                              (let ((window (current-window))
                                                    (interface (current-interface))
                                                    (video (current-video)))
                                                @wait-later-version-as-it-needs-debugging
                                                (hide-cursor window)
                                                (set-visible? (child interface 'profile) #f)
                                                (set-visible? (child root 'circle-name) #f)
                                                (set-visible? (child root 'toggle-people) #f)
                                                (set-visible? (child root 'toggle-chat) #f)
                                                (set-visible? (child root 'leave) #f)
                                                (set-visible? (child root 'audio) #f)
                                                (set-visible? (child root 'video) #f)
                                                (set-visible? (child root 'layouts) #f)
                                                (set-video-interface? #f)
                                                (invalidate-outputs video)
                                                (set! buttons-shown? #f)))))))))))
  
  
  (method (show/hide-debug self h v)
    (let ((interface (current-interface)))
      (let ((toolbar (child interface 'debug)))
        (let ((pos (new Point h v)))
          (let ((in? (in-rect? pos (get-rect toolbar))))
            (set-visible? toolbar in?))))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-people self evt)
    (let ((interface (current-interface)))
      (when (neq? stage 'gathering)
        (toggle-visible? (child interface 'people-label))
        (toggle-visible? (child interface 'people))
        (set-visible? (child interface 'streams-label) #f)
        (set-visible? (child interface 'streams) #f)
        (update-buttons self))))
  
  
  (method (on-toggle-streams self evt)
    (let ((interface (current-interface)))
      (when (eq? stage 'circle)
        (set-visible? (child interface 'people-label) #f)
        (set-visible? (child interface 'people) #f)
        (toggle-visible? (child interface 'streams-label))
        (toggle-visible? (child interface 'streams))
        (when (get-visible? (child interface 'streams))
          (view-streams self)))))
  
  
  (method (on-toggle-chat self evt)
    (let ((interface (current-interface)))
      (when (neq? stage 'gathering)
        (toggle-visible? (child interface 'chat-label))
        (toggle-visible? (child interface 'chat))
        (toggle-visible? (child interface 'command-to))
        (toggle-visible? (child interface 'command))
        (update-buttons self))))
  
  
  (method (on-message self evt)
    (let ((interface (current-interface)))
      (show-chat self)
      (acquire-focus (locate (child interface 'command) 'text))))
  
  
  (method (update-buttons self)
    (let ((interface (current-interface)))
      (when (eq? stage 'circle)
        (set-title (child root 'toggle-people)
                   (if (get-visible? (child interface 'people))
                       "Hide People"
                     "Show People"))
        (set-title (child root 'toggle-chat)
                   (if (get-visible? (child interface 'chat))
                       "Hide Chat"
                     "Show Chat")))))
  
  
  (method (on-toggle-denoise self evt)
    (let ((world (current-world)))
      (when (eq? stage 'circle)
        (set-audio-denoise? (not (get-audio-denoise?)))
        (display-on/off world "Denoise" (get-audio-denoise?)))))
  
  
  (method (on-toggle-audio self evt)
    (let ((client (current-client)))
      (when (eq? stage 'circle)
        (require-live-stream client)
        (toggle-mic client)
        (update-audio self))))
  
  
  (method (update-audio self)
    (let ((client (current-client)))
      (set-title (child root 'audio)
                 (if (mic-playing? client)
                     "Stop Audio"
                   "Start Audio"))))
  
  
  (method (on-toggle-video self evt)
    (let ((client (current-client)))
      (when (eq? stage 'circle)
        (require-live-stream client)
        (toggle-camera client)
        (update-video self)
        (update-layouts (current-video)))))
  
  
  (method (update-video self)
    (let ((client (current-client)))
      (set-title (child root 'video)
                 (if (camera-playing? client)
                     "Stop Video"
                   "Start Video"))))
  
  
  (method (escape-press self)
    (if (or (is? (active-focus) Filter-View)
            (is? (active-focus) Filter-Text))
        #f
      (let ((frame (top-frame)))
        (if frame
            (close frame)
          (when (and (developer?) (eq? stage 'gathering))
            (delay-event
              (lambda ()
                (with-task-mutex
                  (lambda ()
                    (open-login-zone))))))))
      #t))
  
  
  (method override (enter-press self)
    (when (and (eq? stage 'gathering)
               (eq? (active-focus) (current-interface))
               selected-group
               (not selected-player))
      (join-circle self selected-group)))
  
  
  (method override (tab-press self)
    )
  
  
  (method package (on-join self evt)
    (join-circle self selected-group))
  
  
  (method (on-leave self evt)
    (leave-circle self))
  
  
  (method (on-create&join self evt)
    (create&join-circle self))
  
  
  (method override (name-return self)
    (create&join-circle self))
  
  
  (method (create&join-circle self)
    (let ((interface (current-interface))
          (tier (current-client))
          (world (current-world)))
      (let ((view (child root 'circle-view)))
        (let ((text (locate view 'text)))
          (let ((name (trim-whitespace (get-string-content text))))
            (unless (empty-string? name)
              (let ((exception (create-group tier name #f)))
                (if exception
                    (display-error world exception)
                  (clear-message world)
                  (set-string-content text "")
                  (content-changed view)
                  (join-circle self name)))))))))
  
  
  (method (join-circle self name)
    (let ((tier (current-client))
          (world (current-world))
          (zone (current-zone))
          (video (current-video)))
      (reset-chronology)
      (reset-evolution)
      (bind-camera)
      (let ((channels/exception (join-group tier name)))
        (if (string? channels/exception)
            (display-error world channels/exception)
          (let ((udp-client (get-udp-client tier)))
            (when auto-live?
              (require-live-stream tier))
            (for-each (lambda (info)
                        (bind (sender name stream-no origin source-kind video-level channels) info
                          (stream-add tier sender name stream-no origin source-kind video-level channels)))
                      channels/exception)
            (start udp-client))
          (when auto-live?
            (when auto-audio?
              (play-mic tier))
            (when auto-video?
              (play-camera tier)))
          (clear-message world)
          (uninstall-camera)
          (remove-skybox zone)
          (set! joined-circle name)
          (set! circle-start (current-seconds))
          (install-circle-hooks self)
          (goto-stage self 'circle)
          (update-layouts video)))))
  
  
  (method (leave-circle self)
    (let ((tier (current-client))
          (zone (current-zone)))
      (uninstall-circle-hooks self)
      (let ((udp-client (get-udp-client tier)))
        (stop udp-client)
        (close-live-stream tier)
        (close-send-streams udp-client)
        (close-receive-streams udp-client))
      (leave-group tier joined-circle)
      (circle-uninstall-camera)
      (circle-restore-fov)
      (install-camera)
      (install-skybox zone (find-skybox together-skybox))
      (set! draw-grid? #f)
      (set! joined-circle #f)
      (goto-stage self 'gathering)))
  
  
  (method (goto-stage self what)
    (uninstall-stage self)
    (set! stage what)
    (install-stage self))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  (method (on-back self evt)
    (goto-stage self 'gathering))
  
  
  ;;;
  ;;;; Hooks
  ;;;
  
  
  (method (install-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-server-entered-hook tier (~ server-entered self))
      (set-server-exited-hook tier (~ server-exited self))
      (set-hierarchy-update-hook tier (~ hierarchy-update self))
      (set-render-hook video (~ render-video self))
      (set-layout-circle-hook (~ layout-circle self))
      (set! draw-hook (~ draw-debug self))
      (register-draw-hook interface draw-hook)
      (set-matrix-hook (get-eye world) (~ eye-matrix self))
      (set-displayed-hook (child interface 'chat) (~ chat-displayed self))
      (set-sender-hook (child interface 'chat) (~ chat-sender self))
      (set-return-handler (child interface 'command) (~ command-return self))
      (set-escape-handler (child interface 'command) (~ command-escape self))
      (set-view-replay-directory (~ view-replay-directory self))))
  
  
  (method (uninstall-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-server-entered-hook tier #f)
      (set-server-exited-hook tier #f)
      (set-hierarchy-update-hook tier #f)
      (set-render-hook video #f)
      (set-layout-circle-hook #f)
      (unregister-draw-hook interface draw-hook)
      (set-matrix-hook (get-eye world) #f)
      (set-displayed-hook (child interface 'chat) #f)
      (set-sender-hook (child interface 'chat) #f)
      (set-return-handler (child interface 'command) #f)
      (set-escape-handler (child interface 'command) #f)
      (reset-view-replay-directory)))
  
  
  ;;;
  ;;;; Experiments
  ;;;
  
  
  (method (install-experiments self)
    (add-experiment
      (new Experiment
        "Toggle camera high resolution"
        (lambda (feedback)
          (camera-high-resolution-experiment self feedback)))))
  
  
  (method (camera-high-resolution-experiment self feedback)
    (if (neq? stage 'circle)
        (begin
          (bell)
          (feedback "Only available in circle"))
      (with-task-mutex
        (lambda ()
          (let ((client (current-client)))
            (camera-high-resolution? (not (camera-high-resolution?)))
            (when (camera-playing? client)
              (release-camera client)
              (play-camera client)))))
      (feedback (format "Camera high resolution {a}" (if (camera-high-resolution?) "on" "off"))))
    (sleep .5))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method (server-entered self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} entered" character-name))))
  
  
  (method (server-exited self character-name disconnected?)
    (let ((world (current-world)))
      (let ((message (if disconnected? "disconnected" "exited")))
        (display-message world (format "{a} {a}" character-name message)))))
  
  
  (method (hierarchy-update self hierarchy)
    (let ((tree (people-tree self)))
      (define (same-entity? x y)
        (define (entity info)
          (if (not info)
              info
            (bind (kind name) info
              (cons kind name))))
        
        (equal? (entity x)
                (entity y)))
      
      (with-preserved-selection tree
        (lambda ()
          (view-hierarchy self hierarchy))
        use: 'data
        test: same-entity?
        generate-event?: #t)
      (when (and auto-create
                 first-hierarchy?
                 (not (get-single-selection tree))
                 (> (get-visible-count tree) 3))
        (set-single-selection tree 3)
        (set! first-hierarchy? #f))))
  
  
  ;;;
  ;;;; Media
  ;;;
  
  
  (method (render-video self video)
    (if (eq? world.video:video-layout 'circle)
        #f
      (neq? stage 'circle)))
  
  
  (method (draw-debug self surface)
    (let ((client (current-client)))
      (let ((udp-client (get-udp-client client)))
        (define (media-quality kind)
          (let ((total 0.)
                (channels 0))
            (iterate-table (get-receive-channels udp-client)
              (lambda (key channel)
                (when (= (get-media-kind channel) kind)
                  (let ((mean (mean-average (get-process-average channel))))
                    (when mean
                      (increase! total mean)
                      (increase! channels))))))
            (if (= channels 0)
                "N/A"
              (format "{r precision: 1}% ({a})" (* 100. (/ total (cast <fl> channels))) (if (= kind udp-audio) 'audio 'video)))))
        
        (define (outgoing-dropped)
          (let ((dropped (get-outgoing-dropped (get-statistics udp-client))))
            (format "{a} (outgoing)" dropped)))
        
        (define (outgoing-drop)
          (let ((drop (get-outgoing-drop (get-statistics udp-client))))
            (if drop
                (format "{r precision: 1}% (outgoing)" drop)
              "N/A")))
        
        (define (incoming-dropped)
          (let ((dropped (get-incoming-dropped (get-statistics udp-client))))
            (format "{a} (incoming)" dropped)))
        
        (define (incoming-drop)
          (let ((drop (get-incoming-drop (get-statistics udp-client))))
            (if drop
                (format "{r precision: 1}% (incoming)" drop)
              "N/A")))
        
        (define (send-rate)
          (let ((rate (get-last-send-rate (get-statistics udp-client))))
            (if (and rate (/= rate -1.))
                (format "{r precision: 1}Mbps (upload)" (bytes->mbps rate))
              "N/A")))
        
        (define (receive-rate)
          (let ((rate (get-last-receive-rate (get-statistics udp-client))))
            (if (and rate (/= rate -1.))
                (format "{r precision: 1}Mbps (download)" (bytes->mbps rate))
              "N/A")))
        
        (define (present-chronology-duration)
          (let ((chronology (current-chronology)))
            (let ((duration (chronology-duration chronology)))
              (if (not duration)
                  "N/A"
                (format "{r precision: 1}s (chronology)" duration)))))
        
        (define (present-evolution-duration)
          (let ((evolution (current-evolution)))
            (let ((duration (evolution-duration evolution)))
              (if (not duration)
                  "N/A"
                (format "{r precision: 1}s (evolution)" duration)))))
        
        (define (count-nacks kind)
          (let ((total 0)
                (channels 0))
            (iterate-table (get-receive-channels udp-client)
              (lambda (key channel)
                (when (= (get-media-kind channel) kind)
                  (let ((len (count-missing channel)))
                    (increase! total len)
                    (increase! channels)))))
            (if (= channels 0)
                "N/A"
              (format "{a}" (fxround (/ (cast <fl> total) (cast <fl> channels)))))))
        
        (define (draw rank text color)
          (let ((h 20)
                (v (+ 80 (* rank 28))))
            (draw-text surface h v text color)))
        
        (when (eq? stage 'circle)
          (when show-debug?
            (set-font surface {Font font-name: tahoma point-size: 18 hint-style: slight hint-metrics: on})
            (draw 0 (format "{a}s" (fxround (- (current-seconds) circle-start))) {Color World-Ochre})
            (draw 1 (format "Quality: {a} {a}" (media-quality udp-audio) (media-quality udp-video)) {Color World-Red})
            (draw 2 (format "Drop: {a} {a}" (if show-dropped? (outgoing-dropped) (outgoing-drop)) (if show-dropped? (incoming-dropped) (incoming-drop))) {Color World-Red})
            (draw 3 (format "Traffic: {a} {a}" (send-rate) (receive-rate)) {Color World-Red})
            @comment (draw 4 (format "Nack: {a} {a}" (count-nacks udp-audio) (count-nacks udp-video)) {Color World-Red})
            (draw 4 (format "Replay: {a} {a}" (present-chronology-duration) (present-evolution-duration)) {Color World-Red}))))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method (eye-matrix self camera stable?)
    (when (eq? stage 'circle)
      (update-interface-matrices (current-video))
      @wait
      (let ((position (get-position camera))
            (sight (get-sight camera)))
        (updating-3d-audio position sight
          (lambda ()
            (let ((udp-client (get-udp-client (current-client))))
              (iterate-table (get-receive-streams udp-client)
                (lambda (stream-no stream)
                  (let ((audio-channel (locate-stream-audio-channel stream)))
                    (when audio-channel
                      (let ((video-channel (locate-stream-video-channel stream)))
                        (when video-channel
                          (let ((audio-output (find-output (current-audio) (get-no audio-channel)))
                                (video-output (find-output (current-video) (get-no video-channel))))
                            (when (and audio-output video-output)
                              (when (is? video-output Circle-Video-Sink)
                                (let ((position (matrix-translation (get-matrix (get-pane video-output)))))
                                  (update-3d-output audio-output position)))))))))))))))))
  
  
  ;;;
  ;;;; People
  ;;;
  
  
  (method (people-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'people) '(people people))))
  
  
  (method (view-people self)
    (let ((tier (current-tier)))
      (view-hierarchy self (list-hierarchy tier))))
  
  
  (method (view-hierarchy self hierarchy)
    (let ((tier (current-tier))
          (me (current-me)))
      (let ((tree (people-tree self)))
        (remove-every-row tree)
        (with-update-locked tree
          (lambda ()
            (define (add-player father info group)
              (bind (player id no asleep?) info
                (let ((title (if asleep? (format "{a} (offline)" player) player))
                      (font {Font Label-User})
                      (color (if asleep? {Color Medium-Gray} {Color World-Blue})))
                  (add-row tree
                           father: father
                           children: (list (new Tree-Node title: title font: font color: color))
                           user-data: (list 'player player group)))))
            
            (bind (gathering . groups) hierarchy
              (let ((players (cdr gathering)))
                (let ((row (add-row tree
                                    state: 'expanded
                                    children: (list (new Tree-Node
                                                      title: "The gathering"
                                                      font: {Font Label-User}
                                                      color: {Color red: 32 green: 205 blue: 33})))))
                  (for-each (lambda (info)
                              (add-player row info #f))
                            (let ((me (get-name me)))
                              (sort di<? players key: (lambda (player)
                                                        (if (equal? player me)
                                                            (cons 0 player)
                                                          (cons 1 player))))))))
              (when (not-null? hierarchy)
                (add-row tree
                         children: (list (new Tree-Node title: "" font: {Font Label-User})))
                (for-each (lambda (info)
                            (bind (group . players) info
                              (let ((row (add-row tree
                                                  state: 'expanded
                                                  children: (list (new Tree-Node title: group font: {Font Label-User} color: {Color World-Red}))
                                                  user-data: (list 'group group))))
                                (for-each (lambda (info)
                                            (add-player row info group))
                                          players))))
                          (sort di<? groups key: car)))))))))
  
  
  (method package (people-selection-change self)
    (let ((tree (people-tree self)))
      (let ((selected (or (get-single-selected-data tree) (list 'group #f))))
        (bind (kind . rest) selected
          (define (select group player)
            (set! selected-group group)
            (set! selected-player player)
            (when (eq? stage 'gathering)
              (update-circle/join self))
            (update-to self))
          
          (case kind
            ((player)
             (bind (player group) rest
               (select group player)))
            ((group)
             (bind (group) rest
               (select group #f))))))))
  
  
  (method package (people-double-click self)
    (people-action-selected self))
  
  
  (method package (people-return-press self)
    (people-action-selected self))
  
  
  (method (people-action-selected self)
    (when (eq? stage 'gathering)
      (when (and selected-group (not selected-player))
        (join-circle self selected-group))))
  
  
  (method package (focus-command-text self)
    @wait-buggy
    (let ((interface (current-interface)))
      (let ((text (locate (child interface 'command) 'text)))
        (when (view-visible? text)
          (acquire-focus text)))))
  
  
  ;;;
  ;;;; Streams
  ;;;
  
  
  (method (streams-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'streams) '(streams streams))))
  
  
  (method (view-streams self)
    (let ((tier (current-tier))
          (me (current-me)))
      (let ((udp-client (get-udp-client tier))
            (tree (streams-tree self)))
        (remove-every-row tree)
        (with-update-locked tree
          (lambda ()
            (let ((audio-extensions (streaming-audio-extensions))
                  (video-extensions (streaming-video-extensions)))
              (define (determine-kind files)
                (let ((count (length files)))
                  (cond ((and (= count 1)
                              (member? (get-extension (car files)) '("jpg" "jpeg") test: extension=?))
                         'image)
                        ((and (= count 1)
                              (member? (get-extension (car files)) '("txt") test: extension=?))
                         'text)
                        (else
                         (let ((audio? (some? (lambda (file)
                                                (member? (get-extension file) audio-extensions test: extension=?))
                                              files))
                               (video? (some? (lambda (file)
                                                (member? (get-extension file) video-extensions test: extension=?))
                                              files)))
                           (cond ((and audio? video?)
                                  'video)
                                 (audio?
                                  'audio)
                                 (video?
                                  'video)
                                 (else
                                  #f)))))))
              
              (define (iterate dir (father #f))
                (let ((files (collect-files dir
                               (lambda (file)
                                 (not (member? (get-name file) '(".DS_Store") test: filename=?))))))
                  (for-each (lambda (partition)
                              (bind (base . files) partition
                                (let ((kind (determine-kind files)))
                                  (when kind
                                    (let ((location (and kind (filename-spine (join (subpath {Directory Documents} (car files)) "/")))))
                                      ;; quick hack
                                      (when (eq? kind 'image)
                                        (set! location (string-append location ".jpg")))
                                      (let ((streaming (find-streaming udp-client location)))
                                        (let ((title (streaming-title self streaming base))
                                              (color (streaming-color self streaming)))
                                          (add-row tree
                                                   father: father
                                                   children: (list (new Tree-Node title: title font: {Font Label-User} color: color))
                                                   user-data: (and kind (list kind base location))))))))))
                            (partition files key: get-base test: filename=?)))
                (iterate-directory dir
                  (lambda (subdir)
                    (let ((name (get-name subdir)))
                      (let ((father (add-row tree
                                             father: father
                                             state: 'expanded
                                             children: (list (new Tree-Node title: name font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                        (iterate subdir father))))
                  files?: #f
                  directories?: #t
                  recursive?: #f))
              
              (iterate-stream-directories iterate)))))))
  
  
  (method (streaming-title self streaming base)
    (if streaming
        (format "{a} (playing)" base)
      (format "{a}" base)))
  
  
  (method (streaming-color self streaming)
    (if streaming
        {Color World-Blue}
      {Color White}))
  
  
  (method package (streams-action self)
    (streams-action-selected self))
  
  
  (method (streams-action-selected self)
    (let ((tier (current-tier)))
      (when (eq? stage 'circle)
        (let ((udp-client (get-udp-client tier))
              (tree (streams-tree self)))
          (let ((row (get-selected-row tree)))
            (when row
              (let ((data (get-user-data row)))
                (when data
                  (bind (kind base location) data
                    (define (update-cell streaming)
                      (let ((title (streaming-title self streaming base))
                            (color (streaming-color self streaming))
                            (line (row->line tree row))
                            (col 0))
                        (let ((cell (new Cell line col)))
                          (let ((data (get-cell-data tree cell)))
                            (set-title data title)
                            (set-color data color))
                          (invalidate-cell tree cell))))
                    
                    (let ((streaming (find-streaming udp-client location)))
                      (if streaming
                          (begin
                            (close-send-stream udp-client streaming)
                            (update-cell #f))
                        (case kind
                          ((text)
                           (let ((name (filename-name location)))
                             (let ((stream (stream-text location name)))
                               (update-cell stream)
                               (delay-streaming
                                 (lambda ()
                                   (play stream))))))
                          ((image)
                           (let ((name (filename-name location)))
                             (let ((stream (stream-image location name)))
                               (update-cell stream)
                               (delay-streaming
                                 (lambda ()
                                   (play stream))))))
                          ((audio)
                           (let ((name (filename-name location)))
                             (let ((stream (stream-video location name audio?: (not (streaming-audio?)))))
                               (update-cell stream)
                               (delay-streaming
                                 (lambda ()
                                   (play stream))))))
                          ((video)
                           (let ((name (filename-name location))
                                 (audio-file? (exists? (new-file {Directory Documents} (add-extension location (audio-profile-extension))))))
                             (let ((stream (stream-video location name audio?: (and audio-file? (not (streaming-audio?)) (not stream-silent?)))))
                               (update-cell stream)
                               (delay-streaming
                                 (lambda ()
                                   (play stream))))))))))))))))))
  
  
  ;;;
  ;;;; Experiment
  ;;;
  
  
  (method (experiment-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'experiment) 'experiment)))
  
  
  (method (experiment-text self)
    (let ((interface (current-interface)))
      (locate (child interface 'experiment) '(console text))))
  
  
  (method (view-experiment self)
    (let ((tree (experiment-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (for-each (lambda (experiment)
                      (let ((title (experiment-title self experiment))
                            (color (experiment-color self experiment)))
                        (add-row tree
                                 children: (list (new Tree-Node title: title font: {Font Label-User} color: color))
                                 user-data: experiment)))
                    experiments)))))
  
  
  (method (experiment-title self experiment)
    (get-title experiment))
  
  
  (method (experiment-color self experiment)
    (if (get-running? experiment)
        {Color World-Blue}
      {Color White}))
  
  
  (method package (experiment-action self)
    (experiment-action-selected self))
  
  
  (method (experiment-action-selected self)
    (let ((tree (experiment-tree self))
          (text (experiment-text self)))
      (let ((row (get-selected-row tree)))
        (when row
          (let ((experiment (get-user-data row)))
            (define (update-cell)
              (let ((title (experiment-title self experiment))
                    (color (experiment-color self experiment))
                    (line (row->line tree row))
                    (col 0))
                (let ((cell (new Cell line col)))
                  (let ((data (get-cell-data tree cell)))
                    (set-title data title)
                    (set-color data color))
                  (invalidate-cell tree cell))))
            
            (when experiment
              (let ((action (get-action experiment)))
                (define (feedback message)
                  (with-task-mutex
                    (lambda ()
                      (let ((end (text-ending text)))
                        (let ((range (new Range$Cell$ end end)))
                          (replace (get-model text) range (list message ""))
                          (ensure-range-displayed text range))))))
                
                (empty-text text)
                (delay-event
                  (lambda ()
                    (set-running? experiment #t)
                    (update-cell)
                    (action feedback)
                    (set-running? experiment #f)
                    (update-cell))))))))))
  
  
  ;;;
  ;;;; Chat
  ;;;
  
  
  (method (chat-displayed self chat)
    (show-chat self)
    #f)
  
  
  (method (chat-sender self sender)
    (let ((interface (current-interface)))
      (let ((to (child interface '(command-to to))))
        (cond ((not sender)
               (set-title to "The gathering")
               (set-color to {Color red: 32 green: 205 blue: 33})
               (set! message-recipient #f))
              (else
               (set-title to sender)
               (set-color to {Color World-Blue})
               (set! message-recipient (list 'player sender))))
        (focus-command-text self))))
  
  
  (method (show-chat self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'chat-label) #t)
      (set-visible? (child interface 'chat) #t)
      (set-visible? (child interface 'command-to) #t)
      (set-visible? (child interface 'command) #t)
      (update-buttons self)))
  
  
  (method (command-return self command)
    (define (parse-content content)
      (if (not (developer?))
          (selected-recipient content)
        (cond ((starts-with? content "/s ")
               (values 'server #f (substring content 3 (string-length content))))
              ((starts-with? content "/g ")
               (values 'group (group-recipient) (substring content 3 (string-length content))))
              ((starts-with? content "/w ")
               (let ((str (substring content 3 (string-length content))))
                 (let ((pos (find str #\space)))
                   (if (not pos)
                       (values 'whisper (get-name (current-me)) str)
                     (let ((recipient (substring str 0 pos))
                           (message (substring str (+ pos 1) (string-length str))))
                       (show-panel-whisper recipient message)
                       (values 'whisper recipient message))))))
              ((starts-with? content "/r ")
               (let ((last-whisperer (get-last-whisperer (current-world)))
                     (message (substring content 3 (string-length content))))
                 (if (not last-whisperer)
                     (values 'group (group-recipient) message)
                   (show-panel-whisper last-whisperer message)
                   (values 'whisper last-whisperer message))))
              (else
               (selected-recipient content)))))
    
    (define (group-recipient)
      (if (eq? stage 'circle)
          joined-circle
        #f))
    
    (define (selected-recipient message)
      (if (not message-recipient)
          (begin
            (when joined-circle
              (show-panel-say "The gathering" message))
            (values 'group #f message))
        (bind (what name) message-recipient
          (case what
            ((player)
             (show-panel-whisper name message)
             (values 'whisper name message))
            (else
             (values 'group name message))))))
    
    (define (show-panel-say recipient message)
      (let ((interface (current-interface)))
        (let ((panel (child interface 'chat))
              (sender #f))
          (show-say panel recipient message sender))))
    
    (define (show-panel-whisper recipient message)
      (let ((interface (current-interface)))
        (let ((panel (child interface 'chat))
              (sender recipient))
          (show-whisper panel recipient message sender))))
    
    (let ((world (current-world))
          (tier (current-client)))
      (let ((text (locate command 'text)))
        (let ((content (get-string-content text)))
          (unless (whitespace? content)
            (receive (kind recipient message) (parse-content content)
              (client-message tier kind recipient message)
              (set-string-content text "")))))))
  
  
  (method (command-escape self command)
    )
  
  
  ;;;
  ;;;; Layouts
  ;;;


  (method (on-cycle-layouts self evt)
    (let ((world (current-world))
          (video (current-video)))
      (when (eq? stage 'circle)
        (goto-layout video (cycle-element '(circle focus gallery) video-layout reversed?: (get-shift? evt)))
        (when (eq? video-layout 'focus)
          (goto-focused self))
        (show-interface self #t)
        (update-layouts self)
        (display-message world (capitalize (symbol->string video-layout))))))
  
  
  (method (goto-focused self)
    (let ((video (current-video)))
      (let ((focused-output (effective-focused-output video)))
        (when focused-output
          (circle-goto-focus focused-output)))))
  
  
  (method (update-layouts self)
    (let ((interface (current-interface)))
      (set-title (child root 'layouts)
                 (case video-layout
                   ((circle) "Focus")
                   ((focus) "Gallery")
                   ((gallery) "Circle")))))
  
  
  ;;;
  ;;;; Circle
  ;;;
  
  
  (method (install-circle-hooks self)
    (let ((tier (current-tier)))
      (set-stream-add-hook tier (~ stream-add self))
      (set-stream-remove-hook tier (~ stream-remove self))))
  
  
  (method (uninstall-circle-hooks self)
    (let ((tier (current-tier)))
      (set-stream-add-hook tier #f)
      (set-stream-remove-hook tier #f)))
  
  
  (method (stream-add self stream)
    (let ((world (current-world)))
      (when (eq? (get-source-kind stream) 'live)
        (display-message world (format "{a} joined" (get-sender stream))))))
  
  
  (method (stream-remove self stream)
    (let ((world (current-world)))
      (when (eq? (get-source-kind stream) 'live)
        (display-message world (format "{a} left" (get-sender stream))))))
  
  
  (method (layout-circle self ordered-outputs)
    (let ((count (length ordered-outputs)))
      (when bound-camera?
        (circle-update-camera count))
      (when (and (eq? stage 'circle)
                 (eq? video-layout 'focus))
        (goto-focused self)
        (show-interface self #t))
      (circle-placements count)))
  
  
  (method package (shortcut-press-circle self shortcut)
    (define (focus-no no)
      (when (developer?)
        (let ((video (current-video)))
          ;; useful to compare profiles
          (define (find-by-level level)
            (find-if (lambda (output)
                       (eqv? (get-level output) level))
                     (get-ordered-outputs video)))
          
          (define (find-nth rank)
            (let ((outputs (get-ordered-outputs video)))
              (and (< rank (length outputs))
                   (element outputs rank))))
          
          (let ((output (find-nth (- no 1))))
            (when output
              (change-focused-output video output))))))
    
    (if (or (not (world-focused?))
            (neq? stage 'circle))
        #f
      (let ((count (video-count)))
        (nucase shortcut
          (({Shortcut Left})
           (when (> count circle-max-fixed)
             (circle-left-rotation)
             (circle-install-camera))
           #t)
          (({Shortcut Right})
           (when (> count circle-max-fixed)
             (circle-right-rotation)
             (circle-install-camera))
           #t)
          (({Shortcut Up})
           (when (> count circle-max-fixed)
             (circle-increase-speed))
           #t)
          (({Shortcut Down})
           (when (> count circle-max-fixed)
             (circle-decrease-speed))
           #t)
          (({Shortcut Space})
           (when (> count circle-max-fixed)
             (circle-toggle-camera))
           #t)
          (({Shortcut Return})
           (circle-uninstall-camera)
           (circle-update-camera count)
           (bind-camera)
           (unbind-output))
          (({Shortcut #\1})
            (focus-no 1))
          (({Shortcut #\2})
           (focus-no 2))
          (({Shortcut #\3})
            (focus-no 3))
          (({Shortcut #\4})
           (focus-no 4))
          (({Shortcut #\5})
           (focus-no 5))
          (else
           #f)))))

  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (on-toggle-hide self evt)
    (when (eq? stage 'circle)
      (let ((world (current-world)))
        (set! auto-hide? (not auto-hide?))
        (if auto-hide?
            (begin
              (install-hider self)
              (show-interface self #t))
          (show-interface self #f))
        (display-on/off world "Auto hide" auto-hide?))))
  
  
  (method (on-toggle-debug self evt)
    (when (eq? stage 'circle)
      (set-show-debug? (not show-debug?))
      (set-always-refresh-interface? show-debug?)
      (invalidate-interface)))
  
  
  (method (on-toggle-debug-media self evt)
    (when (eq? stage 'circle)
      (let ((video (current-video)))
        (set-debug-media? (not debug-media?))
        (invalidate-outputs video)
        (when debug-media?
          (show-interface self #t)))))
  
  
  (method (on-toggle-admin self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (if (and (get-visible? panel)
                   (eq? (active-focus) text))
              (begin
                (hide-admin self)
                ;; should not be necessary
                (focus-world))
            (show-admin self)
            (acquire-focus text))))))
  
  
  (method (show-admin self)
    (let ((interface (current-interface)))
      (when (developer?)
        (set-visible? (child interface 'admin-label) #t)
        (set-visible? (child interface 'admin) #t))
      (when (eq? stage 'gathering)
        (set-visible? (child root 'join) #f)
        (set-visible? (child root 'circle) #f))
      (layout-view interface)))
  
  
  (method (hide-admin self)
    (let ((interface (current-interface)))
      (when (developer?)
        (set-visible? (child interface 'admin-label) #f)
        (set-visible? (child interface 'admin) #f))
      (when (eq? stage 'gathering)
        (set-visible? (child root 'join) #t)
        (set-visible? (child root 'circle) #t))))
  
  
  (method (on-toggle-script self evt)
    (toggle-script self))
  
  
  (method (on-toggle-grid self evt)
    (when (eq? stage 'circle)
      (set! draw-grid? (not draw-grid?))))
  
  
  (method (on-toggle-timeline self evt)
    (let ((interface (current-interface))
          (world (current-world))
          (client (current-client)))
      (toggle-timeline world)
      (let ((panel (child interface 'timeline)))
        (when (get-visible? panel)
          (set-span panel 30.)
          (set-events-mode panel 'all)
          (let ((udp-client (get-udp-client client)))
            (let ((channels (table-keys (get-receive-channels udp-client))))
              ;; channelgazoum
              (let ((audio-channels (collect-if (lambda (channel) (and (pair? channel) (= (cdr channel) udp-audio))) channels)))
                (when (not-null? audio-channels)
                  (bind (origin) (car audio-channels)
                    (set-origin panel origin)
                    (invalidate-view panel))))))))))
  
  
  (method (on-toggle-visualizer self evt)
    (if (eq? stage 'replay)
        (let ((interface (current-interface)))
          (let ((root (child interface 'replay)))
            (let ((visualizer (child root 'visualizer)))
              (set-visible? visualizer (not (get-visible? visualizer)))
              (together-visualizer-panel-layouter visualizer)
              (together-timeline-panel-layouter (child root 'timeline))
              (together-evolution-panel-layouter (child root 'evolution))
              (layout-view root)
              (layout-view interface)
              (invalidate-interface))))
      (bell)))
  
  
  (method (on-goto-gathering self evt)
    (case stage
      ((gathering))
      ((circle)
       (leave-circle self))
      (else
       (goto-stage self 'gathering))))
  
  
  (method (on-goto-script self evt)
    (case stage
      ((script))
      ((circle)
       (bell))
      (else
       (goto-script/last self))))
  
  
  (method (toggle-script self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((toplevel (current-toplevel))
            (panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (if (get-visible? panel)
              (begin
                (save-script manager)
                (set-visible? panel #f)
                (set-caption toplevel #f)
                (focus-world))
            (call-setup-catalogs)
            (let ((text (locate manager '(script text))))
              (if edited-entity
                  (begin
                    (recolorize-syntax text)
                    (edited-update manager))
                (let ((script (find-script world (world-setting 'together.edited-script "test/replay"))))
                  (when script
                    (let ((entity (register-asset-script script)))
                      (set-edited-entity entity)
                      (set-edited manager entity)
                      (set-moniker text (get-file script))))))
              (acquire-focus text))
            (set-visible? panel #t))))))
  
  
  (method (script-visible? self)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (get-visible? panel))))
  
  
  (method (goto-script/last self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (let ((text (locate manager '(script text))))
            (when (not edited-entity)
              (let ((script (find-script world (world-setting 'together.edited-script "test/replay"))))
                (when script
                  (call-setup-catalogs)
                  (let ((entity (register-asset-script script)))
                    (set-edited-entity entity)
                    (set-edited manager entity)
                    (set-moniker text (get-file script))))))
            (goto-script self)
            (acquire-focus text))))))
  
  
  (method (goto-script self)
    (goto-stage self 'script))
  
  
  (method (on-goto-replay self evt)
    (case stage
      ((replay))
      ((circle)
       (view-last-replay self))
      (else
       (goto-replay/last self))))
  
  
  (method (view-last-replay self)
    (let ((last-replay (world-setting 'world.last-replay #f)))
      (if last-replay
          (bind (name from to now) last-replay
            (let ((dir (new-directory {Directory Documents "replays"} name)))
              (if (exists? dir)
                  (view-replay-directory self dir from to now)
                (bell))))
        (bell))))
  
  
  (method (goto-replay/last self)
    (let ((interface (current-interface)))
      (if (get-replay (child interface 'replay))
          (goto-replay self)
        (let ((last-replay (world-setting 'world.last-replay #f)))
          (if last-replay
              (bind (name from to now) last-replay
                (let ((dir (new-directory {Directory Documents "replays"} name)))
                  (if (exists? dir)
                      (view-replay-directory self dir from to now)
                    (goto-replay self))))
            (goto-replay self))))))
  
  
  (method (goto-replay self)
    (goto-stage self 'replay))
  
  
  (method (view-replay-directory self dir (from #f) (to #f) (now #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (receive (names metadatas chronologies evolutions channels audios videos) (collect-replays dir)
        (define (determine-tier character-name)
          (or (table-find names character-name test: equal?)
              (car (table-keys names))))
        
        (define (determine-base-time)
          (metadata-base-time (table-ref metadatas server-no)))
        
        (let ((character-name (get-character-name (current-client))))
          (let ((tier (determine-tier character-name)))
            (let ((base-time (determine-base-time))
                  (title (get-name dir)))
              (let ((replay (new Replay title dir tier names metadatas chronologies evolutions channels audios videos base-time)))
                (view-replay self replay from to now)
                (set-setting options-settings 'world.last-replay (list (get-name dir) (get-from replay) (get-to replay) (get-now replay)))
                (save-content options-settings))))))))
  
  
  (method protected (view-replay self replay (from #f) (to #f) (now #f))
    (let ((title (get-title replay))
          (tier (get-tier replay))
          (names (get-names replay))
          (metadatas (get-metadatas replay))
          (chronologies (get-chronologies replay))
          (evolutions (get-evolutions replay))
          (channels (get-channels replay))
          (base-time (get-base-time replay)))
      (let ((sites (metadata-sites (table-ref metadatas tier)))
            (chronology (table-ref chronologies tier))
            (evolution (table-ref evolutions tier)))
        (define (setup-replay-panel panel)
          (set-replay panel replay))
        
        (define (setup-visualizer-panel panel)
          (set-replay panel replay)
          (set-tier panel tier)
          (setup-visualizer panel)
          (invalidate-view panel))
        
        (define (setup-timeline-panel panel)
          (set-tier panel (table-ref names tier))
          (set-title panel title)
          (set-highlighted-values panel '())
          (setup-sites panel sites)
          (set-chronology panel chronology)
          (set-evolution panel evolution)
          (set-evolutions panel evolutions)
          (reset-start/end panel)
          (setup-replay panel base-time)
          (when (and from to)
            (set-bounds panel from to)
            (update-span panel))
          (when now
            (set-now panel now))
          (set-from replay from)
          (set-to replay to)
          (set-now replay now))
        
        (define (setup-evolution-panel panel)
          (set-names panel names)
          (set-channels panel channels)
          (set-evolutions panel evolutions)
          (set-base-time panel base-time))
        
        (if (eq? stage 'circle)
            (let ((world (current-world))
                  (udp (current-udp)))
              (define (stream-replay name)
                (let ((channels (list (make-replay-channel))))
                  (make-stream "Replay" 'replay #f channels)))
              
              (define (make-replay-channel)
                (let ((media-kind udp-video)
                      (source-kind 'replay)
                      (level #f)
                      (resolution draw-resolution)
                      (framerate #f)
                      (bitrate draw-bitrate)
                      (codec #f)
                      (caps #f))
                  (new Channel-Creator
                    (list media-kind source-kind level resolution framerate bitrate codec caps)
                    (lambda (stream-no channel-no)
                      (let ((client (current-client)))
                        (let ((channel (register-send-channel (get-udp-client client) stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps)))
                          (channel-output (current-video) channel root-view: (make-replay-view))
                          (let ((src (new Video-Src))
                                (sink (new Stream-Consumer
                                        consumer: (client-video-consumer client channel-no local?: stream-local?))))
                            (let ((pipeline (pipeline (list src sink))))
                              (set-pipeline channel pipeline)))))))))
              
              (define (make-replay-view)
                (let ((root (new Together-Replay-Panel position: {Point 0 0} size: {Dimension 1280 720} in-circle?: #t)))
                  (let ((visualizer (new Together-Visualizer-Panel parent: root name: 'visualizer position: {Point 64  20} size: {Dimension 1152 150}))
                        (timeline   (new Together-Timeline-Panel   parent: root name: 'timeline   position: {Point 64 168} size: {Dimension 1152 220}))
                        (evolution  (new Together-Evolution-Panel  parent: root name: 'evolution  position: {Point 64 387} size: {Dimension 1152 333})))
                    ;(set-background root {Color red: 30 green: 30 blue: 30 alpha: .7})
                    ;(set-border-sides (child visualizer 'border) 'bottom)
                    ;(set-border-color timeline #f)
                    ;(set-border-sides (child evolution 'border) 'top)
                    (setup-replay-panel root)
                    (setup-visualizer-panel visualizer)
                    (setup-timeline-panel timeline)
                    (setup-evolution-panel evolution)
                    (display-evolutions root now)
                    root)))
              
              (hide-admin self)
              (play (stream-replay "Replay")))
        (hide-admin self)
        (goto-replay self)
        (setup-replay-panel root)
        (setup-visualizer-panel (child root 'visualizer))
        (setup-timeline-panel (child root 'timeline))
        (setup-evolution-panel (child root 'evolution))
        (display-evolutions root now)))))
  
  
  (method (on-profile-network self evt)
    (when (eq? stage 'gathering)
      (if running-profile
          (cancel-profile)
        (profile-network))))
  
  
  (method (on-profile-heartbeat self evt)
    (when (eq? stage 'gathering)
      (if running-profile
          (cancel-profile)
        (profile-heartbeat))))
  
  
  (method (on-request-replays self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (show-admin self)
          (acquire-focus text)
          (insert-string text "request all replay")
          (console-return text
            (lambda ()
              (console-evaluate text)))))))
  
  
  (method (on-goto-simulate self evt)
    (case stage
      ((simulate))
      ((circle)
       (bell))
      (else
       (goto-simulate self))))
  
  
  (method (goto-simulate self)
    (goto-stage self 'simulate))
  
  
  (method (on-toggle-screen-share self evt)
    (toggle-screen-share self))
  
  
  (method (toggle-screen-share self)
    (let ((world (current-world))
          (udp (current-udp)))
      (define (locate-screen-stream)
        (locate-send-stream udp
          (lambda (stream)
            (eq? (get-source-kind stream) 'screen))))
      
      (when (eq? stage 'circle)
        (let ((stream (locate-screen-stream)))
          (cond ((not stream)
                 (play (stream-screen "Screen"))
                 (display-on/off world "Screen sharing" #t))
                (else
                 (close-send-stream udp stream)
                 (display-on/off world "Screen sharing" #f)))))))
  
  
  (method (on-toggle-key-bindings self evt)
    (let ((interface (current-interface)))
      (let ((viewer (find-component interface 'bindings)))
        (if viewer
            (close viewer)
           (open-frame (new Together-Bindings-Viewer name: 'bindings size: {Dimension 406 588} location: 'center))
           (focus-world)))))
  
  
  (method (on-toggle-mode self evt)
    (let ((world (current-world)))
      (set-video-mode
        (if (eq? video-mode 'fit)
            'fill
          'fit))
      (display-message world (case video-mode
                               ((fit) "Fit")
                               ((fill) "Fill")))))
  
  
  (method (on-toggle-experiment self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'experiment)))
        (if (get-visible? panel)
            (hide-experiment self)
          (show-experiment self)))))
  
  
  (method (show-experiment self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'experiment-label) #t)
      (set-visible? (child interface 'experiment) #t)
      (when (eq? stage 'gathering)
        (set-visible? (child root 'join) #f)
        (set-visible? (child root 'circle) #f))
      (view-experiment self)
      (layout-view interface)))
  
  
  (method (hide-experiment self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'experiment-label) #f)
      (set-visible? (child interface 'experiment) #f)
      (when (eq? stage 'gathering)
        (set-visible? (child root 'join) #t)
        (set-visible? (child root 'circle) #t))))
  
  
  (method (on-add-image self evt)
    (when (eq? stage 'circle)
      (add-image)))
  
  
  (method (on-add-video self evt)
    (when (eq? stage 'circle)
      (add-video)))
  
  
  (method (on-add-music self evt)
    (when (eq? stage 'circle)
      (add-music)))
  
  
  (method (on-remove-stream self evt)
    (when (eq? stage 'circle)
      (remove-random-stream)))
  
  
  (method (on-configure-settings self evt)
    )
  
  
  (method (on-edit-script1 self evt)
    (edit-script self (world-setting 'world.test1-script "test/test1")))
  
  
  (method (on-edit-script2 self evt)
    (edit-script self (world-setting 'world.test2-script "test/test2")))
  
  
  (method (on-edit-script3 self evt)
    (edit-script self (world-setting 'world.test3-script "test/test3")))
  
  
  (method (on-edit-script4 self evt)
    (edit-script self (world-setting 'world.test4-script "test/test4")))
  
  
  (method (on-edit-script5 self evt)
    (edit-script self (world-setting 'world.test5-script "test/test5")))
  
  
  (method (on-edit-script6 self evt)
    (edit-script self (world-setting 'world.test6-script "test/test6")))
  
  
  (method (on-edit-script7 self evt)
    (edit-script self (world-setting 'world.test7-script "test/test7")))
  
  
  (method (on-edit-script8 self evt)
    (edit-script self (world-setting 'world.test8-script "test/test8")))
  
  
  (method (on-edit-script9 self evt)
    (edit-script self (world-setting 'world.test9-script "test/test9")))
  
  
  (method (on-edit-script0 self evt)
    (edit-script self (world-setting 'world.test0-script "test/test0")))
  
  
  (method protected (edit-script self script/name (selection: selection #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (let ((text (locate manager '(script text))))
            (let ((script (if (is? script/name Asset)
                              script/name
                            (find-script world script/name))))
              (when script
                (save-script manager)
                (call-setup-catalogs)
                (let ((entity (register-asset-script script)))
                  (set-edited-entity entity)
                  (set-edited manager entity)
                  (set-moniker text (get-file script))
                  (when selection
                    (set-selection-safe text selection reposition: 'vertical ensure-displayed?: 'center-caret)))))
            (acquire-focus text)))
        (set-visible? panel #t)))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (open-login-zone)))


;;;
;;;; Profile-Label
;;;


(definition change-profile-reversed?
  #f)


(class Profile-Label extends Label-View
  
  
  (method override (mouse-up self evt)
    (let ((client (current-client)))
      (cond ((and change-profile-reversed? (eq? base-profile video-initial-profile))
             (set! change-profile-reversed? #f))
            ((and (not change-profile-reversed?) (eq? base-profile 'poor))
             (set! change-profile-reversed? #t)))
      (let ((profile-list (case video-initial-profile
                            ((high) '(high good medium low poor @RECOVERY recovery))
                            ((good) '(good medium low poor @RECOVERY recovery))
                            ((medium) '(medium low poor @RECOVERY recovery))
                            ((low) '(low poor @RECOVERY recovery))
                            ((poor) '(poor @RECOVERY recovery)))))
        (change-base-profile client (or (cycle-element profile-list base-profile cycle?: #f reversed?: change-profile-reversed?) base-profile))
        (update-profile self)))))


(definition protected (update-profile label)
  (define (update-label title color)
    (set-title label title)
    (set-color label color))
  
  (case base-profile
    ((high)     (update-label "High"     {Color Pastel-Purple}))
    ((good)     (update-label "Good"     {Color Pastel-Blue}))
    ((medium)   (update-label "Medium"   {Color Pastel-Green}))
    ((low)      (update-label "Low"      {Color Pastel-Yellow}))
    ((poor)     (update-label "Poor"     {Color Pastel-Orange}))
    ((recovery) (update-label "Recovery" {Color Pastel-Red}))))


;;;
;;;; People-Panel
;;;


(class People-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>   name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<People-View> name: people  location: center)))))


;;;
;;;; People-View
;;;


(class People-View extends Scroller-View
  
  
  (form
    (<install>                                 style: document hscroll?: #t vscroll?: #t
      (<content~>                              layout-type: fill
        (<Tree-Header>                         style: document shown?: #f
          (<content~>
            (<Tree-View>          name: people portfolio: :images filled-column: person always-select?: #t background: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
              (<Tree-Node-Column> name: person title: "Person" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-selection-change self evt)
    (let ((zone (current-zone)))
      (people-selection-change zone)
      (focus-command-text zone)))
  
  
  (method package (on-double-click self evt)
    (let ((zone (current-zone)))
      (people-double-click zone)))
  
  
  (method override (on-return-press self evt)
    (let ((zone (current-zone)))
      (people-return-press zone))))


;;;
;;;; Streams-Panel
;;;


(class Streams-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Streams-View> name: streams location: center)))))


;;;
;;;; Streams-View
;;;


(class Streams-View extends Scroller-View
  
  
  (form
    (<install>                                style: document hscroll?: #f vscroll?: #f
      (<content~>                             layout-type: fill
        (<Tree-Header>                        style: document shown?: #f
          (<content~>
            (<Streams-Tree>     name: streams portfolio: :images filled-column: stream background: #f action-handler: {Event-Handler :form on-action}
              (<Streams-Column> name: stream  title: "Stream" width: 235 toplevel-controls?: #f controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-action self evt)
    (let ((zone (current-zone)))
      (streams-action zone))))


;;;
;;;; Streams-Tree
;;;


(class Streams-Tree extends Tree-View)


;;;
;;;; Streams-Column
;;;


(class Streams-Column extends Tree-Node-Column
  
  
  (method override (draw-background self surface context row data width height)
    )
  
  
  (method override (cell-color self color context)
    color))


;;;
;;;; Bindings-Viewer
;;;


(class Together-Bindings-Viewer extends World-Bindings-Viewer
  
  
  (form
    (<install>
      (<caption~> title: "Keyboard Shortcuts"))))


;;;
;;;; Experiment
;;;


(definition protected experiments
  '())

(definition protected (add-experiment experiment)
  (set! experiments (append experiments (list experiment))))

(definition protected (remove-experiment experiment)
  (set! experiments (remove! experiment experiments)))


(class Experiment extends Object
  
  
  (slot title    getter generate)
  (slot action   getter generate)
  (slot running? accessors generate)
  
  
  (method override (initialize self title action)
    (nextmethod self)
    (set! self.title title)
    (set! self.action action)
    (set! self.running? #f))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" title)))))


;;;
;;;; Experiment-Panel
;;;


(class Experiment-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>                 name: content    location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Splitter-View>             name: splitter   separator: none orientation: vert mode: relative division: 40.
          (<Tree-Header>             name: header     location: first style: document shown?: #f
            (<content~>                               layout-type: fill
              (<Experiment-Tree>     name: experiment portfolio: :images filled-column: title background: #f action-handler: {Event-Handler :form on-action}
                (<Experiment-Column> name: title      title: "Experiment" toplevel-controls?: #f controls?: #f display-images?: #f display-levels?: #f))))
          (<Experiment-View>         name: console    location: second)))))
  
  
  (method override (draw self surface context)
    (let ((v (- (get-height (locate self 'header)) 1)))
      (set-color surface {Color Medium-Gray alpha: .7})
      (set-line-width surface 1)
      (move-to surface 1 v)
      (line-to surface (- (get-width self) 1) v)))
  
  
  (method package (on-action self evt)
    (let ((zone (current-zone)))
      (experiment-action zone))))


;;;
;;;; Experiment-Tree
;;;


(class Experiment-Tree extends Tree-View)


;;;
;;;; Experiment-Column
;;;


(class Experiment-Column extends Tree-Node-Column
  
  
  (method override (draw-background self surface context row data width height)
    )
  
  
  (method override (cell-color self color context)
    color))


;;;
;;;; Experiment-View
;;;


(class Experiment-View extends Scroller-View
  
  
  (form
    (<install>
      (<!>                      name: content
        (<Experiment-Text-View> name: text    background: #f)))))


;;;
;;;; Experiment-Text-View
;;;


(class Experiment-Text-View extends World-Text-View
  
  
  (form
    (<install> editable?: #f selectable?: #t))
  
  
  (method override (new-model self)
    (new Text-Model wrap?: #t left-padding: 2 top-padding: 1)))


;;;
;;;; Admin-Panel
;;;


(class Admin-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>  name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Admin-View> name: console location: center)))))


;;;
;;;; Admin-View
;;;


(class Admin-View extends Scroller-View
  
  
  (form
    (<install>
      (<!>                 name: content
        (<Admin-Text-View> name: text    background: #f))))))
