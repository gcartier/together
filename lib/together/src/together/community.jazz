;;;============
;;;  Together
;;;============
;;;
;;;; Community Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.community jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.console)
        (jazz.event)
        (jazz.exemplar)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.math)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.stream)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (time)
        (world)
        (world.asset)
        (world.audio)
        (world.autoload)
        (world.camera)
        (world.chronology)
        (world.circle)
        (world.client.text)
        (world.client.tier)
        (world.client.udp)
        (world.context)
        (world.evolution)
        (world.geometry)
        (world.interface)
        (world.interface.clients)
        (world.interface.command)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.evolution)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.script)
        (world.interface.sheet)
        (world.interface.text)
        (world.interface.tiers)
        (world.interface.timeline)
        (world.io)
        (world.manager)
        (world.pane)
        (world.profiling)
        (world.ring)
        (world.script.asset)
        (world.settings)
        (world.skybox)
        (world.sound)
        (world.streamer)
        (world.streaming)
        (world.task)
        (world.timeline)
        (world.udp)
        (world.video)
        (world.window)
        (together)
        (together.replay)
        (together.script)
        (together.settings)
        (together.simulator)
        (together.visualizer)
        (together.zone))


(definition guillaume?
  (world-setting 'together.guillaume? #f))


(definition auto-join?
  (world-setting 'together.auto-join? #f))

(definition auto-hide?
  (world-setting 'together.auto-hide? #t))

(definition auto-audio?
  (world-setting 'together.auto-audio? #t))

(definition auto-video?
  (world-setting 'together.auto-video? #t))

(definition auto-channel?
  (if (developer?)
      (world-setting 'together.auto-channel? #t)
    #t))

(definition hide-people?
  (world-setting 'together.hide-people? #t))

(definition hide-chat?
  (world-setting 'together.hide-chat? #t))


(definition show-debug?
  (world-setting 'together.show-debug? #f))


(class Community-Zone extends Together-Zone
  
  
  (slot configuration   initialize #f getter generate)
  (slot selected-group  initialize #f getter generate)
  (slot selected-player initialize #f getter generate)
  (slot joined-circle   initialize #f getter generate)
  (slot circle-start    initialize #f getter generate)
  (slot view-focused    initialize #f getter generate)
  (slot draw-hook       initialize #f getter generate)
  (slot hide-ring       initialize #f getter generate)
  (slot hide-thread     initialize #f getter generate)
  (slot screen-channel  initialize #f getter generate)
  (slot replay          initialize #f getter generate)
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (when (window?)
      (let ((world (current-world)))
        (setup-stage self)
        (setup-configuration self)
        (install-zone self)
        (install-stage self)
        (install-hooks self)
        (set-escape-hook world (~ escape-press self))
        (view-people self)
        (when guillaume?
          (let ((circle "Circle"))
            (create-group (current-tier) circle)
            (when auto-join?
              (join-circle self circle)))))))
  
  
  (method override (destroy self)
    (when (window?)
      (let ((world (current-world))
            (client (current-client)))
        (let ((udp-client (get-udp-client client)))
          (stop udp-client)
          (close-screen-channel self)
          (close-send-channels udp-client)
          (close-receive-channels udp-client))
        (release-mic client)
        (release-camera client)
        (uninstall-hooks self)
        (uninstall-stage self)
        (uninstall-zone self)
        (set! stage #f)
        (no-showcase world)
        (uninstall-camera)))
    (nextmethod self))
  
  
  (method (setup-stage self)
    (set! stage 'gathering))
  
  
  (method (setup-configuration self)
    (let ((file (together-file)))
      (set! configuration (instantiate (read-form file)))))
  
  
  (method override (show-me? self)
    (and sphere? (eq? stage 'circle)))
  
  
  (method override (mute-audio? self)
    (neq? stage 'circle))
  
  
  (method (install-zone self)
    (let ((interface (current-interface)))
      (let ((version (process-version (current-process)))
            (release (process-release (current-process)))
            (name (get-character-name configuration)))
        ;; common
        (new Kind-Label name: 'people-label parent: interface title: "People" location: '(10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (new People-Panel name: 'people parent: interface location: '(10 100) proportion: '(220 (bounds -300)) layout-type: 'border)
        (new Kind-Label name: 'chat-label parent: interface title: "Chat" location: '(-10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (let ((chat (child interface 'chat)))
          (set-border-type (child chat 'border) 'solid)
          (set-border-color (child chat 'border) {Color Dark-Gray})
          (set-location chat '(-10 100))
          (set-proportion chat '(220 (bounds -354))))
        (let ((to (new View name: 'command-to parent: interface size: {Dimension 220 40})))
          (new Kind-Label name: 'to parent: to title: "To" position: {Point 0 0} size: {Dimension 22 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'head)
          (new Kind-Label name: 'dest parent: to title: "The gathering" position: {Point 22 0} size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'head))
        (let ((command (child interface 'command)))
          (set-border-type (child command 'border) 'solid)
          (set-border-color (child command 'border) {Color Dark-Gray})
          (set-location command '(-10 -200))
          (set-size command (new Dimension 220 19)))
        (when (developer?)
          (new Kind-Label name: 'admin-label parent: interface title: "Admin" location: '(center 144) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
          (new Admin-Panel name: 'admin parent: interface location: '(center 180) proportion: '((bounds -500) (bounds -380)) layout-type: 'fill)
          (initial-banner (locate (child interface 'admin) '(console text)) (format "Together server v{a}" (present version))))
        (add-exception-view self)
        ;; gathering
        (let ((root (new Together-Root name: 'gathering parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Label-View name: 'together parent: root title: tier-title location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
          (new Name-Label name: 'name parent: root title: name location: '(-10 10) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
          (new Version-Label name: 'version parent: root title: (format "v{a}{a}" (present version) environment-suffix) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Version-Label name: 'release parent: root title: release location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Push-Button name: 'quit parent: root title: "Quit" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-quit self))
          (new Kind-Label name: 'circle parent: root title: "" location: '(center (center -40)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'center)
          (new Push-Button name: 'join parent: root title: "Join" enabled?: #f location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-join self))
          (new Toggle-Button name: 'about parent: root title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-about self))
          (new Kind-Label name: 'circle-label parent: root title: "New circle name" location: '(center -120) size: {Dimension 200 40} auto-size?: #t font: {Font Label-User point-size: 17.5 antialias: default} justification: 'tail)
          (new Name-View name: 'circle-view parent: root location: '(center -90) border-type: 'solid border-color: {Color Dark-Gray} action-view: 'circle-create)
          (new Push-Button name: 'circle-create parent: root title: "Create & Join" enabled?: #f location: '(center -30) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-create&join self)))
        ;; circle
        (let ((root (new Together-Root name: 'circle parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Kind-Label name: 'circle-name parent: root title: name location: '(-10 10) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
          (new Push-Button name: 'audio parent: root location: '(30 30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-audio self))
          (new Push-Button name: 'video parent: root location: '(190 30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-video self))
          (new Push-Button name: 'leave parent: root title: "Leave" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-leave self))
          (new Push-Button name: 'layouts parent: root location: '(180 -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-cycle-layouts self))
          (new Push-Button name: 'toggle-people parent: root location: '(-210 -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-people self))
          (new Push-Button name: 'toggle-chat parent: root location: '(-30 -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-toggle-chat self)))
        ;; script
        (let ((root (new Together-Root name: 'script-root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Push-Button name: 'back parent: root title: "Back" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-back self)))
        (let ((panel (child interface 'script)))
          (let ((border (locate panel 'border)))
            (set-border-type border 'solid)
            (set-border-color border {Color Dark-Gray})))
        ;; replay
        (let ((root (new Together-Root name: 'replay parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Together-Visualizer-Panel parent: root name: 'visualizer visible?: #t layouter: (lambda (panel) (together-visualizer-panel-layouter panel)))
          (new Together-Timeline-Panel parent: root name: 'timeline visible?: #t layouter: (lambda (panel) (together-timeline-panel-layouter panel)))
          (new Together-Evolution-Panel parent: root name: 'evolution visible?: #t layouter: (lambda (panel) (together-evolution-panel-layouter panel)))
          (new Push-Button name: 'back parent: root title: "Back" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-back self)))
        ;; simulate
        (let ((root (new Together-Root name: 'simulate parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
          (new Together-Simulator-Panel parent: root name: 'simulator visible?: #t layouter: (lambda (panel) (together-simulator-panel-layouter panel)))
          (new Push-Button name: 'back parent: root title: "Back" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-back self)))
        ;; hide all
        (for-each (lambda (child)
                    (set-visible? child #f))
                  (get-children interface)))))
  
  
  (method (install-stage self)
    (let ((interface (current-interface)))
      (case stage
        ((gathering)
         (install-gathering self))
        ((circle)
         (install-circle self))
        ((script)
         (install-script self))
        ((replay)
         (install-replay self))
        ((simulate)
         (install-simulate self)))
      (show root)
      (send-to-back root)
      (if (developer?)
          (unless (eq? (active-focus) (locate (child interface 'admin) '(console text)))
            (focus-world))
        (focus-world))))
  
  
  (method (install-gathering self)
    (let ((interface (current-interface))
          (world (current-world)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (define (title parent name str)
        (set-title (child parent name) str))
      
      (define (color parent name color)
        (set-color (child parent name) color))
      
      (define (location parent name loc)
        (set-location (child parent name) loc))
      
      (define (proportion parent name prop)
        (set-proportion (child parent name) prop))
      
      (set! root (child interface 'gathering))
      (show root 'together)
      (show root 'version)
      (show root 'release)
      (show root 'quit)
      (show root 'name)
      (when (developer?)
        (let ((admin-visible? (get-visible? (child interface 'admin))))
          (visible root 'circle (not admin-visible?))
          (visible root 'join (not admin-visible?))))
      (show root 'circle-label)
      (show root 'circle-view)
      (show root 'circle-create)
      (show interface 'people-label)
      (show interface 'people)
      (show interface 'chat-label)
      (show interface 'chat)
      (proportion interface 'chat '(220 (bounds -300)))
      (show interface 'command-to)
      (title interface '(command-to dest) "The gathering")
      (color interface '(command-to dest) {Color red: 32 green: 205 blue: 33})
      (location interface 'command-to '(-10 -158))
      (show interface 'command)
      (location interface 'command '(-10 -146))
      (show root 'about)
      (update-circle/join self)
      (layout-view interface)
      (layout-view root)
      (no-showcase world)))
  
  
  (method (install-circle self)
    (let ((interface (current-interface))
          (world (current-world)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (define (title parent name str)
        (set-title (child parent name) str))
      
      (define (color parent name color)
        (set-color (child parent name) color))
      
      (define (location parent name loc)
        (set-location (child parent name) loc))
      
      (define (proportion parent name prop)
        (set-proportion (child parent name) prop))
      
      (set! root (child interface 'circle))
      (show root 'circle-name)
      (title root 'circle-name joined-circle)
      (show root 'toggle-people)
      (show root 'toggle-chat)
      (show root 'leave)
      (show root 'audio)
      (show root 'video)
      (show root 'layouts)
      (visible interface 'people-label (not hide-people?))
      (visible interface 'people (not hide-people?))
      (proportion interface 'chat '(220 (bounds -354)))
      (title interface '(command-to dest) joined-circle)
      (color interface '(command-to dest) {Color World-Red})
      (location interface 'command-to '(-10 -212))
      (location interface 'command '(-10 -200))
      (visible interface 'chat-label (not hide-chat?))
      (visible interface 'chat (not hide-chat?))
      (visible interface 'command-to (not hide-chat?))
      (visible interface 'command (not hide-chat?))
      (layout-view interface)
      (layout-view root)
      (no-showcase world)
      (update-audio self)
      (update-video self)
      (update-layouts self)
      (update-buttons self)
      (when auto-hide?
        (install-hider self)
        (delay-hide-interface self))))
  
  
  (method (install-script self)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (set! root (child interface 'script-root))
      (show root 'back)
      (show interface 'script)
      (visible interface 'people-label #f)
      (visible interface 'people #f)
      (visible interface 'chat-label #f)
      (visible interface 'chat #f)
      (visible interface 'command-to #f)
      (visible interface 'command #f)
      (layout-view interface)
      (layout-view root)))
  
  
  (method (install-replay self)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (set! root (child interface 'replay))
      (show root 'visualizer)
      (show root 'timeline)
      (show root 'evolution)
      (show root 'back)
      (visible interface 'people-label #f)
      (visible interface 'people #f)
      (visible interface 'chat-label #f)
      (visible interface 'chat #f)
      (visible interface 'command-to #f)
      (visible interface 'command #f)
      (layout-view interface)
      (layout-view root)))
  
  
  (method (install-simulate self)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (visible parent name flag)
        (set-visible? (child parent name) flag))
      
      (set! root (child interface 'simulate))
      (show root 'simulator)
      (show root 'back)
      (visible interface 'people-label #f)
      (visible interface 'people #f)
      (visible interface 'chat-label #f)
      (visible interface 'chat #f)
      (visible interface 'command-to #f)
      (visible interface 'command #f)
      (layout-view interface)
      (layout-view root)))
  
  
  (method (uninstall-stage self)
    (let ((interface (current-interface)))
      (case stage
        ((circle)
         (when auto-hide?
           (uninstall-hider self)))
        ((script)
         (let ((panel (child interface 'script)))
           (let ((manager (locate panel 'manager)))
             (save-script manager))
           (hide panel))))
      (hide root)))
  
  
  (method (uninstall-zone self)
    (let ((interface (current-interface)))
      (close (child interface 'people-label))
      (close (child interface 'people))
      (close (child interface 'chat-label))
      (close (child interface 'command-to))
      (when (developer?)
        (close (child interface 'admin-label))
        (close (child interface 'admin)))
      (close (child interface 'gathering))
      (close (child interface 'circle))
      (close (child interface 'replay))
      (close (child interface 'simulate))
      (close (child interface 'exception))))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (define (show parent name)
        (set-visible? (child parent name) #t))
      
      (define (closer frame)
        (show root 'circle)
        (show root 'join)
        (show interface 'people-label)
        (show interface 'people)
        (show interface 'chat-label)
        (show interface 'chat)
        (show interface 'command-to)
        (show interface 'command)
        (show root 'circle-label)
        (show root 'circle-view)
        (show root 'circle-create)
        (when view-focused
          (inhibit-focus-selects-all self view-focused
            (lambda ()
              (acquire-focus view-focused)))))
      
      (let ((frame (top-frame)))
        (if (is? frame World-Document)
            (begin
              (close frame)
              (closer frame))
          (show-about self closer: closer)))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (define (hide parent name)
        (set-visible? (child parent name) #f))
      
      (set! view-focused (active-focus))
      (hide root 'circle)
      (hide root 'join)
      (hide interface 'people-label)
      (hide interface 'people)
      (hide interface 'chat-label)
      (hide interface 'chat)
      (hide interface 'command-to)
      (hide interface 'command)
      (when (developer?)
        (hide interface 'admin-label)
        (hide interface 'admin))
      (hide root 'circle-label)
      (hide root 'circle-view)
      (hide root 'circle-create)
      (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  (method (update-circle/join self)
    (let ((interface (current-interface)))
      (cond ((not selected-group)
             (set-title (child root 'circle) "")
             (set-enabled? (child root 'join) #f))
            (else
             (set-title (child root 'circle) selected-group)
             (set-enabled? (child root 'join) #t)
             (layout-view root)))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-moved self x y)
    (unless (script-visible? self)
      (when (eq? stage 'circle)
        (show-interface self))
      (when (developer?)
        (show/hide-debug self (fxround x) (fxround y)))))
  
  
  (method override (mouse-down self h v)
    (mouse-action self h v))
  
  
  (method override (mouse-up self h v)
    (mouse-action self h v))
  
  
  (method override (mouse-action self h v)
    (unless (script-visible? self)
      (when (eq? stage 'circle)
        (show-interface self))))
  
  
  (method override (double-click self h v)
    (mouse-action self h v))
  
  
  (method override (multiple-click self h v)
    (mouse-action self h v))
  
  
  (method (install-hider self)
    (let ((thread (new-thread
                    (lambda ()
                      (declare (proper-tail-calls))
                      (let (loop)
                        (let ((proc (wait hide-ring)))
                          (when proc
                            (delay-event
                              (lambda ()
                                (proc)))
                            (loop)))))
                    'hider)))
      (set! hide-ring (new Time-Ring 1))
      (set! hide-thread thread)
      (thread-start! thread)))
  
  
  (method (uninstall-hider self)
    (terminate hide-ring)
    (thread-join! hide-thread)
    (set! hide-ring #f)
    (set! hide-thread #f))
  
  
  ;; we probably need a tolerance so moving
  ;; only 1 pixel doesn't show the interface
  (method (show-interface self)
    (let ((window (current-window))
          (interface (current-interface)))
      @wait-later-version-as-it-needs-debugging
      (show-cursor window)
      (set-visible? (child root 'circle-name) #t)
      (set-visible? (child root 'toggle-people) #t)
      (set-visible? (child root 'toggle-chat) #t)
      (set-visible? (child root 'leave) #t)
      (set-visible? (child root 'audio) #t)
      (set-visible? (child root 'video) #t)
      (set-visible? (child root 'layouts) #t)
      (set-video-interface? #t)
      (delay-hide-interface self)))
  
  
  (method (delay-hide-interface self)
    (when auto-hide?
      (let ((hide-time (+ (current-seconds) 2.)))
        (empty hide-ring)
        (insert hide-ring hide-time (lambda ()
                                      (with-task-mutex
                                        (lambda ()
                                          (when (eq? stage 'circle)
                                            (let ((window (current-window))
                                                  (interface (current-interface)))
                                              @wait-later-version-as-it-needs-debugging
                                              (hide-cursor window)
                                              (set-visible? (child root 'circle-name) #f)
                                              (set-visible? (child root 'toggle-people) #f)
                                              (set-visible? (child root 'toggle-chat) #f)
                                              (set-visible? (child root 'leave) #f)
                                              (set-visible? (child root 'audio) #f)
                                              (set-visible? (child root 'video) #f)
                                              (set-visible? (child root 'layouts) #f)
                                              (set-video-interface? #f))))))))))
  
  
  (method (show/hide-debug self h v)
    (let ((interface (current-interface)))
      (let ((toolbar (child interface 'debug)))
        (let ((pos (new Point h v)))
          (let ((in? (in-rect? pos (get-rect toolbar))))
            (set-visible? toolbar in?))))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-people self evt)
    (let ((interface (current-interface)))
      (when (neq? stage 'gathering)
        (toggle-visible? (child interface 'people-label))
        (toggle-visible? (child interface 'people))
        (update-buttons self))))
  
  
  (method (on-toggle-chat self evt)
    (let ((interface (current-interface)))
      (when (neq? stage 'gathering)
        (toggle-visible? (child interface 'chat-label))
        (toggle-visible? (child interface 'chat))
        (toggle-visible? (child interface 'command-to))
        (toggle-visible? (child interface 'command))
        (update-buttons self))))
  
  
  (method (on-message self evt)
    (let ((interface (current-interface)))
      (show-chat self)
      (acquire-focus (locate (child interface 'command) 'text))))
  
  
  (method (update-buttons self)
    (let ((interface (current-interface)))
      (when (eq? stage 'circle)
        (set-title (child root 'toggle-people)
                   (if (get-visible? (child interface 'people))
                       "Hide People"
                     "Show People"))
        (set-title (child root 'toggle-chat)
                   (if (get-visible? (child interface 'chat))
                       "Hide Chat"
                     "Show Chat")))))
  
  
  (method (on-leave-circle self evt)
    (when (eq? stage 'circle)
      (leave-circle self)))
  
  
  (method (on-toggle-denoise self evt)
    (let ((world (current-world)))
      (when (eq? stage 'circle)
        (set-audio-denoise? (not (get-audio-denoise?)))
        (display-on/off world "Denoise" (get-audio-denoise?)))))
  
  
  (method (on-toggle-audio self evt)
    (let ((client (current-client)))
      (when (eq? stage 'circle)
        (require-mic-channel client)
        (toggle-mic client)
        (update-audio self))))
  
  
  (method (update-audio self)
    (let ((client (current-client)))
      (set-title (child root 'audio)
                 (if (mic-playing? client)
                     "Stop Audio"
                   "Start Audio"))))
  
  
  (method (on-toggle-video self evt)
    (let ((client (current-client)))
      (when (eq? stage 'circle)
        (let ((camera (get-camera-channel client)))
          (when (not camera)
            (require-camera-channel client))
          (toggle-camera client)
          (update-video self)
          (when (not camera)
            (update-layouts (current-video)))))))
  
  
  (method (update-video self)
    (let ((client (current-client)))
      (set-title (child root 'video)
                 (if (camera-playing? client)
                     "Stop Video"
                   "Start Video"))))
  
  
  (method (escape-press self)
    (if (or (is? (active-focus) Filter-View)
            (is? (active-focus) Filter-Text))
        #f
      (let ((frame (top-frame)))
        (if frame
            (close frame)
          (when (and guillaume? (eq? stage 'gathering))
            (delay-event
              (lambda ()
                (with-task-mutex
                  (lambda ()
                    (open-login-zone))))))))
      #t))
  
  
  (method override (enter-press self)
    (when (and (eq? stage 'gathering)
               (eq? (active-focus) (current-interface))
               selected-group
               (not selected-player))
      (join-circle self selected-group)))
  
  
  (method override (tab-press self)
    )
  
  
  (method package (on-join self evt)
    (join-circle self selected-group))
  
  
  (method (on-leave self evt)
    (leave-circle self))
  
  
  (method (on-create&join self evt)
    (create&join-circle self))
  
  
  (method override (name-return self)
    (create&join-circle self))
  
  
  (method (create&join-circle self)
    (let ((interface (current-interface))
          (tier (current-client))
          (world (current-world)))
      (let ((view (child root 'circle-view)))
        (let ((text (locate view 'text)))
          (let ((name (trim-whitespace (get-string-content text))))
            (unless (empty-string? name)
              (let ((exception (create-group tier name)))
                (if exception
                    (display-error world exception)
                  (clear-message world)
                  (set-string-content text "")
                  (join-circle self name)))))))))
  
  
  (method (join-circle self name)
    (let ((tier (current-client))
          (world (current-world))
          (zone (current-zone))
          (video (current-video)))
      (reset-chronology)
      (reset-evolution)
      (let ((channels/exception (join-group tier name)))
        (if (string? channels/exception)
            (display-error world channels/exception)
          (let ((udp-client (get-udp-client tier)))
            (when auto-channel?
              (require-mic-channel tier)
              (require-camera-channel tier))
            (for-each (lambda (info)
                        (bind (sender name no origin media-kind source-kind resolution framerate bitrate codec) info
                          (add-channel tier sender name no origin media-kind source-kind resolution framerate bitrate codec)))
                      channels/exception)
            (start udp-client))
          (when auto-channel?
            (when auto-audio?
              (play-mic tier))
            (when auto-video?
              (play-camera tier)))
          (clear-message world)
          (uninstall-camera)
          (remove-skybox zone)
          (set! joined-circle name)
          (set! circle-start (current-seconds))
          (goto-stage self 'circle)
          (update-layouts video)))))
  
  
  (method (leave-circle self)
    (let ((tier (current-client))
          (zone (current-zone)))
      (release-mic tier)
      (release-camera tier)
      (let ((udp-client (get-udp-client tier)))
        (stop udp-client)
        (close-mic-channel tier)
        (close-camera-channel tier)
        (close-screen-channel self)
        (close-send-channels udp-client)
        (close-receive-channels udp-client))
      (leave-group tier joined-circle)
      (circle-uninstall-camera)
      (circle-restore-fov)
      (install-camera)
      (install-skybox zone (find-skybox together-skybox))
      (set! draw-grid? #f)
      (set! joined-circle #f)
      (goto-stage self 'gathering)))
  
  
  (method (goto-stage self what)
    (uninstall-stage self)
    (set! stage what)
    (install-stage self))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  (method (on-back self evt)
    (goto-stage self 'gathering))
  
  
  ;;;
  ;;;; Hooks
  ;;;
  
  
  (method (install-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-server-entered-hook tier (~ server-entered self))
      (set-server-exited-hook tier (~ server-exited self))
      (set-hierarchy-update-hook tier (~ hierarchy-update self))
      (set-render-hook video (~ render-video self))
      (set-layout-circle-hook (~ layout-circle self))
      (set! draw-hook (~ draw-sheets self))
      (register-draw-hook interface draw-hook)
      (set-matrix-hook (get-eye world) (~ eye-matrix self))
      (set-displayed-hook (child interface 'chat) (~ chat-displayed self))
      (set-return-handler (child interface 'command) (~ command-return self))
      (set-escape-handler (child interface 'command) (~ command-escape self))
      (set-view-replay-directory (~ view-replay-directory self))))
  
  
  (method (uninstall-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-server-entered-hook tier #f)
      (set-server-exited-hook tier #f)
      (set-hierarchy-update-hook tier #f)
      (set-render-hook video #f)
      (set-layout-circle-hook #f)
      (unregister-draw-hook interface draw-hook)
      (set-matrix-hook (get-eye world) #f)
      (set-displayed-hook (child interface 'chat) #f)
      (set-return-handler (child interface 'command) #f)
      (set-escape-handler (child interface 'command) #f)
      (reset-view-replay-directory)))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method (server-entered self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} entered" character-name))))
  
  
  (method (server-exited self character-name disconnected?)
    (let ((world (current-world)))
      (let ((message (if disconnected? "disconnected" "exited")))
        (display-message world (format "{a} {a}" character-name message)))))
  
  
  (method (hierarchy-update self hierarchy)
    (let ((tree (people-tree self)))
      (with-preserved-selection tree
        (lambda ()
          (view-hierarchy self hierarchy))
        use: 'data
        test: equal?
        generate-event?: #t)
      (when guillaume?
        (when (not (get-single-selection tree))
          (select-user-data-row tree '(group "Circle") test: equal? error?: #f)))))
  
  
  ;;;
  ;;;; Media
  ;;;
  
  
  (method (render-video self video)
    (if (eq? world.video:video-layout 'circle)
        #f
      (neq? stage 'circle)))
  
  
  (method (draw-sheets self surface)
    (let ((client (current-client)))
      (define (draw-debugging)
        (set-font surface {Font font-name: tahoma point-size: 24 hint-style: slight hint-metrics: on})
        (draw-text surface 20 80 (format "{a}s" (fxround (- (current-seconds) circle-start))) {Color World-Ochre})
        (draw-text surface 20 115 (format "Quality: {a} {a}" (media-quality udp-audio) (media-quality udp-video)) {Color World-Red})
        (draw-text surface 20 150 (format "Drop: {a} {a}" (outgoing-drop) (incoming-drop)) {Color World-Red})
        (draw-text surface 20 185 (format "Nack: {a} {a}" (count-nacks udp-audio) (count-nacks udp-video)) {Color World-Red})
        (draw-text surface 20 220 (format "Replay: {a} {a}" (present-chronology-duration) (present-evolution-duration)) {Color World-Red}))
      
      (define (media-quality kind)
        (let ((total 0.)
              (channels 0))
          (iterate-table (get-receive-channels (get-udp-client client))
            (lambda (key channel)
              (when (= (get-media-kind channel) kind)
                (let ((mean (mean-average (get-process-average channel))))
                  (when mean
                    (increase! total mean)
                    (increase! channels))))))
          (if (= channels 0)
              "N/A"
            (format "{r precision: 1}%" (* 100. (/ total (cast <fl> channels)))))))
      
      (define (outgoing-drop)
        (let ((drop (get-outgoing-drop (get-udp-client client))))
          (if drop
              (format "{r precision: 1}%" drop)
            "N/A")))
      
      (define (incoming-drop)
        (let ((drop (get-incoming-drop (get-udp-client client))))
          (if drop
              (format "{r precision: 1}%" drop)
            "N/A")))
      
      (define (present-chronology-duration)
        (let ((chronology (current-chronology)))
          (let ((duration (chronology-duration chronology)))
            (if (not duration)
                "N/A"
              (format "{r precision: 1}s" duration)))))
      
      (define (present-evolution-duration)
        (let ((evolution (current-evolution)))
          (let ((duration (evolution-duration evolution)))
            (if (not duration)
                "N/A"
              (format "{r precision: 1}s" duration)))))
      
      (define (count-nacks kind)
        (let ((total 0)
              (channels 0))
          (iterate-table (get-receive-channels (get-udp-client client))
            (lambda (key channel)
              (when (= (get-media-kind channel) kind)
                (let ((len (count-missing channel)))
                  (increase! total len)
                  (increase! channels)))))
          (if (= channels 0)
              "N/A"
            (format "{a}" (fxround (/ (cast <fl> total) (cast <fl> channels)))))))
      
      (when (eq? stage 'circle)
        (when show-debug?
          (draw-debugging)))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method (eye-matrix self camera stable?)
    (when (eq? stage 'circle)
      (update-interface-matrices (current-video))
      @wait
      (let ((position (get-position camera))
            (sight (get-sight camera)))
        (updating-3d-audio position sight
          (lambda ()
            (let ((udp-client (get-udp-client (current-client))))
              (iterate-table (get-receive-channels udp-client)
                (lambda (channel-no channel)
                  (when (= (get-media-kind channel) udp-audio)
                    (receive (audio video) (find-receive-channels udp-client (get-name channel))
                      (when (and audio video)
                        (let ((audio-output (find-output (current-audio) (get-no audio)))
                              (video-output (find-output (current-video) (get-no video))))
                          (when (and audio-output video-output)
                            (when (is? video-output Circle-Video-Sink)
                              (let ((position (matrix-translation (get-matrix (get-pane video-output)))))
                                (update-3d-output audio-output position))))))))))))))))
  
  
  ;;;
  ;;;; People
  ;;;
  
  
  (method (people-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'people) '(people people))))
  
  
  (method (view-people self)
    (let ((tier (current-tier)))
      (view-hierarchy self (list-hierarchy tier))))
  
  
  (method (view-hierarchy self hierarchy)
    (let ((tier (current-tier))
          (me (current-me)))
      (let ((tree (people-tree self)))
        (remove-every-row tree)
        (with-update-locked tree
          (lambda ()
            (bind (gathering . groups) hierarchy
              (let ((players (cdr gathering)))
                (let ((row (add-row tree
                                  state: 'expanded
                                  children: (list (new Tree-Node
                                                    title: "The gathering"
                                                    font: {Font Label-User}
                                                    color: {Color red: 32 green: 205 blue: 33})))))
                  (for-each (lambda (info)
                              (bind (player id no) info
                                (add-row tree
                                         father: row
                                         children: (list (new Tree-Node title: player font: {Font Label-User} color: {Color World-Blue}))
                                         user-data: (list 'player player #f))))
                            (let ((me (get-name me)))
                              (sort di<? players key: (lambda (player)
                                                        (if (equal? player me)
                                                            (cons 0 player)
                                                          (cons 1 player))))))))
              (when (not-null? hierarchy)
                (add-row tree
                         children: (list (new Tree-Node title: "" font: {Font Label-User})))
                (for-each (lambda (info)
                            (bind (group . players) info
                              (let ((row (add-row tree
                                                  state: 'expanded
                                                  children: (list (new Tree-Node title: group font: {Font Label-User} color: {Color World-Red}))
                                                  user-data: (list 'group group))))
                                (for-each (lambda (info)
                                            (bind (player id no) info
                                              (add-row tree
                                                       father: row
                                                       children: (list (new Tree-Node title: player font: {Font Label-User} color: {Color World-Blue}))
                                                       user-data: (list 'player player group))))
                                          players))))
                          (sort di<? groups key: car)))))))))
  
  
  (method package (people-selection-change self)
    (let ((tree (people-tree self)))
      (let ((selected (or (get-single-selected-data tree) (list 'group #f))))
        (bind (kind . rest) selected
          (define (select group player)
            (set! selected-group group)
            (set! selected-player player)
            (when (eq? stage 'gathering)
              (update-circle/join self)))
          
          (case kind
            ((player)
             (bind (player group) rest
               (select group player)))
            ((group)
             (bind (group) rest
               (select group #f))))))))
  
  
  (method package (people-double-click self)
    (people-action-selected self))
  
  
  (method package (people-return-press self)
    (people-action-selected self))
  
  
  (method (people-action-selected self)
    (when (eq? stage 'gathering)
      (when (and selected-group (not selected-player))
        (join-circle self selected-group))))
  
  
  ;;;
  ;;;; Chat
  ;;;
  
  
  (method (chat-displayed self chat)
    (show-chat self)
    #f)
  
  
  (method (show-chat self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'chat-label) #t)
      (set-visible? (child interface 'chat) #t)
      (set-visible? (child interface 'command-to) #t)
      (set-visible? (child interface 'command) #t)
      (update-buttons self)))
  
  
  (method (command-return self command)
    (define (parse-content content)
      (if (not (developer?))
          (values 'group (group-recipient) content)
        (cond ((starts-with? content "/s ")
               (values 'server #f (substring content 3 (string-length content))))
              ((starts-with? content "/g ")
               (values 'group (group-recipient) (substring content 3 (string-length content))))
              ((starts-with? content "/w ")
               (let ((str (substring content 3 (string-length content))))
                 (let ((pos (find str #\space)))
                   (if (not pos)
                       (values 'whisper (get-name (current-me)) str)
                     (let ((recipient (substring str 0 pos))
                           (message (substring str (+ pos 1) (string-length str))))
                       (show-panel-whisper recipient message)
                       (values 'whisper recipient message))))))
              ((starts-with? content "/r ")
               (let ((last-whisperer (get-last-whisperer (current-world)))
                     (message (substring content 3 (string-length content))))
                 (if (not last-whisperer)
                     (values 'group (group-recipient) message)
                   (show-panel-whisper last-whisperer message)
                   (values 'whisper last-whisperer message))))
              (else
               (values 'group (group-recipient) content)))))
    
    (define (group-recipient)
      (if (eq? stage 'circle)
          joined-circle
        #f))
    
    (define (show-panel-whisper recipient message)
      (let ((interface (current-interface)))
        (let ((panel (child interface 'chat)))
          (show-whisper panel recipient message))))
    
    (let ((world (current-world))
          (tier (current-client)))
      (let ((text (locate command 'text)))
        (let ((content (get-string-content text)))
          (unless (whitespace? content)
            (receive (kind recipient message) (parse-content content)
              (client-message tier kind recipient message)
              (set-string-content text "")))))))
  
  
  (method (command-escape self command)
    )
  
  
  ;;;
  ;;;; Layouts
  ;;;


  (method (on-cycle-layouts self evt)
    (let ((world (current-world))
          (video (current-video)))
      (when (eq? stage 'circle)
        (goto-layout video (cycle-element '(circle focus gallery) video-layout reversed?: (get-shift? evt)))
        (when (eq? video-layout 'focus)
          (let ((focused-output (effective-focused-output video)))
            (when focused-output
              (circle-goto-focus focused-output))))
        (show-interface self)
        (update-layouts self)
        (display-message world (capitalize (symbol->string video-layout))))))
  
  
  (method (update-layouts self)
    (let ((interface (current-interface)))
      (set-title (child root 'layouts)
                 (case video-layout
                   ((circle) "Focus")
                   ((focus) "Gallery")
                   ((gallery) "Circle")))))
  
  
  ;;;
  ;;;; Circle
  ;;;
  
  
  (method (layout-circle self ordered-outputs)
    (let ((count (length ordered-outputs)))
      (circle-update-camera count)
      (circle-placements count)))
  
  
  (method package (shortcut-press-circle self shortcut)
    (if (or (not (world-focused?))
            (neq? stage 'circle))
        #f
      (let ((count (video-count)))
        (nucase shortcut
          (({Shortcut Left})
           (when (> count 3)
             (circle-left-rotation))
           #t)
          (({Shortcut Right})
           (when (> count 3)
             (circle-right-rotation))
           #t)
          (({Shortcut Up})
           (when (> count 3)
             (circle-increase-speed))
           #t)
          (({Shortcut Down})
           (when (> count 3)
             (circle-decrease-speed))
           #t)
          (({Shortcut Return})
           (when (> count 3)
             (circle-toggle-camera))
           #t)
          (({Shortcut Backspace})
           (circle-uninstall-camera)
           (circle-update-camera count))
          (else
           #f)))))

  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (on-toggle-debug self evt)
    (when (eq? stage 'circle)
      (set! show-debug? (not show-debug?))
      (invalidate-interface)))
  
  
  (method (on-toggle-admin self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (if (get-visible? panel)
            (begin
              (hide-admin self)
              ;; should not be necessary
              (focus-world))
          (show-admin self)
          (acquire-focus (locate panel '(console text)))))))
  
  
  (method (show-admin self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'admin-label) #t)
      (set-visible? (child interface 'admin) #t)
      (when (eq? stage 'gathering)
        (set-visible? (child root 'join) #f)
        (set-visible? (child root 'circle) #f))
      (layout-view interface)))
  
  
  (method (hide-admin self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'admin-label) #f)
      (set-visible? (child interface 'admin) #f)
      (when (eq? stage 'gathering)
        (set-visible? (child root 'join) #t)
        (set-visible? (child root 'circle) #t))))
  
  
  (method (on-toggle-script self evt)
    (toggle-script self))
  
  
  (method (on-toggle-grid self evt)
    (when (eq? stage 'circle)
      (set! draw-grid? (not draw-grid?))))
  
  
  (method (on-toggle-timeline self evt)
    (let ((interface (current-interface))
          (world (current-world))
          (client (current-client)))
      (toggle-timeline world)
      (let ((panel (child interface 'timeline)))
        (when (get-visible? panel)
          (let ((udp-client (get-udp-client client)))
            (let ((channels (table-keys (get-receive-channels udp-client))))
              ;; channelgazoum
              (let ((audio-channels (collect-if (lambda (channel) (and (pair? channel) (= (cdr channel) udp-audio))) channels)))
                (when (not-null? audio-channels)
                  (bind (origin . media-kind) (car audio-channels)
                    (set-origin panel origin)
                    (set-media-kind panel media-kind)
                    (invalidate-view panel))))))))))
  
  
  (method (on-toggle-visualizer self evt)
    (if (eq? stage 'replay)
        (let ((interface (current-interface)))
          (let ((root (child interface 'replay)))
            (let ((visualizer (child root 'visualizer)))
              (set-visible? visualizer (not (get-visible? visualizer)))
              (together-visualizer-panel-layouter visualizer)
              (together-timeline-panel-layouter (child root 'timeline))
              (together-evolution-panel-layouter (child root 'evolution))
              (layout-view root)
              (layout-view interface)
              (invalidate-interface))))
      (bell)))
  
  
  (method (on-goto-gathering self evt)
    (case stage
      ((gathering))
      ((circle)
       (leave-circle self))
      (else
       (goto-stage self 'gathering))))
  
  
  (method (on-goto-script self evt)
    (case stage
      ((script))
      ((circle)
       (bell))
      (else
       (goto-script/last self))))
  
  
  (method (toggle-script self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (if (get-visible? panel)
              (begin
                (save-script manager)
                (set-visible? panel #f)
                (focus-world))
            (call-setup-catalogs)
            (let ((text (locate manager '(script text))))
              (when (not edited-entity)
                (let ((script (find-script world (world-setting 'together.edited-script "test/replay"))))
                  (when script
                    (let ((entity (register-asset-script script)))
                      (set-edited-entity entity)
                      (set-edited manager entity)
                      (set-moniker text (get-file script))))))
              (acquire-focus text))
            (set-visible? panel #t))))))
  
  
  (method (script-visible? self)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (get-visible? panel))))
  
  
  (method (goto-script/last self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (let ((text (locate manager '(script text))))
            (when (not edited-entity)
              (let ((script (find-script world (world-setting 'together.edited-script "test/replay"))))
                (when script
                  (call-setup-catalogs)
                  (let ((entity (register-asset-script script)))
                    (set-edited-entity entity)
                    (set-edited manager entity)
                    (set-moniker text (get-file script))))))
            (goto-script self)
            (acquire-focus text))))))
  
  
  (method (goto-script self)
    (goto-stage self 'script))
  
  
  (method (on-goto-replay self evt)
    (case stage
      ((replay))
      ((circle)
       (bell))
      (else
       (goto-replay/last self))))
  
  
  (method (goto-replay/last self)
    (if (not replay)
        (let ((last-replay (world-setting 'world.last-replay #f)))
          (if last-replay
              (bind (name from to now) last-replay
                (let ((dir (new-directory {Directory Settings "work" "replays"} name)))
                  (if (exists? dir)
                      (view-replay-directory self dir from to now)
                    (goto-replay self))))
            (goto-replay self)))
      (goto-replay self)))
  
  
  (method (goto-replay self)
    (goto-stage self 'replay))
  
  
  (method (view-replay-directory self dir (from #f) (to #f) (now #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (if (eq? stage 'circle)
          (display-error world "Cannot view replay in circle")
        (receive (names metadatas chronologies evolutions channels audios videos) (collect-replays dir)
          (define (determine-tier character-name)
            (or (table-find names character-name test: equal?)
                (car (table-keys names))))
          
          (define (determine-base-time)
            (fifth (table-ref metadatas server-no)))
          
          (let ((character-name (get-character-name (current-client))))
            (let ((tier (determine-tier character-name)))
              (let ((base-time (determine-base-time))
                    (title (get-name dir)))
                (let ((replay (new Replay title dir tier names metadatas chronologies evolutions channels audios videos base-time)))
                  (view-replay self replay from to now))
                (set-setting options-settings 'world.last-replay (list (get-name dir) (get-from replay) (get-to replay) (get-now replay)))
                (save-content options-settings))))))))
  
  
  (method protected (view-replay self replay (from #f) (to #f) (now #f))
    (let ((title (get-title replay))
          (tier (get-tier replay))
          (names (get-names replay))
          (chronologies (get-chronologies replay))
          (evolutions (get-evolutions replay))
          (channels (get-channels replay))
          (base-time (get-base-time replay)))
      (let ((chronology (table-ref chronologies tier))
            (evolution (table-ref evolutions tier)))
        (set! self.replay replay)
        (hide-admin self)
        (goto-replay self)
        (let ((panel (child root 'timeline)))
          (set-tier panel (table-ref names tier))
          (set-title panel title)
          (set-highlighted-values panel '())
          (set-chronology panel chronology)
          (set-evolution panel evolution)
          (set-evolutions panel evolutions)
          (reset-start/end panel)
          (setup-replay panel base-time)
          (when (and from to)
            (set-bounds panel from to)
            (update-span panel))
          (when now
            (set-now panel now))
          (set-from replay from)
          (set-to replay to)
          (set-now replay now))
        (let ((panel (child root 'visualizer)))
          (set-replay panel replay)
          (set-tier panel tier)
          (setup-visualizer panel)
          (invalidate-view panel))
        (let ((panel (child root 'evolution)))
          (set-names panel names)
          (set-channels panel channels)
          (set-evolutions panel evolutions)
          (set-base-time panel base-time))
        (display-evolutions self now)
        (set-?r replay))))
  
  
  (method (on-request-replays self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (show-admin self)
          (acquire-focus text)
          (insert-string text "request all replay")
          (console-return text
            (lambda ()
              (console-evaluate text)))))))
  
  
  (method (on-goto-simulate self evt)
    (case stage
      ((simulate))
      ((circle)
       (bell))
      (else
       (goto-simulate self))))
  
  
  (method (goto-simulate self)
    (goto-stage self 'simulate))
  
  
  (method (on-toggle-screen-share self evt)
    (when (eq? stage 'circle)
      (let ((world (current-world)))
        (cond ((not screen-channel)
               (set! screen-channel (make-screen-channel "Screen"))
               (play screen-channel)
               (display-on/off world "Screen sharing" #t))
              (else
               (close-send-channel (get-udp-client (current-client)) (get-no screen-channel))
               (set! screen-channel #f)
               (display-on/off world "Screen sharing" #f))))))
  
  
  (method (close-screen-channel self)
    (when screen-channel
      (release screen-channel)
      (set! screen-channel #f)))
  
  
  (method (on-toggle-mode self evt)
    (let ((world (current-world)))
      (set-video-mode
        (if (eq? video-mode 'fit)
            'fill
          'fit))
      (display-message world (case video-mode
                               ((fit) "Fit")
                               ((fill) "Fill")))))
  
  
  (method (on-add-image self evt)
    (when (eq? stage 'circle)
      (add-image)))
  
  
  (method (on-add-video self evt)
    (when (eq? stage 'circle)
      (add-video)))
  
  
  (method (on-add-music self evt)
    (when (eq? stage 'circle)
      (add-music)))
  
  
  (method (on-remove-stream self evt)
    (when (eq? stage 'circle)
      (remove-stream)))
  
  
  (method (on-configure-settings self evt)
    )
  
  
  (method (on-edit-script1 self evt)
    (edit-script self (world-setting 'world.test1-script "test/test1")))
  
  
  (method (on-edit-script2 self evt)
    (edit-script self (world-setting 'world.test2-script "test/test2")))
  
  
  (method (on-edit-script3 self evt)
    (edit-script self (world-setting 'world.test3-script "test/test3")))
  
  
  (method (on-edit-script4 self evt)
    (edit-script self (world-setting 'world.test4-script "test/test4")))
  
  
  (method (on-edit-script5 self evt)
    (edit-script self (world-setting 'world.test5-script "test/test5")))
  
  
  (method (on-edit-script6 self evt)
    (edit-script self (world-setting 'world.test6-script "test/test6")))
  
  
  (method (on-edit-script7 self evt)
    (edit-script self (world-setting 'world.test7-script "test/test7")))
  
  
  (method (on-edit-script8 self evt)
    (edit-script self (world-setting 'world.test8-script "test/test8")))
  
  
  (method (on-edit-script9 self evt)
    (edit-script self (world-setting 'world.test9-script "test/test9")))
  
  
  (method (on-edit-script0 self evt)
    (edit-script self (world-setting 'world.test0-script "test/test0")))
  
  
  (method protected (edit-script self script/name (selection: selection #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (let ((text (locate manager '(script text))))
            (let ((script (if (is? script/name Asset)
                              script/name
                            (find-script world script/name))))
              (when script
                (save-script manager)
                (call-setup-catalogs)
                (let ((entity (register-asset-script script)))
                  (set-edited-entity entity)
                  (set-edited manager entity)
                  (set-moniker text (get-file script))
                  (when selection
                    (set-selection-safe text selection reposition: 'vertical ensure-displayed?: 'center-caret)
                    (set-selection text selection)))))
            (acquire-focus text)))
        (set-visible? panel #t)))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (when (developer?)
      (open-login-zone))))


;;;
;;;; People-Panel
;;;


(class People-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>   name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<People-View> name: people  location: center)))))


;;;
;;;; People-View
;;;


(class People-View extends Scroller-View
  
  
  (form
    (<install>                                 style: document hscroll?: #t vscroll?: #t
      (<content~>                              layout-type: fill
        (<Tree-Header>                         style: document shown?: #f
          (<content~>
            (<Tree-View>          name: people portfolio: :images filled-column: person background: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
              (<Tree-Node-Column> name: person title: "Person" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-selection-change self evt)
    (let ((zone (current-zone)))
      (people-selection-change zone)))
  
  
  (method package (on-double-click self evt)
    (let ((zone (current-zone)))
      (people-double-click zone)))
  
  
  (method override (on-return-press self evt)
    (let ((zone (current-zone)))
      (people-return-press zone))))


;;;
;;;; Admin-Panel
;;;


(class Admin-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>  name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Admin-View> name: console location: center)))))


;;;
;;;; Admin-View
;;;


(class Admin-View extends Scroller-View
  
  
  (form
    (<install>
      (<!>                 name: content
        (<Admin-Text-View> name: text    background: #f))))))
