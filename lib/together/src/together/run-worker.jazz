;;;============
;;;  Together
;;;============
;;;
;;;; Together Run Worker
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.run-worker jazz


(import (jazz.io)
        (jazz.presence)
        (jazz.presence.transmission)
        (world)
        (world.build)
        (together)
        (together.domain))


(definition (prepare-worker)
  (set-window? #f)
  (set-capability 'window? #f)
  (set-tier-title "Together")
  (set-tier-kind 'worker)
  (set-process-kind 'application)
  (set-settings-alias 'Resources)
  (set-settings-root (determine-settings-root))
  (set-documents-root (determine-documents-root))
  (set-universe-root (determine-universe-root))
  (set-aliases-setup setup-aliases)
  (set-valid-roles '(user builder developer))
  (register-domain-names)
  (initialize-aliases)
  (setup-build ".together-worker")
  (setup-presence))


(definition (prepare-presence)
  ;; be robust to master crashing
  (set-presence-process-handler
    (lambda (proc connection)
      (handle-exception-filter
        connection-exception?
        (lambda (exc)
          (exit 1))
        (lambda ()
          (proc connection))))
    purpose: 'working))


(definition protected (prepare-settings)
  (load-unit 'world.settings)
  (when start-tier-listener
    (start-tier-listener))
  (when connect-slave-to-master
    (connect-slave-to-master)))


(definition (run-worker descriptor)
  (prepare-worker)
  (prepare-presence)
  (prepare-settings)
  (load-unit 'together.boot-worker)
  (boot-process))


(register-product-run 'together-worker
  run-worker))
