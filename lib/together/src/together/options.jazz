;;;============
;;;  Together
;;;============
;;;
;;;; User Options
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.options jazz


(import (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.screen)
        (jazz.settings)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.audio)
        (world.circle)
        (world.client.tier)
        (world.context)
        (world.hierarchy)
        (world.interface.frame)
        (world.interface.mainbar)
        (world.interface.options)
        (world.interface.text)
        (world.profile)
        (world.settings)
        (world.task)
        (world.video)
        (together)
        (together.zone))


;;;
;;;; Audio
;;;


(class Audio-Options extends Option-Frame
  
  
  (form
    (<install>
      (<caption~>           title: "Audio Options")
      (<content~>                                         layout-type: center
        (<View>             name: container               size: {Dimension 390 230}
          (<Option-Label>   title: "Microphone"           position: {Point 0 1})
          (<Combo-Option>                                 position: {Point 190 0} size: {Dimension 200 19} option: microphone)
          (<Boolean-Option> title: "Push to talk (Space)" position: {Point 0 30} size: {Dimension 200 16} option: push-to-talk)
          (<Boolean-Option> title: "Echo Cancellation"    position: {Point 0 74} size: {Dimension 200 16} option: echo-cancel)
          (<Boolean-Option> title: "Noise Suppression"    position: {Point 0 100} size: {Dimension 200 16} option: noise-suppress)
          (<Boolean-Option> title: "Aggressive Denoising (can impact voice quality)" position: {Point 0 126} size: {Dimension 300 15} option: aggressive-denoising)
          (<Boolean-Option> name: directsound-option      title: "Use DirectSound (try if microphone is not working)" position: {Point 0 170} size: {Dimension 300 15} visible?: #f option: directsound)
          (<Option-Label>   name: speaker-label           title: "Speaker" position: {Point 0 211} size: {Dimension 200 15})
          (<Combo-Option>   name: speaker-option          position: {Point 190 210} size: {Dimension 200 19} option: speaker)))))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (reset-install/restart)
    (cond-expand
      (windows
       (set-visible? (locate self 'directsound-option) #t))
      (else
       (set-size (locate self 'container) {Dimension 390 200})
       (set-position (locate self 'speaker-label) {Point 0 181})
       (set-position (locate self 'speaker-option) {Point 190 180}))))
  
  
  (method override (destroy self)
    (warn-if-restart-needed "Together")
    (nextmethod self))
  
  
  (method override (read-option self option)
    (case option
      ((microphone)
       (let ((providers (microphone-providers)))
         (if (null? providers)
             (values (list (list #f "<No microphone found>")) #f)
           (let ((effective-provider (effective-microphone-provider providers)))
             (let ((choices (map (lambda (provider)
                                   (list (get-identifier provider) (get-name provider)))
                                 providers))
                   (identifier (get-identifier effective-provider)))
               (let ((choice (assoc identifier choices)))
                 (if choice
                     (values choices (car choice))
                   (values choices #f))))))))
      ((push-to-talk)
       (push-to-talk?))
      ((echo-cancel)
       (world-setting 'world.audio-echo-cancel? #t))
      ((noise-suppress)
       (world-setting 'world.audio-noise-suppress? #t))
      ((aggressive-denoising)
       audio-rndenoise?)
      ((directsound)
       (world-setting 'world.microphone-directsound? #f))
      ((speaker)
       (let ((providers (speaker-providers)))
         (if (null? providers)
             (values (list (list #f "<No speaker found>")) #f)
           (let ((effective-provider (effective-speaker-provider providers)))
             (let ((choices (map (lambda (provider)
                                   (list (get-identifier provider) (get-name provider)))
                                 providers))
                   (identifier (get-identifier effective-provider)))
               (let ((choice (assoc identifier choices)))
                 (if choice
                     (values choices (car choice))
                   (values choices #f))))))))))
  
  
  (method override (write-option self option value title)
    (case option
      ((microphone)
       (update-microphone-identifier (current-client) title value))
      ((push-to-talk)
       (change-push-to-talk value))
      ((echo-cancel)
       (set-setting options-settings 'world.audio-echo-cancel? value)
       (save-content options-settings)
       (need-restart))
      ((noise-suppress)
       (set-setting options-settings 'world.audio-noise-suppress? value)
       (save-content options-settings)
       (need-restart))
      ((aggressive-denoising)
       (change-rndenoise (current-client) value)
       (set-setting options-settings 'world.audio-rndenoise? value)
       (save-content options-settings))
      ((directsound)
       (set-microphone-directsound? value)
       (set-setting options-settings 'world.microphone-directsound? value)
       (save-content options-settings))
      ((speaker)
       (update-speaker-identifier (current-client) title value)))))


;;;
;;;; Video
;;;


(class Video-Options extends Option-Frame
  
  
  (form
    (<install>
      (<caption~>                                      title: "Video Options")
      (<content~>                                                             layout-type: center
        (<View>                                                               size: {Dimension 390 184}
          (<Option-Label>                              title: "Quality"       position: {Point 0 1})
          (<Combo-Option>                                                     position: {Point 140 0} size: {Dimension 250 19} option: quality)
          (<Option-Label>   name: camera-label         title: "Camera"        position: {Point 0 51})
          (<Combo-Option>   name: camera-option                               position: {Point 140 50} size: {Dimension 250 19} option: camera)
          (<Boolean-Option> name: retina-option        title: "Retina"        position: {Point 0 110} size: {Dimension 250 16} visible?: #f option: retina)
          (<Option-Label>   name: scale-label          title: "Scale"         position: {Point 0 81} visible?: #f)
          (<Combo-Option>   name: scale-option                                position: {Point 140 80} size: {Dimension 250 19} visible?: #f option: scale)
          (<Boolean-Option> name: multisampling-option title: "Multisampling" position: {Point 0 160} size: {Dimension 250 16} option: multisampling)
          (<Boolean-Option> name: hardware-option      title: "Hardware Acceleration" position: {Point 0 170} size: {Dimension 300 16} visible?: #f option: hardware)
          (<Boolean-Option> name: ksvideosrc-option    title: "Use KSVideoSrc (try if camera is not working)" position: {Point 0 170} size: {Dimension 320 15} visible?: #f option: ksvideosrc)))))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (reset-install/restart)
    (cond-expand
      (mac
       (when (main-screen-retina?)
         (set-visible? (locate self 'retina-option) #t))
       (set-visible? (locate self 'hardware-option) #t)
       (set-position (locate self 'multisampling-option) {Point 0 140}))
      (windows
       (set-position (locate self 'camera-label) {Point 0 41})
       (set-position (locate self 'camera-option) {Point 140 40})
       (set-visible? (locate self 'scale-label) #t)
       (set-visible? (locate self 'scale-option) #t)
       (set-position (locate self 'multisampling-option) {Point 0 140})
       (set-visible? (locate self 'ksvideosrc-option) #t))
      (else)))
  
  
  (method override (destroy self)
    (warn-if-restart-needed "Together")
    (nextmethod self))
  
  
  (method override (read-option self option)
    (case option
      ((quality)
       (let ((profile-list (case (get-name maximum-graphic-profile)
                             ((full) '(full high standard medium low))
                             ((high) '(high standard medium low))
                             ((standard) '(standard medium low))
                             ((medium) '(medium low))
                             ((low) '(low)))))
         (let ((choices (map (lambda (profile)
                               (list profile (capitalize (symbol->string profile))))
                             profile-list))
               (choice graphic-profile))
           (values choices choice))))
      ((camera)
       (let ((providers (camera-providers)))
         (if (null? providers)
             (values (list (list #f "<No camera found>")) #f)
           (let ((effective-provider (effective-camera-provider providers)))
             (let ((choices (map (lambda (provider)
                                   (list (get-identifier provider) (get-name provider)))
                                 providers))
                   (identifier (get-identifier effective-provider)))
               (let ((choice (or (assoc identifier choices) (car choices))))
                 (values choices (car choice))))))))
      ((retina)
       (world-setting 'world.application-retina? #t))
      ((multisampling)
       (world-setting 'world.multisampling? #t))
      ((scale)
       (let ((choices (list (list 1. "100%")
                            (list 1.25 "125%")
                            (list 1.5 "150%")
                            (list 1.75 "175%")
                            (list 2. "200%")))
             (choice (world-setting 'world.application-scale 1.)))
         (values choices choice)))
      ((ksvideosrc)
       (world-setting 'world.camera-ksvideosrc? #f))
      ((hardware)
       (world-setting 'world.video-hardware? #f))))
  
  
  (method override (write-option self option value title)
    (case option
      ((quality)
       (set-setting options-settings 'world.graphic-profile value)
       (save-content options-settings)
       (graphic-profile-update value)
       (update-self-output (current-video))
       (update-profile-label))
      ((camera)
       (update-camera-identifier (current-client) title value))
      ((retina)
       (set-setting options-settings 'world.application-retina? value)
       (save-content options-settings)
       (need-restart))
      ((multisampling)
       (set-setting options-settings 'world.multisampling? value)
       (save-content options-settings)
       (need-restart))
      ((scale)
       (set-setting options-settings 'world.application-scale value)
       (save-content options-settings)
       (need-restart))
      ((ksvideosrc)
       (update-camera-ksvideosrc? (current-client) value)
       (set-setting options-settings 'world.camera-ksvideosrc? value)
       (save-content options-settings))
      ((hardware)
       (set-video-hardware? value)
       (set-setting options-settings 'world.video-hardware? value)
       (save-content options-settings)))))


(definition protected (update-profile-label)
  (define (update-label title color)
    (let ((label (child mainbar 'profile)))
      (set-title label title)
      (set-color label color)))
  
  (case graphic-profile
    ((full)     (update-label "Full"     {Color Pastel-Purple}))
    ((high)     (update-label "High"     {Color Pastel-Blue}))
    ((standard) (update-label "Standard" {Color Pastel-Green}))
    ((medium)   (update-label "Medium"   {Color Pastel-Yellow}))
    ((low)      (update-label "Low"      {Color Pastel-Orange}))))


;;;
;;;; Circle
;;;


(class Circle-Options extends Option-Frame
  
  
  (property circle-name initialize #f accessors generate)
  
  
  (slot circle-property-list getter generate)
  
  
  (form
    (<install>
      (<caption~>           title: "Circle Options")
      (<content~>                                          layout-type: center
        (<View>                                            size: {Dimension 390 180}
          (<Option-Label>   title: "Layout"                position: {Point   0 1})
          (<Combo-Option>                                  position: {Point 140 0} size: {Dimension 250 19} option: layout)
          (<Boolean-Option> title: "Persistent"            position: {Point  0  60} size: {Dimension 200 16} option: persistent)
          (<Boolean-Option> title: "Join by invite only"   position: {Point  0  95} size: {Dimension 200 16} option: join-by-invite-only)
          (<Boolean-Option> title: "Start with microphone" position: {Point  0 130} size: {Dimension 200 16} option: require-microphone)
          (<Boolean-Option> title: "Start with camera"     position: {Point  0 165} size: {Dimension 200 16} option: require-camera)))))
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! circle-name (getf rest circle-name:))
    (set! circle-property-list (circle-properties (current-client) circle-name)))
  
  
  (method override (read-option self option)
    (case option
      ((layout)
       (let ((layout-list '(round flow heart @theater theater)))
         (let ((choices (map (lambda (layout)
                               (list layout (capitalize (symbol->string layout))))
                             layout-list))
               (choice (getf circle-property-list 'shape)))
           (values choices choice))))
      ((persistent)
       (getf circle-property-list 'persistent?))
      ((join-by-invite-only)
       (getf circle-property-list 'invite-only?))
      ((require-microphone)
       (getf circle-property-list 'require-microphone?))
      ((require-camera)
       (getf circle-property-list 'require-camera?))))
  
  
  (method override (write-option self option value title)
    (case option
      ((layout)
       (set-current-circle-shape circle-name value)
       (change-circle-shape (current-client) circle-name value))
      ((persistent)
       (change-circle-property (current-client) circle-name 'persistent? value))
      ((join-by-invite-only)
       (change-circle-property (current-client) circle-name 'invite-only? value))
      ((require-microphone)
       (change-circle-property (current-client) circle-name 'require-microphone? value))
      ((require-camera)
       (change-circle-property (current-client) circle-name 'require-camera? value)))))


;;;
;;;; Edit
;;;


(class Circle-Edit extends World-Frame
  
  
  (property circle-name initialize #f accessors generate)
  
  
  (form
    (<install>
      (<caption~>                                title: "Edit Circle")
      (<content~>                                layout-type: center
        (<View>                                  size: {Dimension 490 165}
          (<Option-Label>                        title: "Description" position: {Point 0 5} size: {Dimension 100 15})
          (<Description-Edit> name: description  position: {Point 85 0} size: {Dimension 400 104} border-type: solid border-color: {Color Dark-Gray})
          (<Push-Button>                         title: "Delete Circle" position: {Point 170 140} size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: {Event-Handler :form on-delete-circle})))))
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! circle-name (getf rest circle-name:)))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (set-wrap? (get-model (locate self '(description text))) #t)
    (let ((description (circle-property (current-client) circle-name 'description)))
      (when description
        (set-string-content (locate self '(description text)) description))))
  
  
  (method override (user-close self)
    (let ((description-view (locate self 'description)))
      (let ((text (locate description-view 'text)))
        (let ((content (get-string-content text)))
          (let ((description (if (empty-string? content) #f content)))
            (change-circle-property (current-client) circle-name 'description description)
            (let ((group (find-group-info circle-name)))
              (when group
                (set-description group description)))))))
    (nextmethod self))
  
  
  (method (on-delete-circle self evt)
    (delay-event
      (lambda ()
        (with-task-mutex
          (lambda ()
            (let ((client (current-client))
                  (world (current-world)))
              (let ((error (delete-group client circle-name)))
                (if error
                    (display-error world error)
                  (close self))))))))))


;;;
;;;; Zoom Edit
;;;


(class Zoom-Circle-Edit extends World-Frame
  
  
  (property circle-name initialize #f accessors generate)
  
  
  (form
    (<install>
      (<caption~>                                title: "Edit Zoom Circle")
      (<content~>                                layout-type: center
        (<View>                                  size: {Dimension 490 215}
          (<Option-Label>                        title: "Description" position: {Point 0 5} size: {Dimension 100 15})
          (<Description-Edit> name: description  position: {Point 85 0} size: {Dimension 400 104} border-type: solid border-color: {Color Dark-Gray})
          (<Option-Label>                        title: "Zoom Link" position: {Point 0 130} size: {Dimension 100 15})
          (<Link-View>        name: link-view    position: {Point 85 125} size: {Dimension 400 24} border-type: solid border-color: {Color Dark-Gray} invalid-view: link-invalid)
          (<Name-Invalid>     name: link-invalid position: {Point 85 151} size: {Dimension 400 16} font: {Font Label-User point-size: 12.5})
          (<Push-Button>                         title: "Delete Circle" position: {Point 170 190} size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: {Event-Handler :form on-delete-zoom})))))
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! circle-name (getf rest circle-name:)))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (set-wrap? (get-model (locate self '(description text))) #t)
    (let ((description (circle-property (current-client) circle-name 'description))
          (link (circle-property (current-client) circle-name 'link)))
      (when description
        (set-string-content (locate self '(description text)) description))
      (set-string-content (locate self '(link-view text)) link)))
  
  
  (method override (user-close self)
    (let ((description-view (locate self 'description)))
      (let ((text (locate description-view 'text)))
        (let ((content (get-string-content text)))
          (let ((description (if (empty-string? content) #f content)))
            (change-circle-property (current-client) circle-name 'description description)
            (let ((group (find-group-info circle-name)))
              (when group
                (set-description group description)))))))
    (let ((link-view (locate self 'link-view)))
      (unless (name-invalid link-view)
        (let ((text (locate link-view 'text)))
          (let ((link (trim-whitespace (get-string-content text))))
            (change-circle-property (current-client) circle-name 'link link)))))
    (nextmethod self))
  
  
  (method (on-delete-zoom self evt)
    (delay-event
      (lambda ()
        (with-task-mutex
          (lambda ()
            (let ((client (current-client))
                  (world (current-world)))
              (let ((error (delete-group client circle-name)))
                (if error
                    (display-error world error)
                  (close self)))))))))))
