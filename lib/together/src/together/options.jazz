;;;============
;;;  Together
;;;============
;;;
;;;; User Options
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.options jazz


(import (jazz.component)
        (jazz.graphic)
        (jazz.markup)
        (jazz.screen)
        (jazz.settings)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.tree)
        (jazz.view)
        (world)
        (world.audio)
        (world.circle)
        (world.client.tier)
        (world.context)
        (world.interface.frame)
        (world.interface.mainbar)
        (world.interface.options)
        (world.profile)
        (world.settings)
        (world.video))


;;;
;;;; Audio
;;;


(class Audio-Options extends Option-Frame
  
  
  (form
    (<install>
      (<caption~>           title: "Audio Options")
      (<content~>                                         layout-type: center
        (<View>             name: container               size: {Dimension 390 170}
          (<Option-Label>   title: "Microphone"           position: {Point 0 1})
          (<Combo-Option>                                 position: {Point 190 0} size: {Dimension 200 19} option: microphone)
          (<Option-Label>   title: "Push to talk"         position: {Point 20 30} size: {Dimension 200 15})
          (<Boolean-Option>                               position: {Point 0 30} option: push-to-talk)
          (<Option-Label>   title: "Aggressive Denoising" position: {Point 20 60} size: {Dimension 200 15})
          (<Boolean-Option>                               position: {Point 0 60} option: aggressive-denoising)
          (<Option-Label>   name: directsound-label title: "Use DirectSound (try if microphone is not working)"      position: {Point 20 90} size: {Dimension 300 15} visible?: #f)
          (<Boolean-Option> name: directsound-option                          position: {Point 0 90} visible?: #f option: directsound)
          (<Option-Label>   name: speaker-label title: "Speaker"              position: {Point 0 141} size: {Dimension 200 15})
          (<Combo-Option>   name: speaker-option                              position: {Point 190 140} size: {Dimension 200 19} option: speaker)))))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (cond-expand
      (windows
       (set-visible? (locate self 'directsound-label) #t)
       (set-visible? (locate self 'directsound-option) #t))
      (else
       (set-size (locate self 'container) {Dimension 390 140})
       (set-position (locate self 'speaker-label) {Point 0 121})
       (set-position (locate self 'speaker-option) {Point 190 120}))))
  
  
  (method override (read-option self option)
    (case option
      ((microphone)
       (let ((providers (microphone-providers)))
         (if (null? providers)
             (values (list (list #f "<No microphone found>")) #f)
           (let ((effective-provider (effective-microphone-provider providers)))
             (let ((choices (map (lambda (provider)
                                   (list (get-identifier provider) (get-name provider)))
                                 providers))
                   (identifier (get-identifier effective-provider)))
               (let ((choice (assoc identifier choices)))
                 (if choice
                     (values choices (car choice))
                   (values choices #f))))))))
      ((push-to-talk)
       (push-to-talk?))
      ((aggressive-denoising)
       audio-rndenoise?)
      ((directsound)
       (world-setting 'world.microphone-directsound? #f))
      ((speaker)
       (let ((providers (speaker-providers)))
         (if (null? providers)
             (values (list (list #f "<No speaker found>")) #f)
           (let ((effective-provider (effective-speaker-provider providers)))
             (let ((choices (map (lambda (provider)
                                   (list (get-identifier provider) (get-name provider)))
                                 providers))
                   (identifier (get-identifier effective-provider)))
               (let ((choice (assoc identifier choices)))
                 (if choice
                     (values choices (car choice))
                   (values choices #f))))))))))
  
  
  (method override (write-option self option value title)
    (case option
      ((microphone)
       (update-microphone-identifier (current-client) title value))
      ((push-to-talk)
       (change-push-to-talk value))
      ((aggressive-denoising)
       (change-rndenoise (current-client) value))
      ((directsound)
       (set-microphone-directsound? value)
       (set-setting options-settings 'world.microphone-directsound? value)
       (save-content options-settings))
      ((speaker)
       (update-speaker-identifier (current-client) title value)))))


;;;
;;;; Video
;;;


(class Video-Options extends Option-Frame
  
  
  (form
    (<install>
      (<caption~>                                 title: "Video Options")
      (<content~>                                                        layout-type: center
        (<View>                                                          size: {Dimension 390 174}
          (<Option-Label>                         title: "Quality"       position: {Point 0 1})
          (<Combo-Option>                                                position: {Point 140 0} size: {Dimension 250 19} option: quality)
          (<Option-Label>                         title: "Camera"        position: {Point 0 51})
          (<Combo-Option>                                                position: {Point 140 50} size: {Dimension 250 19} option: camera)
          (<Option-Label>   name: retina-label    title: "Retina"        position: {Point 20 100} visible?: #f)
          (<Boolean-Option> name: retina-option                          position: {Point 0 100} size: {Dimension 250 19} visible?: #f option: retina)
          (<Option-Label>   name: scale-label     title: "Scale"         position: {Point 0 101} visible?: #f)
          (<Combo-Option>   name: scale-option                           position: {Point 140 100} size: {Dimension 250 19} visible?: #f option: scale)
          (<Option-Label>   name: hardware-label  title: "Hardware Acceleration (experimental)" position: {Point 20 150} size: {Dimension 300 16} visible?: #f)
          (<Boolean-Option> name: hardware-option                        position: {Point 0 150} size: {Dimension 250 19} visible?: #f option: hardware)))))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (reset-install/restart)
    (cond-expand
      (mac
       (when (main-screen-retina?)
         (set-visible? (locate self 'retina-label) #t)
         (set-visible? (locate self 'retina-option) #t))
       (set-visible? (locate self 'hardware-label) #t)
       (set-visible? (locate self 'hardware-option) #t))
      (windows
       (set-visible? (locate self 'scale-label) #t)
       (set-visible? (locate self 'scale-option) #t))
      (else)))
  
  
  (method override (destroy self)
    (warn-if-restart-needed "Together")
    (nextmethod self))
  
  
  (method override (read-option self option)
    (case option
      ((quality)
       (let ((profile-list (case (or explicit-base-profile (find-setting 'caps.profile.base))
                             ((full) '(full high standard medium low))
                             ((high) '(high standard medium low))
                             ((standard) '(standard medium low))
                             ((medium) '(medium low))
                             ((low) '(low)))))
         (let ((choices (map (lambda (profile)
                               (list profile (capitalize (symbol->string profile))))
                             profile-list))
               (choice user-base-profile))
           (values choices choice))))
      ((camera)
       (let ((providers (camera-providers)))
         (if (null? providers)
             (values (list (list #f "<No camera found>")) #f)
           (let ((effective-provider (effective-camera-provider providers)))
             (let ((choices (map (lambda (provider)
                                   (list (get-identifier provider) (get-name provider)))
                                 providers))
                   (identifier (get-identifier effective-provider)))
               (let ((choice (or (assoc identifier choices) (car choices))))
                 (values choices (car choice))))))))
      ((retina)
       (world-setting 'world.application-retina? #f))
      ((scale)
       (let ((choices (list (list 1. "100%")
                            (list 1.25 "125%")
                            (list 1.5 "150%")
                            (list 1.75 "175%")
                            (list 2. "200%")))
             (choice (world-setting 'world.application-scale 1.)))
         (values choices choice)))
      ((hardware)
       (world-setting 'world.video-hardware? #f))))
  
  
  (method override (write-option self option value title)
    (case option
      ((quality)
       @work-needed-to-correctly-handle-save-profile
       (set-setting options-settings 'world.base-profile value)
       @work-needed-to-correctly-handle-save-profile
       (save-content options-settings)
       (set-user-base-profile value)
       (effective-base-profile-update)
       (update-profile-label))
      ((camera)
       (update-camera-identifier (current-client) title value))
      ((retina)
       (set-setting options-settings 'world.application-retina? value)
       (save-content options-settings)
       (need-restart))
      ((scale)
       (set-setting options-settings 'world.application-scale value)
       (save-content options-settings)
       (need-restart))
      ((hardware)
       (set-video-hardware? value)
       (set-setting options-settings 'world.video-hardware? value)
       (save-content options-settings)))))


(definition protected (update-profile-label)
  (define (update-label title color)
    (let ((label (child mainbar 'profile)))
      (set-title label title)
      (set-color label color)))
  
  (case user-base-profile
    ((full)     (update-label "Full"     {Color Pastel-Purple}))
    ((high)     (update-label "High"     {Color Pastel-Blue}))
    ((standard) (update-label "Standard" {Color Pastel-Green}))
    ((medium)   (update-label "Medium"   {Color Pastel-Yellow}))
    ((low)      (update-label "Low"      {Color Pastel-Orange}))))


;;;
;;;; Circle
;;;


(class Circle-Options extends Option-Frame
  
  
  (property circle-name initialize #f accessors generate)
  
  
  (form
    (<install>
      (<caption~>           title: "Circle Options")
      (<content~>                                        layout-type: center
        (<View>                                          size: {Dimension 390 140}
          (<Option-Label>   title: "Join by invite only" position: {Point 20  0} size: {Dimension 200 15})
          (<Boolean-Option>                              position: {Point  0  0} option: join-by-invite-only)
          (<Option-Label>   title: "Persistent"          position: {Point 20   50} size: {Dimension 200 15})
          (<Boolean-Option>                              position: {Point  0   50} option: persistent)
          (<Option-Label>   title: "Require camera"      position: {Point 20 100} size: {Dimension 200 15})
          (<Boolean-Option>                              position: {Point  0 100} option: require-camera)))))
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! circle-name (getf rest circle-name:)))
  
  
  (method override (read-option self option)
    (case option
      ((join-by-invite-only)
       (circle-property (current-client) circle-name 'invite-only?))
      ((persistent)
       (circle-property (current-client) circle-name 'persistent?))
      ((require-camera)
       (circle-property (current-client) circle-name 'require-camera?))))
  
  
  (method override (write-option self option value title)
    (case option
      ((join-by-invite-only)
       (change-circle-property (current-client) circle-name 'invite-only? value))
      ((persistent)
       (change-circle-property (current-client) circle-name 'persistent? value))
      ((require-camera)
       (change-circle-property (current-client) circle-name 'require-camera? value))))))
