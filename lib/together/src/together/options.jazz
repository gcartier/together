;;;============
;;;  Together
;;;============
;;;
;;;; User Options
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.options jazz


(import (jazz.component)
        (jazz.graphic)
        (jazz.markup)
        (jazz.screen)
        (jazz.settings)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.tree)
        (jazz.view)
        (world)
        (world.audio)
        (world.circle)
        (world.client.tier)
        (world.context)
        (world.interface.frame)
        (world.interface.mainbar)
        (world.interface.options)
        (world.profile)
        (world.settings)
        (world.video))


;;;
;;;; Audio
;;;


(class Audio-Options extends Option-Frame
  
  
  (form
    (<install>
      (<caption~>           title: "Audio Options")
      (<content~>                                         layout-type: center
        (<View>                                           size: {Dimension 390 140}
          (<Option-Label>   title: "Microphone"           position: {Point 0 1})
          (<Combo-Option>                                 position: {Point 190 0} size: {Dimension 200 19} option: microphone)
          (<Option-Label>   title: "Push to talk"         position: {Point 20 30} size: {Dimension 200 15})
          (<Boolean-Option>                               position: {Point 0 30} option: push-to-talk)
          (<Option-Label>   title: "Aggressive Denoising" position: {Point 20 60} size: {Dimension 200 15})
          (<Boolean-Option>                               position: {Point 0 60} option: aggressive-denoising)
          (<Option-Label>   title: "Speaker"              position: {Point 0 121} size: {Dimension 200 15})
          (<Combo-Option>                                 position: {Point 190 120} size: {Dimension 200 19} option: speaker)))))
  
  
  (method override (read-option self option)
    (case option
      ((microphone)
       (with-microphone-devices
         (lambda (devices)
           (if (null? devices)
               (values (list (list #f "<No microphone found>")) #f)
             (let ((choices (cons (list #f "System Default")
                                  (map (lambda (device)
                                         (list (microphone-device-identifier device) (gst_device_get_display_name device)))
                                       devices)))
                   (identifier (read-microphone-identifier devices)))
               (let ((choice (assoc identifier choices)))
                 (if choice
                     (values choices (car choice))
                   (values choices #f))))))))
      ((push-to-talk)
       (push-to-talk?))
      ((aggressive-denoising)
       audio-rndenoise?)
      ((speaker)
       (with-speaker-devices
         (lambda (devices)
           (if (null? devices)
               (values (list (list #f "<No speaker found>")) #f)
             (let ((choices (cons (list #f "System Default")
                                  (map (lambda (device)
                                         (list (speaker-device-identifier device) (gst_device_get_display_name device)))
                                       devices)))
                   (identifier (read-speaker-identifier devices)))
               (let ((choice (assoc identifier choices)))
                 (if choice
                     (values choices (car choice))
                   (values choices #f))))))))))
  
  
  (method override (write-option self option value title)
    (case option
      ((microphone)
       (update-microphone-identifier (current-client) title value))
      ((push-to-talk)
       (change-push-to-talk value))
      ((aggressive-denoising)
       (change-rndenoise (current-client) value))
      ((speaker)
       (update-speaker-identifier (current-client) title value)))))


;;;
;;;; Video
;;;


(class Video-Options extends Option-Frame
  
  
  (form
    (<install>
      (<caption~>                               title: "Video Options")
      (<content~>                                                      layout-type: center
        (<View>                                                        size: {Dimension 390 134}
          (<Option-Label>                       title: "Quality"       position: {Point 0 1})
          (<Combo-Option>                                              position: {Point 140 0} size: {Dimension 250 19} option: quality)
          (<Option-Label>                       title: "Camera"        position: {Point 0 51})
          (<Combo-Option>                                              position: {Point 140 50} size: {Dimension 250 19} option: camera)
          (<Option-Label>   name: retina-label  title: "Use Retina"    position: {Point 20 101} visible?: #f)
          (<Boolean-Option> name: retina-option                        position: {Point 0 100} size: {Dimension 250 19} visible?: #f option: retina)))))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (reset-install/restart)
    (cond-expand
      (mac
       (when (main-screen-retina?)
         (set-visible? (locate self 'retina-label) #t)
         (set-visible? (locate self 'retina-option) #t)))
      (else)))
  
  
  (method override (destroy self)
    (warn-if-restart-needed "Together")
    (nextmethod self))
  
  
  (method override (read-option self option)
    (case option
      ((quality)
       (let ((profile-list (case (find-setting 'caps.profile.base)
                             ((full) '(full high standard medium low))
                             ((high) '(high standard medium low))
                             ((standard) '(standard medium low))
                             ((medium) '(medium low))
                             ((low) '(low)))))
         (let ((choices (map (lambda (profile)
                               (list profile (capitalize (symbol->string profile))))
                             profile-list))
               (choice user-base-profile))
           (values choices choice))))
      ((camera)
       (with-camera-devices
         (lambda (devices)
           (if (null? devices)
               (values (list (list #f "<No camera found>")) #f)
             (let ((choices (cons (list #f "System Default")
                                  (map (lambda (device)
                                         (list (camera-device-identifier device) (gst_device_get_display_name device)))
                                       devices)))
                   (identifier (read-camera-identifier devices)))
               (let ((choice (assoc identifier choices)))
                 (if choice
                     (values choices (car choice))
                   (values choices #f))))))))
      ((retina)
       (world-setting 'world.retina? #t))))
  
  
  (method override (write-option self option value title)
    (case option
      ((quality)
       @work-needed-to-correctly-handle-save-profile
       (set-setting options-settings 'world.base-profile value)
       @work-needed-to-correctly-handle-save-profile
       (save-content options-settings)
       (set-user-base-profile value)
       (effective-base-profile-update)
       (update-profile-label))
      ((camera)
       (update-camera-identifier (current-client) title value))
      ((retina)
       (set-setting options-settings 'world.retina? value)
       (save-content options-settings)
       (need-restart)))))


(definition protected (update-profile-label)
  (define (update-label title color)
    (let ((label (child mainbar 'profile)))
      (set-title label title)
      (set-color label color)))
  
  (case user-base-profile
    ((full)     (update-label "Full"     {Color Pastel-Purple}))
    ((high)     (update-label "High"     {Color Pastel-Blue}))
    ((standard) (update-label "Standard" {Color Pastel-Green}))
    ((medium)   (update-label "Medium"   {Color Pastel-Yellow}))
    ((low)      (update-label "Low"      {Color Pastel-Orange})))))
