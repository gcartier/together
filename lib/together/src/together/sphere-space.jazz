;;;============
;;;  Together
;;;============
;;;
;;;; Sphere Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.sphere-space jazz


(import (jazz.component)
        (jazz.graphic)
        (jazz.io)
        (jazz.outline)
        (jazz.tree)
        (jazz.view)
        (world)
        (world.audio)
        (world.client.udp)
        (world.context)
        (world.stream)
        (world.streamer)
        (world.streaming)
        (world.udp)
        (world.video)
        (together)
        (together.space))


(class Sphere-Space extends Together-Space
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method protected virtual (show-interface self hide-interface?)
    )
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-people self evt)
    (let ((interface (current-interface))
          (world (current-world)))
      (toggle-visible? (child interface 'people-label))
      (toggle-visible? (child interface 'people))
      (set-visible? (child interface 'streams-label) #f)
      (set-visible? (child interface 'streams) #f)
      (update-parameter world 'people)))
  
  
  (method (on-toggle-streams self evt)
    (let ((interface (current-interface))
          (world (current-world)))
      (set-visible? (child interface 'people-label) #f)
      (set-visible? (child interface 'people) #f)
      (toggle-visible? (child interface 'streams-label))
      (toggle-visible? (child interface 'streams))
      (when (get-visible? (child interface 'streams))
        (view-streams self))
      (update-parameter world 'streams)))
  
  
  (method (on-toggle-chat self evt)
    (toggle-chat self))
  
  
  (method protected virtual (toggle-chat self)
    )
  
  
  ;;;
  ;;;; Streams
  ;;;
  
  
  (method (streams-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'streams) '(streams streams))))
  
  
  (method (view-streams self)
    (let ((tier (current-tier))
          (me (current-me)))
      (let ((udp-client (get-udp-client tier))
            (tree (streams-tree self)))
        (remove-every-row tree)
        (with-update-locked tree
          (lambda ()
            (let ((audio-extensions (streaming-audio-extensions))
                  (video-extensions (streaming-video-extensions)))
              (define (determine-kind files)
                (let ((count (length files)))
                  (cond ((and (= count 1)
                              (member? (get-extension (car files)) '("jpg" "jpeg" "png") test: extension=?))
                         'image)
                        ((and (= count 1)
                              (member? (get-extension (car files)) '("txt") test: extension=?))
                         'text)
                        (else
                         (let ((audio? (some? (lambda (file)
                                                (member? (get-extension file) audio-extensions test: extension=?))
                                              files))
                               (video? (some? (lambda (file)
                                                (member? (get-extension file) video-extensions test: extension=?))
                                              files)))
                           (cond ((and audio? video?)
                                  'video)
                                 (audio?
                                  'audio)
                                 (video?
                                  'video)
                                 (else
                                  #f)))))))
              
              (define (iterate dir (father #f))
                (let ((files (collect-files dir
                               (lambda (file)
                                 (not (member? (get-name file) '(".DS_Store") test: filename=?))))))
                  (for-each (lambda (partition)
                              (bind (base . files) partition
                                (let ((kind (determine-kind files)))
                                  (when kind
                                    (let ((location (and kind (join (subpath {Directory Documents} (car files)) "/"))))
                                      (let ((location (if (eq? kind 'image)
                                                          location
                                                        (filename-spine location))))
                                        (let ((streaming (find-streaming udp-client location)))
                                          (let ((title (streaming-title self streaming base))
                                                (color (streaming-color self streaming)))
                                            (add-row tree
                                                     father: father
                                                     children: (list (new Tree-Node title: title font: {Font Label-User} color: color))
                                                     user-data: (and kind (list kind base location)))))))))))
                            (partition files key: get-base test: filename=?)))
                (iterate-directory dir
                  (lambda (subdir)
                    (let ((name (get-name subdir)))
                      (let ((father (add-row tree
                                             father: father
                                             state: 'expanded
                                             children: (list (new Tree-Node title: name font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                        (iterate subdir father))))
                  files?: #f
                  directories?: #t
                  recursive?: #f))
              
              (iterate-stream-directories iterate)))))))
  
  
  (method (streaming-title self streaming base)
    (if streaming
        (format "{a} (playing)" base)
      (format "{a}" base)))
  
  
  (method (streaming-color self streaming)
    (if streaming
        {Color World-Blue}
      {Color White}))
  
  
  (method package (streams-action self)
    (streams-action-selected self))
  
  
  (method (streams-action-selected self)
    (let ((tier (current-tier)))
      (let ((udp-client (get-udp-client tier))
            (tree (streams-tree self)))
        (let ((row (get-selected-row tree)))
          (when row
            (let ((data (get-user-data row)))
              (when data
                (bind (kind base location) data
                  (define (update-cell streaming)
                    (let ((title (streaming-title self streaming base))
                          (color (streaming-color self streaming))
                          (line (row->line tree row))
                          (col 0))
                      (let ((cell (new Cell line col)))
                        (let ((data (get-cell-data tree cell)))
                          (set-title data title)
                          (set-color data color))
                        (invalidate-cell tree cell))))
                  
                  (let ((streaming (find-streaming udp-client location)))
                    (if streaming
                        (begin
                          (close-send-stream udp-client streaming)
                          (update-cell #f))
                      (case kind
                        ((text)
                         (let ((name (filename-name location)))
                           (let ((stream (stream-text location name)))
                             (update-cell stream)
                             (delay-streaming
                               (lambda ()
                                 (play stream))))))
                        ((image)
                         (let ((name (filename-name location)))
                           (let ((stream (stream-image location name)))
                             (update-cell stream)
                             (delay-streaming
                               (lambda ()
                                 (play stream))))))
                        ((audio)
                         (let ((name (filename-name location)))
                           (let ((stream (stream-audio location name)))
                             (update-cell stream)
                             (delay-streaming
                               (lambda ()
                                 (play stream))))))
                        ((video)
                         (let ((name (filename-name location))
                               (audio-file? (exists? (new-file {Directory Documents} (add-extension location (audio-profile-extension))))))
                           (let ((stream (stream-video location name audio?: (and audio-file? (not stream-silent?)))))
                             (update-cell stream)
                             (delay-streaming
                               (lambda ()
                                 (play stream)))))))))))))))))
  
  
  (method package (streams-label-action self)
    )))
