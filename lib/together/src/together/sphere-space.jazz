;;;============
;;;  Together
;;;============
;;;
;;;; Sphere Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.sphere-space jazz


(import (jazz.component)
        (jazz.graphic)
        (jazz.io)
        (jazz.outline)
        (jazz.tree)
        (jazz.view)
        (world)
        (world.audio)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.context)
        (world.live)
        (world.live.streaming)
        (world.preprocess)
        (world.profile)
        (world.settings)
        (world.space)
        (world.stream)
        (world.streamer)
        (world.streaming)
        (world.task)
        (world.udp)
        (world.video)
        (together)
        (together.autoload))


(definition protected preprocess-denoise?
  (world-setting 'together.preprocess-denoise? #f))

(definition protected preprocess-voice?
  (world-setting 'together.preprocess-voice? #f))


(class Sphere-Space extends Space
  
  
  (slot showing-music? initialize #f getter generate)
  (slot music-stream   initialize #f getter generate)
  (slot music-data     initialize #f getter generate)
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (update-autotrack world)))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method package virtual (show-interface self hide-interface?)
    )
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-people self evt)
    (toggle-people self))
  
  
  (method package (toggle-people self)
    (let ((interface (current-interface))
          (world (current-world)))
      (toggle-visible? (child interface 'people-label))
      (toggle-visible? (child interface 'people))
      (set-visible? (child interface 'streams-label) #f)
      (set-visible? (child interface 'streams) #f)
      (update-parameter world 'people)
      (update-parameter world 'streams)))
  
  
  (method (on-toggle-streams self evt)
    (let ((interface (current-interface)))
      (let ((force-visible? showing-music?))
        (set! showing-music? #f)
        (set-title (child interface 'streams-label) "Streams")
        (toggle-streams self force-visible?))))
  
  
  (method (on-toggle-music self evt)
    (let ((interface (current-interface)))
      (let ((force-visible? (not showing-music?)))
        (set! showing-music? #t)
        (set-title (child interface 'streams-label) "Music")
        (toggle-streams self force-visible?))))
  
  
  (method package (toggle-streams self force-visible?)
    (let ((interface (current-interface))
          (world (current-world)))
      (set-visible? (child interface 'people-label) #f)
      (set-visible? (child interface 'people) #f)
      (cond (force-visible?
             (set-visible? (child interface 'streams-label) #t)
             (set-visible? (child interface 'streams) #t))
            (else
             (toggle-visible? (child interface 'streams-label))
             (toggle-visible? (child interface 'streams))))
      (when (get-visible? (child interface 'streams))
        (view-streams self))
      (update-parameter world 'people)
      (update-parameter world 'streams)))
  
  
  (method (on-toggle-chat self evt)
    (toggle-chat self))
  
  
  (method protected virtual (toggle-chat self)
    )
  
  
  (method (on-command-message self evt)
    (chat-message (together:current-together)))
  
  
  (method (on-command-slash self evt)
    (chat-slash (together:current-together)))
  
  
  ;;;
  ;;;; Streams
  ;;;
  
  
  (method (streams-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'streams) '(streams streams))))
  
  
  (method (view-streams self)
    (let ((tier (current-tier))
          (me (current-me)))
      (let ((udp-client (get-udp-client tier))
            (tree (streams-tree self)))
        (remove-every-row tree)
        (with-update-locked tree
          (lambda ()
            (let ((audio-extensions (streaming-audio-extensions))
                  (video-profiles (streaming-video-profiles)))
              (define (iterate dir (father #f))
                (let ((files (collect-files dir
                               (lambda (file)
                                 (not (member? (get-name file) '(".DS_Store") test: filename=?))))))
                  (for-each (lambda (partition)
                              (bind (base . files) partition
                                (receive (kind location files profiles title color) (streaming-information udp-client base files audio-extensions video-profiles preprocess-extensions)
                                  (when kind
                                    (unless (and showing-music? (eq? kind 'image))
                                      (add-row tree
                                               father: father
                                               children: (list (new Tree-Node title: title font: {Font Label-User} color: color))
                                               user-data: (list kind base location files profiles)))))))
                            (partition files key: get-base test: filename=?)))
                (iterate-directory dir
                  add
                  files?: #f
                  directories?: #t
                  recursive?: #f))
              
              (define (add dir)
                (when (exists? dir)
                  (let ((name (get-name dir)))
                    (let ((father (add-row tree
                                           state: 'expanded
                                           children: (list (new Tree-Node title: name font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                      (iterate dir father)))))
              
              (if showing-music?
                  (iterate {Directory Documents "music"})
                (iterate-stream-directories iterate)
                (add {Directory Documents "screenshots"}))))))))
  
  
  (method package (streams-action self)
    (streams-action-selected self))
  
  
  (method (streams-action-selected self)
    (let ((tier (current-tier)))
      (let ((udp-client (get-udp-client tier))
            (tree (streams-tree self)))
        (let ((row (get-selected-row tree)))
          (when row
            (let (again)
              (let ((data (get-user-data row)))
                (when data
                  (bind (kind base location files profiles) data
                    (define (refresh streaming dir base)
                      (let ((audio-extensions (streaming-audio-extensions))
                            (video-profiles (streaming-video-profiles))
                            (files (collect-files dir
                                     (lambda (file)
                                       (filename=? (get-base file) base)))))
                        (receive (kind location files profiles title color) (streaming-information udp-client base files audio-extensions video-profiles preprocess-extensions)
                          (let ((title (streaming-title streaming kind base profiles))
                                (color (streaming-color streaming kind))
                                (line (row->line tree row))
                                (col 0))
                            (set-user-data row (and kind (list kind base location files profiles)))
                            (let ((cell (new Cell line col)))
                              (let ((data (get-cell-data tree cell)))
                                (set-title data title)
                                (set-color data color))
                              (invalidate-cell tree cell)))
                          kind)))
                    
                    (define (update streaming)
                      (update-data streaming data row))
                    
                    (define (update-data streaming data row)
                      (bind (kind base location files profiles) data
                        (let ((title (streaming-title streaming kind base profiles))
                              (color (streaming-color streaming kind))
                              (line (row->line tree row))
                              (col 0))
                          (let ((cell (new Cell line col)))
                            (let ((data (get-cell-data tree cell)))
                              (set-title data title)
                              (set-color data color))
                            (invalidate-cell tree cell)))))
                    
                    (define (update-row streaming data)
                      (bind (kind base location files profiles) data
                        (let ((row (user-data-row tree data test: (lambda (x y)
                                                                    (and y
                                                                         (equal? (third x) (third y)))))))
                          (when row
                            (update-data streaming data row)))))
                    
                    (define (close stream)
                      (when showing-music?
                        (stop-live-music stream))
                      (close-send-stream udp-client stream)
                      (update #f))
                    
                    (define (reset-music)
                      (when showing-music?
                        (set! music-stream #f)
                        (set! music-data #f)))
                    
                    (define (prepare-music)
                      (when showing-music?
                        (when music-stream
                          (update-row #f music-data)
                          (close music-stream)
                          (reset-music))))
                    
                    (define (remember-music stream)
                      (when showing-music?
                        (set! music-stream stream)
                        (set! music-data data)))
                    
                    (define (replace-live)
                      (when showing-music?
                        (replace-live-music)))
                    
                    (let ((streaming (find-streaming udp-client location)))
                      (if streaming
                          (begin
                            (close streaming)
                            (reset-music))
                        ;; guard against filesystem changes
                        (if (not (every? exists? files))
                            (let ((file (car files)))
                              (refresh streaming (get-parent file) (get-base file))
                              (again))
                          (case kind
                            ((text)
                             (let ((name (unicode->ascii (filename-name location))))
                               (let ((stream (stream-text location name)))
                                 (update stream)
                                 (delay-stream stream))))
                            ((image)
                             (let ((name (unicode->ascii (filename-name location))))
                               (let ((stream (stream-image location name)))
                                 (update stream)
                                 (delay-stream stream))))
                            ((audio)
                             (prepare-music)
                             (let ((name (unicode->ascii (filename-name location))))
                               (let ((stream (stream-audio location name music?: showing-music?)))
                                 (update stream)
                                 (delay-stream stream)
                                 (remember-music stream)
                                 (replace-live))))
                            ((video)
                             (prepare-music)
                             (let ((name (unicode->ascii (filename-name location)))
                                   (audio-file? (exists? (new-file {Directory Documents} (add-extension location (audio-profile-extension))))))
                               (let ((stream (stream-video location name audio?: audio-file? music?: showing-music?)))
                                 (update stream)
                                 (delay-stream stream)
                                 (remember-music stream)
                                 (replace-live))))
                            ((preprocess)
                             (let ((file (new-file {Directory Documents} (tokenise-filename location))))
                               (let ((preprocess-thread (preprocess-stream self file)))
                                 (let ((stream-thread
                                         (make-thread-with-stack stack-size
                                           (lambda ()
                                             (when (thread-join! preprocess-thread)
                                               (with-task-mutex
                                                 (lambda ()
                                                   (let ((kind (refresh streaming (get-parent file) (get-base file))))
                                                     (if (memq? kind '(audio video image))
                                                         (again)
                                                       (display-error (current-world) "Unable to stream")))))))
                                           'wait-preprocess)))
                                   (thread-base-priority-set! stream-thread background-priority)
                                   (thread-start! stream-thread))))))))))))))))))
  
  
  (method package (streams-label-action self)
    )
  
  
  (method (preprocess-stream self file)
    (let ((thread
            (make-thread-with-stack stack-size
              (lambda ()
                (with-task-mutex
                  (lambda ()
                    (let ((world (current-world)))
                      (working world
                        (lambda ()
                          (define (feedback stage file suffix percentage)
                            (working-progress world (format "Preprocessing {a} ({a})" (get-name file) suffix) percentage))
                          
                          (catch (Preprocess-Unsupported-Error err
                                   (display-error world (get-message err))
                                   #f)
                            (preprocess-file file prime?: #t feedback: feedback)
                            #t)))))))
              'preprocess)))
      (thread-base-priority-set! thread background-priority)
      (thread-start! thread)
      thread))))
