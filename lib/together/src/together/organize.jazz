;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Organize Circle
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.organize jazz


(import (jazz.io)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.client.tier)
        (world.circle)
        (world.context)
        (world.interface.frame)
        (world.settings))


(class Organize-Circle extends World-Frame
  
  
  (slot ordered-streams getter generate)
  
  
  (form
    (<install>                                      size: {Dimension 420 639} layout-type: border
      (<caption~>                                   title: "Organize")
      (<content~>                                   layout-type: fill
        (<Scroller-View>                            style: document hscroll?: #t vscroll?: #t
          (<content~>                               layout-type: fill
            (<Tree-Header>                          style: document shown?: #f
              (<content~>
                (<Organize-Tree>      name: streams portfolio: :images filled-column: stream draggable?: #t reorderable?: #t background: #f double-click-handler: {Event-Handler :form on-double-click} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: stream  title: "Stream" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-streams self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'streams))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click self evt)
    (let ((tree (get-tree self)))
      (let ((data (get-single-selected-data tree)))
        (reorder-streams self data 'before (car ordered-streams)))))
  
  
  (method override (on-escape-press self evt)
    (close self))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-streams self)
    (let ((tier (current-tier))
          (world (current-world)))
      (let ((tree (get-tree self))
            (group-info/exception (circle-information tier current-circle-name)))
        (if (string? group-info/exception)
            (display-error world group-info/exception)
          (bind (no require-microphone? require-camera? duration zone stone shape . streams) group-info/exception
            (remove-every-row tree)
            (with-update-locked self
              (lambda ()
                (let ((queue (new-queue)))
                  (for-each (lambda (stream)
                              (bind (sender name stream-no origin source-kind video-level channels) stream
                                (enqueue queue stream-no)
                                (let ((title (if (eq? source-kind 'live) sender name)))
                                  (add-row tree
                                           children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                           user-data: stream-no))))
                            streams)
                  (set! ordered-streams (queue-list queue))))))))))
  
  
  ;;;
  ;;;; Reorder
  ;;;
  
  
  (method package (reorder-streams self src part dst)
    (let ((tier (current-tier)))
      (when (memq? part '(before after))
        (let ((from (find ordered-streams src))
              (rank (find ordered-streams dst)))
          (let ((to (case part ((before) rank) ((after) (+ rank 1)))))
            (let ((order (remove! src (copy ordered-streams))))
              (if (< from to)
                  (set! order (insert! order (- to 1) src))
                (set! order (insert! order to src)))
              (change-circle-order tier current-circle-name order)
              (view-streams self))))))))


;;;
;;;; Tree
;;;


(class Organize-Tree extends Tree-View
  
  
  (method override (receive-drop self sender pos drag-drop)
    (let ((source (get-source drag-drop))
          (target (get-target drag-drop)))
      (let ((view (get-view source)))
        (when (eq? view self)
          (let ((src (get-single-selected-data (get-view source)))
                (dst (get-user-data (get-row target)))
                (part (get-part target)))
            (reorder-streams (find-ascendant self Organize-Circle) src part dst))))))))
