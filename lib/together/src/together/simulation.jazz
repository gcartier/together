;;;============
;;;  Together
;;;============
;;;
;;;; Replay Simulation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.simulation jazz


(import (jazz.component)
        (jazz.geometry)
        (jazz.io)
        (jazz.math)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.syntax (phase syntax))
        (jazz.zlib)
        (world)
        (world.audio)
        (world.chronology)
        (world.client.udp)
        (world.context)
        (world.event)
        (world.evolution)
        (world.interface)
        (world.interface.evolution)
        (world.interface.timeline)
        (world.math)
        (world.record (phase syntax))
        (world.server.udp)
        (world.settings)
        (world.simulate)
        (world.simulation)
        (world.stream)
        (world.syntax (phase syntax))
        (world.task)
        (world.time)
        (world.udp)
        (world.video)
        (together)
        (together.gathering)
        (together.replay))


;;;
;;;; Simulation
;;;


(definition public (extract-evolution-simulation evolution)
  (let ((world (current-world)))
    (let ((file (new-file (new-unique-directory {Directory Documents "simulations"} "simulation" separator: "") "client.sim")))
      (create-directories file)
      (save-evolution-simulation evolution file)
      (display-message world (format "Saved to {a}" (get-name (get-parent file)))))))


(definition public (save-evolution-simulation evolution file)
  (let ((last-sequence #f)
        (last-latency #f)
        (pos 0))
    (call-with-output-file (path-settings file)
      (lambda (output)
        (define (print latency drop)
          (if (= (modulo pos 10) 0)
              (format output "{r precision: 3} {r precision: 3} ; {a}s{%}" latency drop (fxround/ pos 10))
            (format output "{r precision: 3} {r precision: 3}{%}" latency drop))
          (increase! pos))
        
        (format output "#f64({%}")
        (iterate-evolution evolution
          (lambda (n)
            (let ((id (evolutionary-id evolution n)))
              (when (= id udp-id-receive-ack)
                (let ((sequence (flonum->fixnum (evolutionary-udp-receive-ack-heartbeat-sequence evolution n)))
                      (rtt (evolutionary-udp-receive-ack-round-trip evolution n)))
                  (let ((expected-sequence (and last-sequence (+ last-sequence 1)))
                        (latency rtt @wait-for-now-latency-is-all-one-side (/ rtt 2.)))
                    (cond ((or (not expected-sequence) (= sequence expected-sequence))
                           (print latency 0.))
                          (else
                           (let ((gap (- sequence expected-sequence)))
                             (loop (for n from 0 below gap)
                                   (let ((latency (interpolate n 0 gap last-latency latency)))
                                     (print latency 1.))))))
                    (set! last-sequence sequence)
                    (set! last-latency latency)))))))
        (format output ")")))))


(definition public (load-simulation file (start: start #f) (end: end #f))
  (let ((data (call-with-input-file (path-settings file)
                read)))
    (if (and (not start)
             (not end))
        data
      (let ((len (f64vector-length data)))
        (define (time->pos time)
          (let ((rank (fxround (* time 10.))))
            (let ((pos (* rank 2)))
              (between 0 pos (- len 1)))))
        
        (let ((from (if start (time->pos start) 0))
              (to (if end (time->pos end) len)))
          (subf64vector data from to))))))


(definition public (simulation-duration sim)
  (let ((count (/ (f64vector-length sim) 2)))
    (/ (cast <fl> count) 10.)))


;;;
;;;; Output
;;;


;; NOTES
;; - why volume different than gst-play & quicktime
;;   - it is the panorama method=0
;; - buffering takes care of small glitches?
;;   - if I add .01 on each buffer I hear correct audio
;;     and then a big gap
;; - I don't understand why but it would seem we need
;;   buffer-time > time of gc * 2 for imperceptible gcs
;; - duration seems totally ignored
;; - maybe it is the time to test opus

;; TODO
;; - test durations
;; - how does gstreamer play at 2x or .5x
;; - add audiorate element
;;   - can i do it simply for only 1 lib
;; - scaletempo element
;; - save audio somehow or using soundflower and look
;;   at it in-depth using audacity!?


;;;
;;;; Audio-Sink
;;;


(class Simulation-Audio-Sink extends Audio-Sink
  
  
  @w
  (method override (setup-pipeline self)
    (let ((pipeline (gst-pipeline "appsrc name=src"
                                  (and (eq? codec 'opus) "opusdec name=dec")
                                  (and (eq? codec 'vorbis) "vorbisdec name=dec")
                                  ;"audiorate"
                                  "tee name=tee"
                                  (list
                                    "tee."
                                    "queue"
                                    "osxaudiosink name=sink")
                                  @wav
                                  (list
                                    "tee."
                                    "queue"
                                    "wavenc"
                                    (format "filesink location={a}" (parse {File Settings "work" "test.wav"})))
                                  @ogg
                                  (list
                                    "tee."
                                    "queue"
                                    "vorbisenc"
                                    "oggmux"
                                    (format "filesink location={a}" (parse {File Settings "work" "test.ogg"}))))))
      (gst_object_set_name pipeline "audio.output")
      (with-unref ((appsrc (gst_bin_get_by_name pipeline "src")))
        (case codec
          ((opus)
           (gst-app-src-set-caps appsrc "audio/x-opus"
             "channel-mapping-family" 'int 0))
          ((vorbis)
           (gst-app-src-set-caps appsrc "audio/x-vorbis")))
        (g-object-set appsrc
          "is-live"     'boolean #t
          "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
          "format"      'int     GST_FORMAT_TIME)
        (gst_element_set_state pipeline GST_STATE_READY)
        (set! self.pipeline pipeline)
        (set! self.appsrc appsrc)))))


(definition (simulation-output)
  (let ((output (new Simulation-Audio-Sink codec: audio-codec)))
    (start output)
    output))


;;;
;;;; Local
;;;


(definition public (stream-local location (max #f))
  (let ((audio (current-audio)))
    (let ((file (new-file {Directory Documents "streams" "music"} (add-extension location (audio-profile-extension)))))
      (let ((reader (new Stream-Reader file)))
        (let ((time-base (new Time-Base))
              (output (simulation-output))
              (max (or max 500)))
          (let (loop (count 0))
            (let ((frame (read-frame reader)))
              (when (and frame (< count max))
                (receive (buffer dts pts duration flags) frame
                  (let ((time (current-seconds))
                        (nanodts (+ (timestamp->flonum dts) 0. @w (* count .01))))
                    (update-start time-base time nanodts)
                    (let ((sendtime (remote->local time-base nanodts)))
                      (sleep (- sendtime time))
                      (receive-audio audio output buffer dts pts duration)))
                  (loop (+ count 1))))))
          (release output)
          (close reader))))))


;;;
;;;; Audio
;;;


(definition public (simulate-audio location (name: name #f) (start: start #f) (end: end #f) (duration: duration #f) (latency: latency #f) (update-time: update-time #f) (save?: save? #t) (view?: view? #t))
  (declare (proper-tail-calls))
  (let ((world (current-world)))
    (let ((origin-no 1)
          (origin-name "Origin")
          (server-no 0)
          (server-name "_server")
          (start-time 0.)
          (receiver-no 2)
          (receiver-name "Receiver")
          (channel-no 0)
          (stream-no 0))
      (let ((metadatas (list->table (list (cons origin-no (list origin-no origin-name
                                                            (let ((channel (list channel-no udp-audio 'live #f #f #f #f audio-codec #f '())))
                                                              (let ((stream (list origin-name "Live" stream-no origin-no 'live #f (list channel))))
                                                                (list stream)))
                                                            '()
                                                            '()))
                                          (cons server-no (list server-no server-name '() '() '() start-time))
                                          (cons receiver-no (list receiver-no receiver-name
                                                              '()
                                                              (let ((channel (list channel-no udp-audio 'live #f #f #f #f audio-codec #f '())))
                                                                (let ((stream (list origin-name "Live" stream-no origin-no 'live #f (list channel))))
                                                                  (list stream)))
                                                              '()))))))
        (let ((call (simulate-udp-call metadatas)))
          (let ((origin-tier (require-tier call origin-no))
                (server-tier (require-tier call server-no))
                (receiver-tier (require-tier call receiver-no)))
            (let ((receiver-audio-channel (find-receive-channel receiver-tier channel-no)))
              (let ((receiver-audio-ring (get-process-ring receiver-audio-channel))
                    (origin-evolution (new Evolution 10000))
                    (server-evolution (new Evolution 10000))
                    (receiver-evolution (new Evolution 10000))
                    (chronology (new Chronology 10000))
                    (start-nanostamp (or start 0.))
                    (base-time #f)
                    (base-nanostamp #f)
                    (time-base (new Time-Base))
                    (end (or end (and start duration (+ start duration)))))
                (define (determine-latency nanostamp)
                  (let ((elapse (- nanostamp base-nanostamp)))
                    (if latency
                        (latency elapse)
                      0.)))
                
                (define (latencer data)
                  @convert-sent-removed-from-header
                  (with-record header
                    (let ((elapse (- (read-header-sent data) base-time)))
                      (/ (+ (sin (* elapse 8.)) 1.) 8.))))
                
                (define (writer data info drop?)
                  (parameterize ((simulation-evolution receiver-evolution))
                    (receive-media receiver-tier udp-audio data)))
                
                (set-simulator origin-tier (new UDP-Simulator writer))
                (let ((insert (new-thread
                                (lambda ()
                                  (parameterize ((simulation? #t)
                                                 (simulation-evolution origin-evolution))
                                    (let ((file (new-file {Directory Documents} (add-extension location (audio-profile-extension)))))
                                      (let ((reader (new Stream-Reader file)))
                                        (let (loop (count 0))
                                          (let ((time (current-seconds)))
                                            (let ((frame (read-frame reader)))
                                              (when frame
                                                (receive (buffer dts pts duration flags) frame
                                                  (let ((nanostamp (timestamp->flonum dts)))
                                                    (when (or (not base-nanostamp) (not end) (< (- nanostamp base-nanostamp) end))
                                                      (when (not base-time)
                                                        (set! base-time time)
                                                        (set! base-nanostamp nanostamp))
                                                      (when (or (not start) (>= (- nanostamp base-nanostamp) start))
                                                        (update-start time-base time nanostamp)
                                                        (let ((sendtime (+ (remote->local time-base nanostamp)
                                                                           (determine-latency (- nanostamp start-nanostamp)))))
                                                          (sleep (- sendtime time))
                                                          (send-media origin-tier channel-no buffer dts pts duration flags)))
                                                      (loop (+ count 1)))))))))
                                        (close reader))))
                                  ;; quicky give some time for process to finish
                                  (sleep 1.)
                                  (terminate receiver-audio-ring))
                                'insert))
                      (audio (new-thread
                               (lambda ()
                                 (let ((audio-output (simulation-output)))
                                   (parameterize ((simulation? #t)
                                                  (simulation-evolution receiver-evolution)
                                                  (simulation-audio audio-output))
                                     (let (looping (count 0))
                                       (let ((info (process-audio receiver-audio-ring)))
                                         (when (neq? info 'terminate)
                                           (give-audio receiver-audio-channel info)
                                           (looping (+ count 1)))))
                                     (sleep 1.)
                                     (release audio-output))))
                               'audio)))
                  (display-message world "Simulating..." duration: +inf.0)
                  (thread-start! insert)
                  (thread-start! audio)
                  (thread-join! insert)
                  (thread-join! audio)
                  (when save?
                    (let ((dir (save-simulation name base-time metadatas chronology origin-no server-no receiver-no origin-tier server-tier receiver-tier origin-evolution server-evolution receiver-evolution channel-no #f)))
                      (when view?
                        (view-replay-directory dir))))
                  (clear-message world))))))))))


(definition (save-simulation name base-time metadatas chronology origin-no server-no receiver-no origin-tier server-tier receiver-tier origin-evolution server-evolution receiver-evolution audio-no video-no)
  (let ((directory (timestamped-directory {Directory Documents "replays"} (if name (string-append "replay_" name) "replay"))))
    (define (save-client no client evolution)
      (define (metadata name)
        (define (send-streams)
          (streams-metadata (get-send-streams client)))
        
        (define (receive-streams)
          (streams-metadata (get-receive-streams client)))
        
        (list no name (send-streams) (receive-streams) '()))
      
      (let ((name (second (table-ref metadatas no))))
        (let ((metadata (metadata name)))
          (let ((file (new-file directory (add-extension name "replay")))
                (deflated (zlib-deflate (object->u8vector (list metadata chronology evolution) serialize))))
            (save-binary file deflated)))))
    
    (define (save-server no server evolution)
      (define (metadata name)
        (define (start-time)
          base-time)
        
        (define (server-streams)
          (streams-metadata (get-server-streams server)))
        
        (define (send-streams)
          (streams-metadata (get-send-streams server)))
        
        (list no name (server-streams) (send-streams) '() (start-time)))
      
      (let ((name (second (table-ref metadatas no))))
        (let ((metadata (metadata name)))
          (let ((file (new-file directory (add-extension name "replay")))
                (deflated (zlib-deflate (object->u8vector (list metadata chronology evolution) serialize))))
            (save-binary file deflated)))))
    
    (define (save-audio)
      (when audio-no
        (let ((kind udp-audio))
          (let ((channel (find-send-channel origin-tier audio-no)))
            (let ((ring (get-replay-ring channel)))
              (when (and ring (> (get-count ring) 0))
                (let ((file (new-file directory "Origin.replayaudio"))
                      (content (object->u8vector ring serialize)))
                  (save-binary file content))))))))
    
    (define (save-video)
      (when video-no
        (let ((kind udp-video))
          (let ((channel (find-send-channel origin-tier video-no)))
            (let ((ring (get-replay-ring channel)))
              (when (and ring (> (get-count ring) 0))
                (let ((file (new-file directory "Origin.replayvideo"))
                      (content (object->u8vector ring serialize)))
                  (save-binary file content))))))))
  
    (create-directories directory)
    (save-client origin-no origin-tier origin-evolution)
    (save-server server-no server-tier server-evolution)
    (save-client receiver-no receiver-tier receiver-evolution)
    (save-audio)
    (save-video)
    directory))


;;;
;;;; Latency
;;;


(definition public (simulate-latency name simulation-file audio-location video-location (start: start #f) (end: end #f) (speedup: speedup #f))
  (let ((together (current-together)))
    (let ((origin-no 1)
          (origin-name "Origin")
          (server-no 0)
          (server-name "_server")
          (receiver-no 2)
          (receiver-name "Receiver")
          (audio-no 0)
          (video-no 1)
          (stream-no 0))
      (define (open-audio)
        (let ((audio-file (new-file {Directory Documents} (add-extension audio-location (audio-profile-extension)))))
          (let ((audio-reader (new Stream-Reader audio-file)))
            (values audio-reader
                    (get-codec audio-reader)
                    (get-caps audio-reader)))))
      
      (define (open-video)
        (let ((video-file (new-file {Directory Documents} (add-extension video-location (video-profile-extension)))))
          (let ((video-reader (new Stream-Reader video-file)))
            (values video-reader
                    (get-level video-reader)
                    (get-resolution video-reader)
                    (get-framerate video-reader)
                    (get-bitrate video-reader)
                    (get-codec video-reader)
                    (get-caps video-reader)))))
      
      (receive (audio-reader audio-codec audio-caps) (open-audio)
        (receive (video-reader video-level video-resolution video-framerate video-bitrate video-codec video-caps) (open-video)
          (let ((metadatas (list->table (list (cons origin-no (list origin-no origin-name
                                                                (let ((audio (list audio-no udp-audio 'live #f #f #f #f audio-codec audio-caps '()))
                                                                      (video (list video-no udp-video 'live video-level video-resolution video-framerate video-bitrate video-codec video-caps '())))
                                                                  (let ((stream (list origin-name "Live" stream-no origin-no 'live #f (list audio video))))
                                                                    (list stream)))
                                                                '()
                                                                '()))
                                              (cons server-no (list server-no server-name '() '() '() 0.))
                                              (cons receiver-no (list receiver-no receiver-name
                                                                  '()
                                                                  (let ((audio (list audio-no udp-audio 'live #f #f #f #f audio-codec audio-caps '()))
                                                                        (video (list video-no udp-video 'live video-level video-resolution video-framerate video-bitrate video-codec video-caps '())))
                                                                    (let ((stream (list origin-name "Live" stream-no origin-no 'live #f (list audio video))))
                                                                      (list stream)))
                                                                  '()))))))
            (let ((call (simulate-udp-call metadatas)))
              (let ((origin-tier (require-tier call origin-no))
                    (server-tier (require-tier call server-no))
                    (receiver-tier (require-tier call receiver-no)))
                (let ((names (list->table (list (cons origin-no origin-name)
                                                (cons server-no server-name)
                                                (cons receiver-no receiver-name))))
                      (origin-evolution (new Evolution 60000))
                      (server-evolution (new Evolution 60000))
                      (receiver-evolution (new Evolution 60000))
                      (chronology (new Chronology 10000)))
                  (let ((audio-channel (find-receive-channel receiver-tier audio-no))
                        (video-channel (find-receive-channel receiver-tier video-no))
                        (simulation (load-simulation simulation-file start: start end: end))
                        (speedup (or speedup 1))
                        (base-time (current-seconds))
                        (base-timestamp (current-timestamp))
                        (late-frames '())
                        (flushed-frames '()))
                    (define (simulated-time)
                      (+ base-time (* (- (current-seconds) base-time) (cast <fl> speedup))))
                    
                    (define (simulated-timestamp)
                      (+ base-timestamp (* (- (current-timestamp) base-timestamp) speedup)))
                    
                    (define (simulated-elapse elap)
                      (/ elap speedup))
                    
                    (define (late-frame frame)
                      (set! late-frames (cons frame late-frames)))
                    
                    (define (flush-frame frame)
                      (set! flushed-frames (cons frame flushed-frames)))
                    
                    (define (register-late/flushed)
                      (let ((evolution receiver-evolution))
                        (let ((content (get-content evolution)))
                          (loop (for n from (first-position evolution) to (last-position evolution))
                                (let ((id (evolutionary-udp-id evolution n)))
                                  (when (and (= id udp-id-insert-packet)
                                             (eqv? (flonum->fixnum (evolutionary-udp-origin evolution n)) origin-no)
                                             (eqv? (flonum->fixnum (evolutionary-udp-kind evolution n)) udp-audio))
                                    (let ((frame (evolutionary-udp-frame evolution n)))
                                      (cond ((memv? frame late-frames)
                                             (let ((index (index evolution n)))
                                               (f64vector-set! content (+ index 9) -2.)))
                                            ((memv? frame flushed-frames)
                                             (let ((index (index evolution n)))
                                               (f64vector-set! content (+ index 9) -3.)))))))))))
                    
                    (let ((simulator (new UDP-Simulator
                                       (lambda (data info drop?)
                                         (receive-media receiver-tier udp-audio data))
                                       (lambda (thunk)
                                         (parameterize ((simulation? #t)
                                                        (simulation-base base-timestamp)
                                                        (simulation-time simulated-time)
                                                        (simulation-timestamp simulated-timestamp)
                                                        (simulation-elapse simulated-elapse)
                                                        (simulation-evolution receiver-evolution))
                                           (thunk)))))
                          (audio-ring (get-process-ring audio-channel))
                          (video-ring (get-process-ring video-channel)))
                      
                      (define (inserter channel-no reader)
                        (lambda ()
                          (parameterize ((simulation? #t)
                                         (simulation-base base-timestamp)
                                         (simulation-time simulated-time)
                                         (simulation-timestamp simulated-timestamp)
                                         (simulation-elapse simulated-elapse)
                                         (simulation-evolution origin-evolution))
                            (define (send-off)
                              (send-media origin-tier channel-no #f #f #f #f 0))
                            
                            (let ((base (new Time-Base))
                                  (end (or end (- (simulation-duration simulation) .5)))
                                  (last-feedback #f))
                              (let (loop (n 0))
                                (let ((frame (read-frame reader)))
                                  (if (not frame)
                                      (send-off)
                                    (receive (buffer dts pts duration flags) frame
                                      (let ((now (simulable-time)))
                                        (let ((flodts (timestamp->flonum dts))
                                              (floduration (timestamp->flonum duration)))
                                          (if (and end (> flodts end))
                                              (send-off)
                                            (when (and (<= speedup 10.) (or (not last-feedback) (> flodts (+ last-feedback 1.))))
                                              (format :terminal ">>> {r precision: 0}s{%}" flodts)
                                              (set! last-feedback flodts))
                                            (update-start base now flodts)
                                            (let ((sendtime (remote->local base flodts)))
                                              (sleep (simulated-elapse (- sendtime now)))
                                              (send-media origin-tier channel-no buffer dts pts duration flags)
                                              (loop (+ n 1))))))))))))))
                      
                      (define (audio-processor)
                        (lambda ()
                          (continuation-capture
                            (lambda (exit)
                              (let ((last-dts #f)
                                    (last-duration #f))
                                (define (simulated-off)
                                  (continuation-return exit #f))
                                
                                (define (simulated-present packet dts duration)
                                  (let ((frame (get-frame packet)))
                                    (let ((time-base (get-time-base audio-ring)))
                                      (let ((nowstamp (simulable-timestamp))
                                            (late-time (+ (remote->local time-base dts) udp-audio-mixer)))
                                        (when (>= nowstamp late-time)
                                          (late-frame frame))))))
                                
                                (define (simulated-flush packet)
                                  (let ((frame (get-frame packet)))
                                    (flush-frame frame)))
                                
                                (parameterize ((simulation? #t)
                                               (simulation-base base-timestamp)
                                               (simulation-time simulated-time)
                                               (simulation-timestamp simulated-timestamp)
                                               (simulation-elapse simulated-elapse)
                                               (simulation-evolution receiver-evolution)
                                               (simulation-off simulated-off)
                                               (simulation-present simulated-present)
                                               (simulation-flush simulated-flush))
                                  (process-audio audio-ring audio-channel exit)))))))
                      
                      (define (video-processor)
                        (lambda ()
                          (continuation-capture
                            (lambda (exit)
                              (define (simulated-off)
                                (continuation-return exit #f))
                              
                              (parameterize ((simulation? #t)
                                             (simulation-base base-timestamp)
                                             (simulation-time simulated-time)
                                             (simulation-timestamp simulated-timestamp)
                                             (simulation-elapse simulated-elapse)
                                             (simulation-evolution receiver-evolution)
                                             (simulation-off simulated-off))
                                (process-video video-ring video-channel exit))))))
                      
                      (setup-simulation simulator simulation)
                      (set-simulator origin-tier simulator)
                      (let ((audio-insert (new-thread (inserter audio-no audio-reader) 'audio-insert))
                            (video-insert (new-thread (inserter video-no video-reader) 'video-insert))
                            (audio-process (new-thread (audio-processor) 'audio-process))
                            (video-process (new-thread (video-processor) 'video-process)))
                        (thread-start! audio-insert)
                        (thread-start! audio-process)
                        (thread-start! video-insert)
                        (thread-start! video-process)
                        (thread-join! audio-insert)
                        (thread-join! audio-process)
                        (thread-join! video-insert)
                        (thread-join! video-process)
                        (close audio-reader)
                        (close video-reader)
                        (register-late/flushed)
                        (let ((dir (save-simulation name base-time metadatas chronology origin-no server-no receiver-no origin-tier server-tier receiver-tier origin-evolution server-evolution receiver-evolution audio-no video-no)))
                          (set-evolution-proportional? #t)
                          (with-task-mutex
                            (lambda ()
                              (view-replay-directory dir))))))))))))))))


;;;
;;;; Replay
;;;


(definition public (simulate-replay origin origin-audio audio-codec audio-caps origin-video video-codec video-caps origin-evolution server receiver)
  (declare (proper-tail-calls))
  (let ((world (current-world)))
    (let ((names (list->table (list (cons origin "Origin")
                                    (cons server "_server")
                                    (cons receiver "Receiver")))))
      (let ((call (simulate-udp-call names)))
        (let ((receiver-tier (require-tier call receiver)))
          (let ((receiver-audio-channel #f @convert-channels (require-receive-channel receiver-tier origin udp-audio))
                (receiver-video-channel #f @convert-channels (require-receive-channel receiver-tier origin udp-video)))
            (let ((receiver-audio-ring (get-process-ring receiver-audio-channel))
                  (receiver-video-ring (get-process-ring receiver-video-channel))
                  (sender-evolution (new Evolution 10000))
                  (server-evolution (new Evolution 10000))
                  (receiver-evolution (new Evolution 10000))
                  (base-time #f)
                  (start-time #f))
              (define (need-data kind sequence)
                (let ((ring (if (= kind udp-audio) origin-audio origin-video)))
                  (let ((packet (locate-packet ring sequence)))
                    (and packet (get-data packet)))))
              
              ;; mega quicky to test
              (define (need-data2 kind origin sequence frame part total buffer dts pts keyframe?)
                (with-record media
                  (let ((size (+ (calculate-media-size) (u8vector-length buffer))))
                    (let ((data (make-u8vector size)))
                      (write-header-kind data kind)
                      (write-header-sender data origin)
                      (write-media-sequence data sequence)
                      (write-media-frame data frame)
                      (write-media-part data part)
                      (write-media-total data total)
                      (write-media-dts data dts)
                      (write-media-pts data pts)
                      (write-media-payload data buffer)
                      (write-media-flags data (frame-flags keyframe? #f))
                      data))))
              
              (define (record-data data)
                (parameterize ((simulation-evolution sender-evolution))
                  (with-record media
                    (let ((sender (read-header-sender data))
                          (kind (read-header-kind data))
                          (sequence (read-media-sequence data))
                          (frame (read-media-frame data))
                          (part (read-media-part data))
                          (total (read-media-total data))
                          (flags (read-media-flags data))
                          (dts (read-media-dts data))
                          (pts (read-media-pts data))
                          (duration (read-media-duration data)))
                      (record-event udp-id-create-packet
                                    -1.
                                    (fixnum->flonum sender)
                                    (fixnum->flonum kind)
                                    (fixnum->flonum sequence)
                                    (fixnum->flonum frame)
                                    (barbara-keyframe-hack kind (frame-keyframe? flags))
                                    (timestamp->flonum dts)
                                    (timestamp->flonum pts))
                      (record-event udp-id-create-info
                                    -1.
                                    (fixnum->flonum sender)
                                    (fixnum->flonum kind)
                                    (fixnum->flonum sequence)
                                    (fixnum->flonum part)
                                    (fixnum->flonum total)
                                    (timestamp->flonum duration))
                      data))))
              
              (let ((insert (new-thread
                              (lambda ()
                                (parameterize ((simulation? #t)
                                               (simulation-evolution receiver-evolution))
                                  ;; keyframe mega hack
                                  (let ((first-sequence (loop (for n from (first-position origin-evolution) to (last-position origin-evolution))
                                                              (when (= (flonum->fixnum (evolutionary-udp-id origin-evolution n)) udp-id-create-packet)
                                                                (return (evolutionary-udp-sequence origin-evolution n)))))
                                        (first-frame (loop (for n from (first-position origin-evolution) to (last-position origin-evolution))
                                                           (when (= (flonum->fixnum (evolutionary-udp-id origin-evolution n)) udp-id-create-packet)
                                                             (return (evolutionary-udp-frame origin-evolution n))))))
                                    (let ((kind udp-audio)
                                          (sequence-mega-hack (- first-sequence 1))
                                          (frame-mega-hack (- first-frame 1))
                                          (part 0)
                                          (total 1)
                                          (keyframe? #t))
                                      (let ((data (need-data2 kind origin sequence-mega-hack frame-mega-hack part total #f -1 -1 keyframe?)))
                                        (record-data data)
                                        (receive-media receiver-tier udp-audio data)
                                        (increase! sequence-mega-hack)
                                        (increase! part))))
                                  
                                  (let ()
                                    (define (simulate kind sequence seconds)
                                      (let ((now (current-seconds)))
                                        (when (not start-time)
                                          (set! base-time now)
                                          (set! start-time seconds))
                                        (let ((time (+ base-time (- seconds start-time))))
                                          (sleep (- time now))
                                          (let ((data (need-data kind sequence)))
                                            (if (not data)
                                                (terminal 'not-found kind sequence)
                                              (record-data data)
                                              (receive-media receiver-tier kind data))))))
                                    
                                    (loop (for n from (first-position origin-evolution) to (last-position origin-evolution))
                                          (let ((id (flonum->fixnum (evolutionary-udp-id origin-evolution n))))
                                            (when (= id udp-id-create-packet)
                                              (let ((time (evolutionary-udp-time origin-evolution n))
                                                    (kind (flonum->fixnum (evolutionary-udp-kind origin-evolution n)))
                                                    (sequence (evolutionary-udp-sequence origin-evolution n)))
                                                ;; quicky for test
                                                (when (= kind udp-audio)
                                                  (when #t @w (or (not start-time)
                                                                  (< (- time start-time) 30.))
                                                    (simulate kind sequence (* 10. time))))))))))
                                (set-$a receiver-audio-ring)
                                (set-$v receiver-video-ring)
                                ;; quicky give some time for process to finish
                                (sleep 1.)
                                (terminate receiver-audio-ring)
                                (terminate receiver-video-ring))
                              'insert))
                    (audio (new-thread
                             (lambda ()
                               (parameterize ((simulation? #t)
                                              (simulation-evolution receiver-evolution)
                                              (simulation-audio (simulation-output)))
                                 (let (looping)
                                   (let ((info (process-audio receiver-audio-ring)))
                                     (when (neq? info 'terminate)
                                       (give-audio receiver-audio-channel info)
                                       (looping))))
                                 (release (simulation-audio))))
                             'audio))
                    @w
                    (video (new-thread
                             (lambda ()
                               (parameterize ((simulation? #t)
                                              (simulation-evolution receiver-evolution))
                                 (let (looping)
                                   (let ((info (process-video receiver-video-ring)))
                                     (when (neq? info 'terminate)
                                       (give-video receiver-video-channel info)
                                       (looping))))))
                             'video)))
                (display-message world "Simulating..." duration: +inf.0)
                (thread-start! insert)
                (thread-start! audio)
                @w
                (thread-start! video)
                (thread-join! insert)
                (thread-join! audio)
                @w
                (thread-join! video)
                @wait
                (compare-events)
                (clear-message world)
                @w
                (view-simulation origin server receiver names sender-evolution server-evolution receiver-evolution base-time)))))))))


(definition public (view-simulation origin server receiver names origin-evolution server-evolution receiver-evolution base-time)
  (let ((together (current-together)))
    (let ((metadatas (list->table (list (cons origin (list origin "Origin" (list udp-audio udp-video) (list) (list)))
                                        (cons server (list server "_server" (list) (list) (list) 0.))
                                        (cons receiver (list receiver "Receiver" (list) (list (cons origin udp-audio) (cons origin udp-video)) (list))))))
          (chronologies (list->table (list (cons origin (new Chronology 10))
                                           (cons server (new Chronology 10))
                                           (cons receiver (new Chronology 10)))))
          (evolutions (list->table (list (cons origin origin-evolution)
                                         (cons server server-evolution)
                                         (cons receiver receiver-evolution))))
          (audios #f)
          (videos #f))
      (let ((replay (new Replay "simulate" #f receiver names metadatas chronologies evolutions '() audios videos '() '() base-time)))
        (view-replay together replay)
        @convert
        (let ((root (get-root zone)))
          (let ((panel (child root 'timeline)))
            (let ((start (timeline-start panel))
                  (end (timeline-end panel)))
              (set-bounds panel start end)
              (update-span panel)
              (set-now panel start)
              (now-update panel)))))))))
