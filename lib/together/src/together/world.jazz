;;;============
;;;  Together
;;;============
;;;
;;;; Together World
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.world jazz


(import (gaea.geometry)
        (world)
        (world.autoload)
        (world.circle)
        (world.context)
        (world.foreign)
        (world.interface)
        (world.interface.sheet)
        (world.sound)
        (world.support)
        (together)
        (together.gathering)
        (together.login)
        (together.replay)
        (together.script)
        (together.zone))


(class Together-World extends World
  
  
  (method override (floor-level self)
    0.)
  
  
  (method override (prepare-sounds self)
    (nextmethod self)
    (register-sound 'message "together/message")
    (register-sound 'connect "warcraft/user/MapPing"))
  
  
  (method override (script-panel-class self)
    Together-Script-Panel)
  
  
  (method override (evolution-panel-class self)
    Evolution-Timeline-Panel)
  
  
  (method override (draw-message-offset self)
    (let ((space (current-space+)))
      (or (and space (draw-message-offset space))
          (nextmethod self))))
  
  
  (method override (draw-working-offset self)
    (let ((space (current-space+)))
      (or (and space (draw-working-offset space))
          (nextmethod self))))
  
  
  (method override (render-outputs self)
    (let ((together (current-together)))
      (when (and (client?) together (circling? together) (not (get-roaming? (current-client))))
        (nextmethod self))))
  
  
  (method override (is-circling? self)
    (let ((together (current-together)))
      (and together
           (circling? together))))
  
  
  (method override (autotrack-inhibit? self)
    (let ((together (current-together)))
      (or (nextmethod self)
          (and together
               (circling? together)
               (or (not (avatar-mode? together))
                   (not (get-autotrack-mode?)))))))
  
  
  (method override (effective-independent-camera? self)
    (let ((together (current-together)))
      (if (and together (circling? together))
          #f
        (nextmethod self))))
  
  
  (method override (check-element-action self element)
    (typecase element
      ((Circle-Stone)
       (check-circle-stone (current-together) element))
      (else
       (nextmethod self element))))))
