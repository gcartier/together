;;;============
;;;  Together
;;;============
;;;
;;;; Network Profile
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.network jazz


(import (jazz.debuggee)
        (jazz.event)
        (jazz.graphic)
        (jazz.io)
        (jazz.math)
        (jazz.time)
        (jazz.view)
        (world)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.congestion)
        (world.context)
        (world.event)
        (world.evolution)
        (world.format)
        (world.interface.evolution)
        (world.interface.timeline)
        (world.profiling)
        (world.rate)
        (world.record (phase syntax))
        (world.settings)
        (world.streaming)
        (world.task)
        (world.throttle)
        (world.udp)
        (world.video)
        (together))


(definition protected running-profile
  #f)


(class Network-Profile extends Object
  
  
  (slot panel          getter generate)
  (slot pulse-thread   getter generate)
  (slot redraw-thread  getter generate)
  (slot send-thread    getter generate)
  (slot user-data      getter generate)
  (slot user-cleanup   getter generate)
  
  
  (method override (initialize self panel pulse-thread redraw-thread send-thread user-data user-cleanup)
    (nextmethod self)
    (set! self.panel panel)
    (set! self.pulse-thread pulse-thread)
    (set! self.redraw-thread redraw-thread)
    (set! self.send-thread send-thread)
    (set! self.user-data user-data)
    (set! self.user-cleanup user-cleanup)))


(class Network-Quality extends Object
  
  
  (slot lowest-round-trip         getter generate)
  (slot deviation-round-trip      getter generate)
  (slot round-trip-base-deviation getter generate)
  (slot round-trip-deviation-rate getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! lowest-round-trip #f)
    (set! deviation-round-trip (new Average))
    (set! round-trip-base-deviation #f)
    (set! round-trip-deviation-rate -1.))
  
  
  (method protected (update self round-trip)
    (when (or (not lowest-round-trip)
              (< round-trip lowest-round-trip))
      (set! lowest-round-trip round-trip))
    (let ((deviation (- round-trip lowest-round-trip)))
      (add deviation-round-trip deviation)
      (set! round-trip-deviation-rate (if (= round-trip-deviation-rate -1.) deviation (/ (+ (* 7. round-trip-deviation-rate) deviation) 8.)))))
  
  
  (method protected (update-base self deviation)
    (set! round-trip-base-deviation deviation)
    (set! deviation-round-trip (new Average)))
  
  
  (method protected (estimate-quality self statistics deviation)
    (* (min 1. (/ round-trip-base-deviation deviation)) 100.)))


(class Network-Timeline-Panel extends Timeline-Panel
  
  
  (property key-callback  initialize #f accessors generate)
  (property plot-callback initialize #f accessors generate)
  
  
  (slot quality    getter generate)
  (slot statistics getter generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! origin (get-client-no (current-client)))
    (set! rtt-scale (* 82. graph-scale))
    (set! quality (new Network-Quality))
    (set! statistics (get-profile-statistics (current-udp))))
  
  
  (method override (timeline-start self) <fl>
    (or frozen-start
        (evolutionary-time evolution (first-position evolution))))
  
  
  (method override (timeline-end self) <fl>
    (or frozen-end
        (evolutionary-time evolution (last-position evolution))))
  
  
  (method override (key-press self evt)
    (when key-callback
      (key-callback (get-key evt))))
  
  
  (method override (plot-info self surface <Surface> cpu-duration history-duration chronology-duration evolution-duration highlight-duration nowinfo-duration duration)
    (when plot-callback
      (set-font surface {Font Label})
      (plot-callback surface))))


(definition protected (profile-run name setup sender (title: title "Profile"))
  (let ((interface (current-interface))
        (client (current-client))
        (udp (current-udp))
        (world (current-world))
        (zone (current-zone)))
    (define (feedback message (duration #f))
      (display-message world message duration: duration))
    
    (feedback (format "{a} {a} ..." title name) +inf.0)
    (start-profile client)
    (let ((pulse-period (/ 1. 10.))
          (redraw-period 1.25 @w (/ 1. 2.))
          (base (current-monotonic))
          (panel (new Network-Timeline-Panel parent: interface location: '(center 172) proportion: '((bounds -500) 120)))
          (pulse-sent #f))
      (define (wait target)
        (sleep (- (+ base target) (current-monotonic))))
      
      (set-replay? panel #t)
      (set-show-knees? panel #t)
      (set-border-color panel {Color Dark-Gray})
      (setup-sites panel (sites-metadata))
      (set-chronology panel (get-profile-chronology udp))
      (set-evolution panel (get-profile-evolution udp))
      (layout-view interface)
      (receive (user-data user-cleanup) (if setup (setup) (values #f #f))
        (let ((pulse-thread
                (new-thread
                  (lambda ()
                    (declare (proper-tail-calls))
                    (let (loop (n 0))
                      (let ((data (send-profile-pulse udp)))
                        (when pulse-sent
                          (pulse-sent data)))
                      (wait (* (cast <fl> n) pulse-period))
                      (loop (+ n 1))))
                  'pulse))
              (redraw-thread
                (new-thread
                  (lambda ()
                    (declare (proper-tail-calls))
                    (let (loop (n 0))
                      (delay-event
                        (lambda ()
                          (with-task-mutex
                            (lambda ()
                              (redraw panel)))))
                      (wait (* (cast <fl> n) redraw-period))
                      (loop (+ n 1))))
                  'redraw)))
          (let ((send-thread
                  (and sender
                       (new-thread
                         (lambda ()
                           (define (setup-pulse sent received media-received key-callback plot-callback)
                             (set! pulse-sent sent)
                             (set-profile-ack-callback udp received)
                             (set-profile-media-ack-callback udp media-received)
                             (set-key-callback panel key-callback)
                             (set-plot-callback panel plot-callback))
                           
                           (sender panel setup-pulse wait user-data)
                           (exit-thread pulse-thread)
                           (thread-join! pulse-thread)
                           (exit-thread redraw-thread)
                           (thread-join! redraw-thread)
                           (receive (server-profile client-profile) (retrieve-profiles client)
                             (set-profile-ack-callback udp #f)
                             (stop-profile client)
                             (with-task-mutex
                               (lambda ()
                                 (cond ((developer?)
                                        (feedback "{a} done" title)
                                        (close panel)
                                        (set! running-profile #f)
                                        (save-profile server-profile client-profile))
                                       (else
                                        (feedback "{a} saved" title)
                                        (close panel)
                                        (set! running-profile #f)
                                        (save-profile server-profile client-profile view-profile?: #f)))))))
                         'send))))
            (thread-base-priority-set! pulse-thread profile-priority)
            (thread-base-priority-set! redraw-thread background-priority)
            (when send-thread
              (thread-base-priority-set! send-thread profile-priority))
            (when send-thread
              (thread-start! send-thread))
            (thread-start! pulse-thread)
            (thread-start! redraw-thread)
            (acquire-focus panel)
            (set! running-profile (new Network-Profile panel pulse-thread redraw-thread send-thread user-data user-cleanup))))))))


(definition (send-bandwidth panel setup-pulse wait user-data)
  (declare (proper-tail-calls))
  (let ((client (current-client))
        (udp (current-udp)))
    (let ((start 0.)
          (recuperate 1.))
      (define (profile-upload mbps (duration: duration #f) (feedback?: feedback? #t))
        (when feedback?
          (feedback (format "Profile upload {a}Mbps..." mbps) +inf.0))
        (let ((size 1000)
              (duration (or duration 1.)))
          (let ((delay (/ (cast <fl> size) (mbps->bytes mbps))))
            (let ((iter (fxround (/ duration delay))))
              (let ((elapse (/ duration (cast <fl> iter)))
                    (data (make-u8vector size)))
                (loop (for n from 0 below iter)
                      (wait (+ start (* (cast <fl> n) elapse)))
                      (send-profile-media udp data)))))
          (increase! start duration))
        (wait (+ start recuperate))
        (increase! start recuperate))
      
      (define (profile-download mbps (feedback?: feedback? #t))
        (when feedback?
          (feedback (format "Profile download {a}Mbps..." mbps) +inf.0))
        (test-profile client 'download (list mbps))
        (wait (+ start 2.))
        (increase! start 2.))
      
      (define (profile-both mbps)
        (feedback (format "Profile both {a}Mbps..." mbps) +inf.0)
        (test-profile client 'download (list mbps))
        (profile-upload mbps feedback?: #f))
      
      (define (profile-bandwidths profile)
        (profile  1)
        (profile  2)
        (profile  4)
        (profile  8)
        (profile 16))
      
      (wait (+ start recuperate))
      (increase! start recuperate)
      (profile-bandwidths profile-upload)
      (profile-bandwidths profile-download)
      (profile-bandwidths profile-both))))


(definition (send-network panel setup-pulse wait noack-waiter)
  (declare (proper-tail-calls))
  (let ((world (current-world))
        (udp (current-udp))
        (throttle (new UDP-Throttle))
        (base-rate 1.))
    (define (ack-received data)
      (with-record profile-ack
        (let ((sent (read-profile-ack-pulse-sent data))
              (sequence (read-profile-ack-pulse-sequence data))
              (statistics (get-profile-statistics udp)))
          (received-ack throttle sent sequence statistics
            (lambda (adjustment reason)
              (record-rate adjustment)
              (display-rate))
            (lambda (profile)
              ))))
      #f)
    
    (define (display-rate)
      (display-message world (format "Rate {r precision: 2} : {r precision: 2}" base-rate base-rate @w (effective-rate throttle 0. base-rate)) duration: +inf.0))
    
    (define (record-rate adjustment)
      (parameterize ((simulation-evolution (get-profile-evolution udp)))
        (record-event udp-id-throttle-upload
                      -1.
                      -1.
                      -1.
                      adjustment
                      -1.
                      -1.
                      -1.)))
    
    (define (key-callback key)
      (define rates
        '(0. .1 .25 .5 .75 1. 2. 3. 4. 6. 8. 12. 16. 20.))
      
      (define (closest-rate)
        (bind (dist . rate) (car (sort < (map (lambda (rate)
                                                (cons (abs (- rate base-rate)) rate))
                                              rates)
                                   key: car))
          (let ((exact? (= dist 0.)))
            (values rate exact?))))
      
      (define (decrease-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (previous-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #t)
              (record-rate (- new-rate base-rate))))))
      
      (define (increase-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (next-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #f)
              (record-rate (- new-rate base-rate))))))
      
      (define (down-rate)
        (set-rate (- base-rate .1) #t)
        (record-rate -.1))
      
      (define (up-rate)
        (set-rate (+ base-rate .1) #t)
        (record-rate .1))
      
      (define (set-rate rate reset?)
        (set! base-rate rate)
        (when reset?
          (reset throttle))
        (display-rate))
      
      (case key
        ((#\a)
         (decrease-rate))
        ((#\A)
         (down-rate))
        ((#\s)
         (display-rate))
        ((#\d)
         (increase-rate))
        ((#\D)
         (up-rate))
        ((#\r)
         (set-rate 1. #t))
        ((#\0)
         (set-rate 0. #t))
        ((#\f #\space)
         (cond ((time-frozen? panel)
                (thaw-events)
                (thaw-time panel))
               (else
                (freeze-events)
                (freeze-time panel)))
         (redraw panel))
        ((#\v)
         (done-profile))))
    
    (define (plot-callback surface)
      (let ((statistics (get-profile-statistics udp)))
        (let ((round-trip-rate (get-round-trip-rate statistics))
              (upload-drop (get-upload-drop statistics))
              (upload (get-last-upload-rate statistics)))
          (when (and (/= round-trip-rate -1.) upload-drop)
            (let ((title (format "RTT: {r precision: 3}s, Drop: {r precision: 1}%, Upload: {r precision: 1}Mbps" round-trip-rate upload-drop (bytes->mbps upload))))
              (draw-text surface 5 3 title {Color Light-Gray}))))))
    
    (define (wait now target)
      (sleep (- target now)))
    
    (setup-pulse #f ack-received #f key-callback plot-callback)
    (let ((start (current-seconds))
          (payload (make-u8vector 1000)))
      (let (loop (previous start))
        (let ((end +inf.0)
              (bytes/second (cast <fl> (mbps->bytes base-rate @w (effective-rate throttle 0. base-rate))))
              (size (+ (calculate-profile-media-size payload) udp-code-size)))
          (let ((period (and (> bytes/second 0.) (/ (cast <fl> size) bytes/second))))
            (let ((now (current-seconds)))
              (when (< now end)
                (if (not period)
                    (begin
                      (wait now (+ previous .01))
                      (loop now))
                  (send-profile-media udp payload)
                  (wait now (+ previous period))
                  (loop now))))))))))


(definition (send-test panel setup-pulse wait noack-waiter)
  (declare (proper-tail-calls))
  (let ((world (current-world))
        (udp (current-udp))
        (throttle (new UDP-Throttle))
        (target-phase 2.)
        (base-rate 16.)
        (quality (get-quality panel)))
    (define (schedule-noack)
      (in noack-waiter noack-delay
        (lambda (again)
          (let ((statistics (get-profile-statistics udp)))
            (noack-received throttle statistics
              (lambda (adjustment reason)
                (report-adjustment adjustment reason))))
          (again noack-delay))))
    
    (define (ack-received data)
      (with-record profile-ack
        (let ((sent (read-profile-ack-pulse-sent data))
              (sequence (read-profile-ack-pulse-sequence data))
              (statistics (get-profile-statistics udp)))
          (let ((round-trip (- (current-seconds) sent)))
            (update quality round-trip))
          (received-ack throttle sent sequence statistics
            (lambda (adjustment reason)
              (report-adjustment adjustment reason))
            (lambda (profile)
              ))))
      (schedule-noack)
      #f)
    
    (define (report-adjustment adjustment reason)
      @w
      (when (< adjustment 0.)
        (delay-event
          (lambda ()
            (with-task-mutex
              (lambda ()
                (display-message (current-world) "Stop!!")))))))
    
    (define (display-rate)
      (display-message world (format "Rate {r precision: 2} : {r precision: 2}" base-rate (effective-rate throttle 0. base-rate)) duration: +inf.0))
    
    (define (record-rate adjustment)
      (parameterize ((simulation-evolution (get-profile-evolution udp)))
        (record-event udp-id-throttle-upload
                      -1.
                      -1.
                      -1.
                      adjustment
                      -1.
                      -1.
                      -1.)))
    
    (define (key-callback key)
      (define rates
        '(0. .1 .25 .5 .75 1. 2. 3. 4. 6. 8. 12. 16. 20.))
      
      (define (closest-rate)
        (bind (dist . rate) (car (sort < (map (lambda (rate)
                                                (cons (abs (- rate base-rate)) rate))
                                              rates)
                                   key: car))
          (let ((exact? (= dist 0.)))
            (values rate exact?))))
      
      (define (decrease-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (previous-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #t)
              (record-rate (- new-rate base-rate))))))
      
      (define (increase-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (next-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #f)
              (record-rate (- new-rate base-rate))))))
      
      (define (down-rate)
        (set-rate (- base-rate .1) #t)
        (record-rate -.1))
      
      (define (up-rate)
        (set-rate (+ base-rate .1) #t)
        (record-rate .1))
      
      (define (set-rate rate reset?)
        (set! base-rate rate)
        (when reset?
          (reset throttle))
        (display-rate))
      
      (case key
        ((#\a)
         (decrease-rate))
        ((#\A)
         (down-rate))
        ((#\s)
         (display-rate))
        ((#\d)
         (increase-rate))
        ((#\D)
         (up-rate))
        ((#\r)
         (set-rate 1. #t))
        ((#\0)
         (set-rate 0. #t))
        ((#\f #\space)
         (cond ((time-frozen? panel)
                (thaw-events)
                (thaw-time panel))
               (else
                (freeze-events)
                (freeze-time panel)))
         (redraw panel))
        ((#\v)
         (done-profile title: "Test"))))
    
    (define (plot-callback surface)
      (let ((statistics (get-profile-statistics udp)))
        (let ((lowest-round-trip (get-lowest-round-trip quality))
              (round-trip-base-deviation (get-round-trip-base-deviation quality))
              (round-trip-deviation (get-round-trip-deviation-rate quality) @global-average (mean (get-deviation-round-trip quality)))
              (upload-drop (get-upload-drop statistics))
              (upload (get-last-upload-rate statistics)))
          (when (and lowest-round-trip round-trip-base-deviation round-trip-deviation upload-drop)
            (let ((title (format "RTT: {r precision: 3}s, Base: {r precision: 3}s, Deviation: {r precision: 3}s, Drop: {r precision: 1}%, Upload: {r precision: 1}Mbps" lowest-round-trip round-trip-base-deviation round-trip-deviation upload-drop (bytes->mbps upload))))
              (draw-text surface 5 3 title {Color Light-Gray}))
            (let ((deviation-rate (get-round-trip-deviation-rate quality)))
              (let ((quality-estimate (estimate-quality quality statistics deviation-rate @global-average round-trip-deviation)))
                (let ((title (format "Quality: {r precision: 1}%" quality-estimate)))
                  (let ((width (get-width panel))
                        (extent (get-text-extent surface title)))
                    (let ((h (- width (get-width extent) 5)))
                      (draw-text surface (- width (get-width extent) 5) 3 title {Color red: 32 green: 205 blue: 33}))))))))))
    
    (define (wait now target)
      (sleep (- target now)))
    
    (setup-pulse #f ack-received #f key-callback plot-callback)
    (sleep target-phase)
    (schedule-noack)
    (update-base quality (mean (get-deviation-round-trip quality)))
    (let ((start (current-seconds))
          (payload (make-u8vector 1000)))
      (let (loop (previous start))
        (let ((end +inf.0)
              (bytes/second (cast <fl> (mbps->bytes (effective-rate throttle 0. base-rate))))
              (size (+ (calculate-profile-media-size payload) udp-code-size)))
          (let ((period (and (> bytes/second 0.) (/ (cast <fl> size) bytes/second))))
            (let ((now (current-seconds)))
              (when (< now end)
                (if (not period)
                    (begin
                      (wait now (+ previous .01))
                      (loop now))
                  (send-profile-media udp payload)
                  (wait now (+ previous period))
                  (loop now))))))))))


(definition (send-bbr panel setup-pulse wait noack-waiter)
  (declare (proper-tail-calls))
  (let ((world (current-world))
        (udp (current-udp))
        (connection-state (new UDP-Connection-State))
        (rate-sample (new UDP-Rate-Sample))
        (bbr (new UDP-Congestion))
        (delayed (new-queue))
        (windowed 0)
        (mutex (make-mutex 'bbr))
        (base-window #f @w (* 17500. 1.5))
        (base-rate #f @w 8. @w 10.)
        (rate #f)
        (window? #t)
        (last-sent #f)
        (last-received #f)
        (last-acked #f))
    (define (media-ack-received data)
      (mutex-lock! mutex)
      (receive-ack data)
      (mutex-unlock! mutex))
    
    (define (display-rate)
      (display-message world (format "Rate {r precision: 2}" base-rate) duration: +inf.0))
    
    (define (record-rate adjustment)
      )
    
    (define (key-callback key)
      (define rates
        '(0. .1 .25 .5 .75 1. 2. 3. 4. 6. 8. 10. 12. 16. 20.))
      
      (define (closest-rate)
        (bind (dist . rate) (car (sort < (map (lambda (rate)
                                                (cons (abs (- rate base-rate)) rate))
                                              rates)
                                   key: car))
          (let ((exact? (= dist 0.)))
            (values rate exact?))))
      
      (define (decrease-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (previous-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #t)
              (record-rate (- new-rate base-rate))))))
      
      (define (increase-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (next-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #f)
              (record-rate (- new-rate base-rate))))))
      
      (define (down-rate)
        (set-rate (- base-rate .1) #t)
        (record-rate -.1))
      
      (define (up-rate)
        (set-rate (+ base-rate .1) #t)
        (record-rate .1))
      
      (define (set-rate rate reset?)
        (set! base-rate rate)
        (display-rate))
      
      (define (change-rate r)
        (cond ((equal? r rate)
               (set! rate #f)
               (set-cruise-rate bbr #f)
               (display-message world "No rate"))
              (else
               (set! rate r)
               (set-cruise-rate bbr (exact->inexact (mbps->bytes r)))
               (display-message world (format "Rate {a}Mbps" (fxround rate))))))
      
      (case key
        ((#\a)
         (decrease-rate))
        ((#\A)
         (down-rate))
        ((#\b)
         (let ((btlbw (get-btlbw bbr))
               (minrtt (get-minrtt bbr)))
           (tell 'bdp (* btlbw minrtt) btlbw minrtt)))
        ((#\s)
         (display-rate))
        ((#\d)
         (increase-rate))
        ((#\D)
         (up-rate))
        ((#\r)
         (set-rate 1. #t))
        ((#\0)
         (set-rate 0. #t))
        ((#\l)
         (change-rate 4.))
        ((#\m)
         (change-rate 8.))
        ((#\h)
         (change-rate 32.))
        ((#\w)
         (set! window? (not window?))
         (display-on/off world "Window" window?))
        ((#\p)
         (set-plot? (not plot?))
         (display-on/off world "Plot" plot?))
        ((#\f #\space)
         (cond ((time-frozen? panel)
                (thaw-events)
                (thaw-time panel))
               (else
                (freeze-events)
                (freeze-time panel)))
         (redraw panel))
        ((#\c)
         (sleep .5)
         (cancel-profile title: "Test"))
        ((#\v)
         (sleep .5)
         @w
         (set-plot? #t)
         (done-profile title: "Test"))))
    
    (define (plot-callback surface)
      (let ((statistics (get-profile-statistics udp)))
        (when (> (get-sent connection-state) 0)
        (let ((average-rtt (get-average (get-movingRTT connection-state)))
              (pacing-rate (get-pacing-rate bbr))
              (delivery-rate (get-delivery-rate rate-sample))
              (delivery-average (get-delivery-average rate-sample))
              (upload-rate (get-last-upload-rate statistics))
              (upload-drop (percentage (get-lost connection-state) (get-sent connection-state)) @w (get-upload-drop statistics))
              (delayed (queue-length delayed)))
          (when (and average-rtt upload-rate upload-drop)
            (let ((title (format "RTT: {r precision: 3}s, Pacing: {r precision: 1}Mbps, Upload: {r precision: 1}Mbps, Delivery: {r precision: 1}Mbps, Drop: {r precision: 1}%, Delayed: {a}" average-rtt (bytes->mbps pacing-rate) (bytes->mbps upload-rate) (bytes->mbps delivery-rate) upload-drop windowed @w delayed)))
              (draw-text surface 5 3 title {Color Light-Gray})))))))
    
    (define (init-bbr size)
      (parameterize ((simulation-evolution (get-profile-evolution udp)))
        (init bbr connection-state size)
        (set-cruise-rate bbr (and rate (exact->inexact (mbps->bytes rate))))))
    
    (define (send-packet payload)
      (parameterize ((simulation-evolution (get-profile-evolution udp)))
        (let ((data (send-profile-media udp payload)))
          (with-record profile-media
            (let ((sent (current-seconds))
                  (sequence (read-profile-media-sequence data))
                  (size (u8vector-length data)))
              (let ((packet-state (packet-sent connection-state sent sequence size)))
                @w
                (when rate
                  (set-app-limited connection-state (+ (get-delivered connection-state) (get-inflight connection-state))))
                (packet-sent rate-sample connection-state packet-state)
                (packet-sent bbr))
              @sent
              (when last-sent
                (let ((elapse (- sent last-sent)))
                  (record-event udp-id-congestion-test
                                -1.
                                -1.
                                -1.
                                (fixnum->flonum sequence)
                                elapse
                                -1.
                                -1.)))
              (set! last-sent sent))))))
    
    (define (receive-ack data)
      (parameterize ((simulation-evolution (get-profile-evolution udp)))
        (with-record profile-media-ack
          (let ((received (read-profile-media-ack-received data))
                (sequence (read-profile-media-ack-sequence data)))
            (let ((packet-state (ack-received connection-state sequence)))
              (when packet-state
                (ack-received rate-sample connection-state packet-state)
                @w
                (let ((rate (bytes->mbps (get-delivery-rate rate-sample))))
                  (when (> rate 12.)
                    (terminal '******** rate))
                  (when (< rate 4.)
                    (terminal '<<<<<<<< rate)))
                (ack-received bbr rate-sample packet-state)
                ;; hack to plot round trip
                ;@w
                (record-event udp-id-receive-ack
                              -1.
                              (fixnum->flonum client-no)
                              -1.
                              (fixnum->flonum (get-sequence packet-state))
                              (get-rtt packet-state)
                              -1.
                              -1.)
                @received
                (when last-received
                  (let ((elapse (- received last-received)))
                    (record-event udp-id-congestion-test
                              -1.
                              -1.
                              -1.
                              (fixnum->flonum sequence)
                              elapse
                              -1.
                              -1.)))
                (set! last-received received)
                @acked
                (let ((acked (current-seconds)))
                  (when last-acked
                    (let ((elapse (- acked last-acked)))
                      (record-event udp-id-congestion-test
                                    -1.
                                    -1.
                                    -1.
                                    (fixnum->flonum sequence)
                                    elapse
                                    -1.
                                    -1.)))
                  (set! last-acked acked))
                ;@w
                (record-event udp-id-rate-sample
                              -1.
                              -1.
                              -1.
                              (fixnum->flonum sequence)
                              (bytes->mbps (get-delivery-rate rate-sample))
                              -1.
                              -1.)))))))
    
    (set-%c connection-state)
    (set-%b bbr)
    (set-plot? #t)
    (set-plot-latency? panel #f)
    (set-plot-traffic? panel #f)
    (setup-pulse #f #f media-ack-received key-callback plot-callback)
    (let ((start (current-seconds))
          (payload (make-u8vector 1000)))
      (let ((size (+ (calculate-profile-media-size payload) udp-code-size)))
        (define (wait)
          (/ size (if base-rate
                      (mbps->bytes base-rate)
                    (get-pacing-rate bbr))))
        
        (define (pace next)
          (sleep (- next (current-seconds))))
        
        (init-bbr size)
        (let (loop (n 0) (next start))
          (mutex-lock! mutex)
          ;; base window
          (if base-window
              (cond ((> (+ (get-inflight connection-state) size) base-window)
                     ;(terminal-string ">")
                     (enqueue delayed payload)
                     (mutex-unlock! mutex)
                     (sleep 8.136e-4)
                     (loop (+ n 1) next))
                    ((not (queue-empty? delayed))
                     ;(terminal-string "<")
                     (let ((payload (dequeue delayed)))
                       (send-packet payload))
                     (mutex-unlock! mutex)
                     (loop (+ n 1) next))
                    (else
                     ;(terminal-string ".")
                     (send-packet payload)
                     (mutex-unlock! mutex)
                     (sleep .00001)
                     (loop (+ n 1) next)))
            (cond ;; base rate
                  (base-rate
                   (let ((cwnd (let ((quanta (* 3 size))
                                     (estimated-bdp (* @w (mbps->bytes base-rate) (get-btlbw bbr) (get-minrtt bbr))))
                                 (+ (* 2. estimated-bdp) quanta))))
                     @w
                     (if (> (+ (get-inflight connection-state) size) (get-cwnd bbr))
                         (terminal-string "$")
                       (terminal-string ".")
                       (send-packet payload)))
                   (send-packet payload)
                   (mutex-unlock! mutex)
                   (pace next))
                  ;; exceeding congestion window
                  ((and window? (> (+ (get-inflight connection-state) size) (get-cwnd bbr)))
                   ;(terminal-string "$")
                   ;(enqueue delayed payload)
                   (increase! windowed)
                   (mutex-unlock! mutex)
                   (pace next))
                  ;; send delayed
                  ((not (queue-empty? delayed))
                   (let ((payload (dequeue delayed)))
                     (send-packet payload))
                   (decrease! windowed)
                   (mutex-unlock! mutex))
                  ;; send packet
                  (else
                   ;(terminal-string ".")
                   (send-packet payload)
                   (mutex-unlock! mutex)
                   (pace next)))
            (loop (+ n 1) (+ next (wait)))))))))


(definition (setup-noack-waiter)
  (let ((waiter (make-waiter 'noack)))
    (values waiter (lambda ()
                     (done waiter)))))


(definition protected (profile-pulse)
  (profile-run "Pulse" #f #f))


(definition protected (profile-bandwidth)
  (profile-run "Bandwidth" #f send-bandwidth))


(definition protected (profile-network)
  (profile-run "Network" setup-noack-waiter send-network))


(definition protected (test-network)
  (profile-run "Network" setup-noack-waiter send-test title: "Test"))


(definition protected (test-bbr)
  (profile-run "Network" #f @w setup-noack-waiter send-bbr title: "BBR"))


(definition protected (save-profile server-profile client-profile (view-profile?: view-profile? #t))
  (let ((client (current-client)))
    (let ((parent {Directory Documents "profiles"}))
      (let ((dir (timestamped-directory parent "profile")))
        (create-directories dir)
        (save-binary (new-file dir "_server.replay") server-profile)
        (save-binary (new-file dir (add-extension (get-character-name client) "replay")) client-profile)
        (when view-profile?
          (view-replay-directory dir))))))


(definition protected (done-profile (title: title "Profile"))
  (let ((client (current-client))
        (world (current-world)))
    (receive (server-profile client-profile) (retrieve-profiles client)
      (terminate-profile)
      (save-profile server-profile client-profile)
      (display-message world (format "{a} done" title)))))


(definition protected (cancel-profile (title: title "Profile"))
  (let ((world (current-world)))
    (terminate-profile)
    (display-message world (format "{a} cancelled" title))))


(definition protected (terminate-profile)
  (let ((client (current-client))
        (udp (current-udp)))
    (let ((panel (get-panel running-profile))
          (pulse-thread (get-pulse-thread running-profile))
          (redraw-thread (get-redraw-thread running-profile))
          (send-thread (get-send-thread running-profile))
          (user-cleanup (get-user-cleanup running-profile)))
      (when user-cleanup
        (user-cleanup))
      (when send-thread
        (exit-thread send-thread)
        (thread-join! send-thread))
      (exit-thread pulse-thread)
      (thread-join! pulse-thread)
      (exit-thread redraw-thread)
      (thread-join! redraw-thread)
      (set-profile-ack-callback udp #f)
      (stop-profile client)
      (close panel)
      (set! running-profile #f)))))
