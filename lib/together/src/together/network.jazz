;;;============
;;;  Together
;;;============
;;;
;;;; Network Profile
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.network jazz


(import (jazz.debuggee)
        (jazz.event)
        (jazz.graphic)
        (jazz.io)
        (jazz.math)
        (jazz.time)
        (jazz.view)
        (world)
        (world.bbr)
        (world.bbr.state)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.format)
        (world.interface.evolution)
        (world.interface.timeline)
        (world.profiling)
        (world.queue)
        (world.record (phase syntax))
        (world.settings)
        (world.streaming)
        (world.task)
        (world.udp)
        (world.video)
        (together)
        (together.bbr))


(definition protected running-profile
  #f)


(class Network-Profile extends Object
  
  
  (slot panel          getter generate)
  (slot pulse-thread   getter generate)
  (slot redraw-thread  getter generate)
  (slot send-thread    getter generate)
  (slot pace-thread    getter generate)
  (slot user-data      getter generate)
  (slot user-cleanup   getter generate)
  
  
  (method override (initialize self panel pulse-thread redraw-thread send-thread pace-thread user-data user-cleanup)
    (nextmethod self)
    (set! self.panel panel)
    (set! self.pulse-thread pulse-thread)
    (set! self.redraw-thread redraw-thread)
    (set! self.send-thread send-thread)
    (set! self.pace-thread pace-thread)
    (set! self.user-data user-data)
    (set! self.user-cleanup user-cleanup)))


(class Network-Quality extends Object
  
  
  (slot lowest-round-trip         getter generate)
  (slot deviation-round-trip      getter generate)
  (slot round-trip-base-deviation getter generate)
  (slot round-trip-deviation-rate getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! lowest-round-trip #f)
    (set! deviation-round-trip (new Average))
    (set! round-trip-base-deviation #f)
    (set! round-trip-deviation-rate -1.))
  
  
  (method protected (update self round-trip)
    (when (or (not lowest-round-trip)
              (< round-trip lowest-round-trip))
      (set! lowest-round-trip round-trip))
    (let ((deviation (- round-trip lowest-round-trip)))
      (add deviation-round-trip deviation)
      (set! round-trip-deviation-rate (if (= round-trip-deviation-rate -1.) deviation (/ (+ (* 7. round-trip-deviation-rate) deviation) 8.)))))
  
  
  (method protected (update-base self deviation)
    (set! round-trip-base-deviation deviation)
    (set! deviation-round-trip (new Average)))
  
  
  (method protected (estimate-quality self statistics deviation)
    (* (min 1. (/ round-trip-base-deviation deviation)) 100.)))


(class Network-Timeline-Panel extends Timeline-Panel
  
  
  (property key-callback  initialize #f accessors generate)
  (property plot-callback initialize #f accessors generate)
  
  
  (slot quality    getter generate)
  (slot statistics getter generate)
  (slot done?      accessors generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! origin (get-client-no (current-client)))
    (set! rtt-scale (* 82. graph-scale))
    (set! quality (new Network-Quality))
    (set! statistics (get-profile-statistics (current-udp)))
    (set! done? #f))
  
  
  (method override (timeline-start self) <fl>
    (or frozen-start
        (evolutionary-time evolution (first-position evolution))))
  
  
  (method override (timeline-end self) <fl>
    (or frozen-end
        (evolutionary-time evolution (last-position evolution))))
  
  
  (method override (key-press self evt)
    (when key-callback
      (key-callback (get-key evt))))
  
  
  (method override (plot-info self surface <Surface> cpu-duration history-duration chronology-duration evolution-duration highlight-duration nowinfo-duration duration)
    (when plot-callback
      (set-font surface {Font Label})
      (plot-callback surface))))


(definition protected (profile-run name setup sender pacer (title: title "Profile"))
  (let ((interface (current-interface))
        (client (current-client))
        (udp (current-udp))
        (zone (current-zone))
        (me (current-me)))
    (display-feedback (format "{a} {a} ..." title name) +inf.0)
    (start-profile client)
    (let ((pulse-period (/ 1. 10.))
          (redraw-period 1.25 @w (/ 1. 2.))
          (base (current-monotonic))
          (panel (new Network-Timeline-Panel parent: interface location: (if (eq? (get-mode me) 'observer) '(center 172) '(center 56)) proportion: '((bounds -500) 120)))
          (pulse-sent #f)
          (queue (and pacer (new Priorities-Queue 1))))
      (define (wait target)
        (sleep (- (+ base target) (current-monotonic))))
      
      (set-replay? panel #t)
      (set-show-knees? panel #t)
      (set-border-color panel {Color Dark-Gray})
      (setup-sites panel (sites-metadata))
      (set-chronology panel (get-profile-chronology udp))
      (set-evolution panel (get-profile-evolution udp))
      (layout-view interface)
      (receive (user-data user-cleanup) (if setup (setup panel) (values #f #f))
        (let ((pulse-thread
                (new-thread
                  (lambda ()
                    (declare (proper-tail-calls))
                    (let (loop (n 0))
                      (let ((data (send-profile-pulse udp)))
                        (when pulse-sent
                          (pulse-sent data)))
                      (wait (* (cast <fl> n) pulse-period))
                      (loop (+ n 1))))
                  'profile-pulse))
              (redraw-thread
                (new-thread
                  (lambda ()
                    (declare (proper-tail-calls))
                    (let (loop (n 0))
                      (delay-event
                        (lambda ()
                          (with-task-mutex
                            (lambda ()
                              (redraw panel)))))
                      (wait (* (cast <fl> n) redraw-period))
                      (loop (+ n 1))))
                  'profile-redraw)))
          (let ((send-thread
                  (and sender
                       (new-thread
                         (lambda ()
                           (define (setup-pulse sent received media-received key-callback plot-callback)
                             (set! pulse-sent sent)
                             (set-profile-ack-callback udp received)
                             (set-profile-media-ack-callback udp media-received)
                             (set-key-callback panel key-callback)
                             (set-plot-callback panel plot-callback))
                           
                           (sender panel setup-pulse wait queue user-data)
                           (exit-thread pulse-thread)
                           (thread-join! pulse-thread)
                           (exit-thread redraw-thread)
                           (thread-join! redraw-thread)
                           (receive (server-profile client-profile) (retrieve-profiles client)
                             (set-profile-ack-callback udp #f)
                             (stop-profile client)
                             @wait
                             (with-task-mutex
                               (lambda ()
                                 (cond ((developer?)
                                        (display-feedback "{a} done" title)
                                        (close panel)
                                        (set! running-profile #f)
                                        (save-profile server-profile client-profile))
                                       (else
                                        (display-feedback "{a} saved" title)
                                        (close panel)
                                        (set! running-profile #f)
                                        (save-profile server-profile client-profile view-profile?: #f)))))))
                         'profile-send)))
                (pace-thread
                  (new-thread
                    (lambda ()
                      (pacer panel queue user-data))
                    'profile-pace)))
            (thread-base-priority-set! pulse-thread profile-priority)
            (thread-base-priority-set! redraw-thread background-priority)
            (when send-thread
              (thread-base-priority-set! send-thread profile-priority))
            (when pace-thread
              (thread-base-priority-set! pace-thread profile-priority))
            (when send-thread
              (thread-start! send-thread))
            (when pace-thread
              (thread-start! pace-thread))
            (thread-start! pulse-thread)
            (thread-start! redraw-thread)
            (acquire-focus panel)
            (set! running-profile (new Network-Profile panel pulse-thread redraw-thread send-thread pace-thread user-data user-cleanup))))))))


(definition (display-feedback message (duration #f))
  (let ((world (current-world))
        (me (current-me)))
    (if (eq? (get-mode me) 'observer)
        (display-message world message duration: duration)
      (display-status world message duration: duration))))


(definition (setup-noack-waiter panel)
  (let ((waiter (make-waiter 'noack)))
    (values waiter (lambda ()
                     (done waiter)))))


(definition protected (save-profile server-profile client-profile (view-profile?: view-profile? #t))
  (let ((client (current-client)))
    (let ((parent {Directory Documents "profiles"}))
      (let ((dir (timestamped-directory parent "profile")))
        (create-directories dir)
        (save-binary (new-file dir "_server.replay") server-profile)
        (save-binary (new-file dir (add-extension (get-character-name client) "replay")) client-profile)
        (when view-profile?
          (view-replay-directory dir))))))


(definition protected (done-profile (title: title "Profile"))
  (let ((client (current-client))
        (world (current-world)))
    (receive (server-profile client-profile) (retrieve-profiles client)
      (terminate-profile)
      (save-profile server-profile client-profile)
      (display-feedback (format "{a} done" title)))))


(definition protected (cancel-profile (title: title "Profile"))
  (let ((world (current-world)))
    (terminate-profile)
    (display-feedback (format "{a} cancelled" title))))


(definition protected (terminate-profile)
  (let ((client (current-client))
        (udp (current-udp)))
    (let ((panel (get-panel running-profile))
          (pulse-thread (get-pulse-thread running-profile))
          (redraw-thread (get-redraw-thread running-profile))
          (send-thread (get-send-thread running-profile))
          (pace-thread (get-pace-thread running-profile))
          (user-cleanup (get-user-cleanup running-profile)))
      (set-done? panel #t)
      (set-profile-ack-callback udp #f)
      (when pace-thread
        (thread-join! pace-thread))
      (when send-thread
        (thread-join! send-thread))
      (stop-profile client)
      (when user-cleanup
        (user-cleanup))
      (close panel)
      (set! running-profile #f))))


;;;
;;;; Pulse
;;;


(definition protected (profile-pulse)
  (profile-run "Pulse" #f #f #f))


;;;
;;;; BBR
;;;


(definition (setup-bbr panel)
  (let ((udp (current-udp))
        (mutex (make-mutex 'bbr))
        (state (new BBR-State))
        (socket (new_tcpsock))
        (skbuff-info (new_skbuff 0))
        (skbcb-info (new_skbcb))
        (rate-info (new_ratesample))
        (bbr-update 0)
        (send-rate (new Transfer-Rate))
        (payload (make-u8vector (- (calculate-media-trial-size) (recordsize profile-media)))))
    (let ((bbr-info (socket->bbr socket))
          (bbrinfo-info (new_bbrinfo))
          (statistics (get-profile-statistics udp)))
      (define (get-bbr-update)
        bbr-update)
      
      (define (bbr-updated)
        (increase! bbr-update))
      
      (set-plot? #t)
      (set-plot-latency? panel #f)
      (set-plot-traffic? panel #f)
      (set-upload-info state socket 'N/A 'N/A send-rate skbuff-info skbcb-info rate-info bbr-info bbrinfo-info get-bbr-update statistics)
      (bbr-updated)
      (values (list udp mutex state socket skbuff-info skbcb-info rate-info bbr-info bbrinfo-info bbr-updated send-rate payload)
        (lambda ()
          (free_tcpsock socket)
          (free_skbuff skbuff-info)
          (free_skbcb skbcb-info)
          (free_ratesample rate-info)
          (free_bbrinfo bbrinfo-info)
          (set-upload-info #f #f #f #f #f #f #f #f #f #f #f #f))))))


(definition (send-bbr panel setup-pulse wait queue user-data)
  (declare (proper-tail-calls))
  (bind (udp mutex state socket skbuff-info skbcb-info rate-info bbr-info bbrinfo-info bbr-updated send-rate payload) user-data
    (let ((world (current-world)))
      (define (media-ack-received data)
        (mutex-lock! mutex)
        (receive-ack data)
        (mutex-unlock! mutex))
      
      (define (key-callback key)
        (case key
          ((#\p)
           (set-plot? (not plot?))
           (display-on/off world "Plot" plot?))
          ((#\f #\space)
           (cond ((time-frozen? panel)
                  (thaw-events)
                  (thaw-time panel))
                 (else
                  (freeze-events)
                  (freeze-time panel)))
           (redraw panel))
          ((#\c)
           (sleep .5)
           (cancel-profile title: "Test"))
          ((#\v)
           (sleep .5)
           @w
           (set-plot? #t)
           (done-profile title: "Test"))))
      
      (define (plot-callback surface)
        (let ((statistics (get-profile-statistics udp)))
          (let ((min-rtt (/ (tcp_min_rtt socket) 1000000.))
                (smoothed-rtt (get-round-trip-rate statistics))
                (cwnd (or snd_cwnd-override (tcp_snd_cwnd socket)))
                (pacing-rate (or pacing_rate-override (tcp_pacing_rate socket)))
                (send-rate (get-average send-rate))
                (upload-drop (get-upload-drop statistics))
                (limited? (ratesample-is_app_limited-ref rate-info)))
            (when upload-drop
              (let ((title (format "MinRTT: {r precision: 3}s, RTT: {r precision: 3}s, CWnd {a}, Pacing: {r precision: 1}Mbps, Rate: {r precision: 1}Mbps, Drop: {r precision: 1}%, Limited: {a}" min-rtt smoothed-rtt cwnd (bytes->mbps pacing-rate) (bytes->mbps send-rate) upload-drop (if limited? "true" "false"))))
                (draw-text surface 5 3 title {Color Light-Gray}))))))
      
      (define (init-bbr)
        (tcp_init socket udp-mss (current-monotonic-nanoseconds) (current-monotonic-frequency))
        (bbr_init socket))
      
      (define (receive-ack data)
        (unless (and ack-drop-percentage (< (random-real) ack-drop-percentage))
        (parameterize ((simulation-evolution (get-profile-evolution udp)))
          (with-record profile-media-ack
            (let ((order (read-profile-media-ack-order data))
                  (srtt (get-round-trip-rate (get-profile-statistics udp)))
                  (queue-empty? #f)
                  (timer (current-monotonic-nanoseconds)))
              (let ((info (ack-received state socket order srtt queue-empty? timer)))
                (when info
                  (receive (skb data lost) info
                    (skbuff_get_info skb skbuff-info)
                    (skbcb_get_info skb skbcb-info)
                    (let ((app-limited? (tcp_ack socket skb lost srtt queue-empty? timer rate-info)))
                      (free_skbuff skb)
                      (bbr-updated)
                      (record-state state socket order)
                      (with-record media
                        (record-event udp-id-bbr-ack
                                      -1.
                                      -1.
                                      -1.
                                      -1.
                                      (fixnum->flonum order)
                                      -1.
                                      (fixnum->flonum (tcp_packets_in_flight socket))))
                      (record-event udp-id-bbr-pacing
                                    -1.
                                    -1.
                                    -1.
                                    -1.
                                    (fixnum->flonum order)
                                    (bytes->mbps (tcp_pacing_rate socket))
                                    (if app-limited? 1. 0.))
                      (record-event udp-id-bbr-window
                                    -1.
                                    -1.
                                    -1.
                                    -1.
                                    (fixnum->flonum order)
                                    (fixnum->flonum (tcp_snd_cwnd socket))
                                    (fixnum->flonum (tcp_packets_in_flight socket))))))))))))
      
      (setup-pulse #f #f media-ack-received key-callback plot-callback)
      (init-bbr)
      (let (inner)
        (unless (get-done? panel)
          (sleep .01)
          (inner))))))


(definition (pace-bbr panel queue user-data)
  (declare (proper-tail-calls))
  (bind (udp mutex state socket skbuff-info skbcb-info rate-info bbr-info bbrinfo-info bbr-updated send-rate payload) user-data
    (define (send-packet)
      (let ((data (send-profile-media udp payload)))
        (update send-rate (u8vector-length data))
        (parameterize ((simulation-evolution (get-profile-evolution udp)))
          (with-record profile-media
            (let ((sent (current-seconds))
                  (order (read-profile-media-order data)))
              (receive (skb segs) (packet-sent state sent order data)
                (tcp_skb_sent socket skb #f order (current-monotonic-nanoseconds)))
              (with-record media
                (record-event udp-id-bbr-media
                              -1.
                              -1.
                              -1.
                              -1.
                              (fixnum->flonum order)
                              -1.
                              -1.))
              (record-event udp-id-send-rate
                            -1.
                            -1.
                            -1.
                            -1.
                            (fixnum->flonum order)
                            (bytes->mbps (get-average send-rate))
                            -1.))))
        (bbr-updated)))
    
    (define (send-pulse sent)
      (let ((data (send-profile-media-pulse udp)))
        (update send-rate (u8vector-length data))
        (parameterize ((simulation-evolution (get-profile-evolution udp)))
          (with-record profile-media-pulse
            (let ((order (read-profile-media-pulse-order data)))
              (receive (skb segs) (packet-sent state sent order data)
                (tcp_skb_sent socket skb #f order (current-monotonic-nanoseconds)))
              (record-event udp-id-bbr-pulse
                            -1.
                            -1.
                            -1.
                            -1.
                            (fixnum->flonum order)
                            -1.
                            -1.))))
        (bbr-updated)))
    
    (define (wait next-delivery-time)
      (sleep (- next-delivery-time (current-seconds))))
    
    (define (pace size)
      (/ size (or pacing_rate-override (tcp_pacing_rate socket))))
    
    (define (show str)
      @w (terminal-string str))
    
    (let ((payload-size (+ (calculate-profile-media-size payload) udp-code-size)))
      (let (loop (next-delivery-time (current-seconds)))
        (unless (get-done? panel)
          (mutex-lock! mutex)
          (cond ;; exceeding congestion window
                ((> (+ (tcp_packets_in_flight socket) 1) (or snd_cwnd-override (tcp_snd_cwnd socket)))
                 (tcp_set_is_cwnd_limited socket #t)
                 (let ((now (current-seconds)))
                   (cond ;; send pulse
                         ((>= now (+ (get-last-sent-time state) .1))
                          (show "@")
                          (wait next-delivery-time)
                          (send-pulse now)
                          (mutex-unlock! mutex)
                          (loop (+ next-delivery-time .0001)))
                         ;; do nothing
                         (else
                          (show "$")
                          (wait next-delivery-time)
                          (mutex-unlock! mutex)
                          (loop (+ next-delivery-time .0001))))))
                ;; send packet
                (else
                 (tcp_set_is_cwnd_limited socket #f)
                 (show ">")
                 (wait next-delivery-time)
                 (send-packet)
                 (mutex-unlock! mutex)
                 (loop (+ next-delivery-time (pace payload-size))))))))))


(definition protected (profile-bbr)
  (profile-run "Network" setup-bbr send-bbr pace-bbr title: "BBR")))
