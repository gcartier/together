;;;============
;;;  Together
;;;============
;;;
;;;; Network Profile
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.network jazz


(import (jazz.event)
        (jazz.graphic)
        (jazz.io)
        (jazz.time)
        (jazz.view)
        (world)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.interface.evolution)
        (world.interface.timeline)
        (world.profiling)
        (world.settings)
        (world.streaming)
        (world.task)
        (world.udp)
        (world.video)
        (together))


(definition protected running-profile
  #f)


(class Network-Profile extends Object
  
  
  (slot panel          getter generate)
  (slot pulse-thread   getter generate)
  (slot redraw-thread  getter generate)
  (slot send-thread    getter generate)
  
  
  (method override (initialize self panel pulse-thread redraw-thread send-thread)
    (nextmethod self)
    (set! self.panel panel)
    (set! self.pulse-thread pulse-thread)
    (set! self.redraw-thread redraw-thread)
    (set! self.send-thread send-thread)))


(class Network-Timeline-Panel extends Timeline-Panel
  
  
  (method override (timeline-start self) <fl>
    (evolutionary-time evolution (first-position evolution)))
  
  
  (method override (timeline-end self) <fl>
    (evolutionary-time evolution (last-position evolution))))


(definition protected (profile-network (pulse?: pulse? #f))
  (let ((interface (current-interface))
        (client (current-client))
        (world (current-world))
        (zone (current-zone)))
    (define (feedback message (duration #f))
      (display-message world message duration: duration))
    
    (feedback "Profile network..." +inf.0)
    (start-profile client)
    (let ((udp-client (get-udp-client client))
          (pulse-period (/ 1. 10.))
          (redraw-period (/ 1. 2.))
          (base (current-monotonic))
          (recuperate 1.)
          (panel (new Network-Timeline-Panel parent: interface location: '(center 172) proportion: '((bounds -500) 120))))
      (define (wait target)
        (sleep (- (+ base target) (current-monotonic))))
      
      (set-replay? panel #t)
      (set-show-knees? panel #t)
      (set-border-color panel {Color Dark-Gray})
      (setup-sites panel (sites-metadata))
      (set-chronology panel (get-profile-chronology udp-client))
      (set-evolution panel (get-profile-evolution udp-client))
      (layout-view interface)
      (let ((pulse-thread
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (loop (n 0))
                    (send-profile-pulse udp-client)
                    (wait (* (cast <fl> n) pulse-period))
                    (loop (+ n 1))))
                'pulse))
            (redraw-thread
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (loop (n 0))
                    (delay-event
                      (lambda ()
                        (with-task-mutex
                          (lambda ()
                            (redraw panel)))))
                    (wait (* (cast <fl> n) redraw-period))
                    (loop (+ n 1))))
                'redraw)))
        (let ((send-thread
                (and (not pulse?)
                     (new-thread
                       (lambda ()
                         (let ((start 0.))
                           (define (profile-upload mbps (duration: duration #f) (feedback?: feedback? #t))
                             (when feedback?
                               (feedback (format "Profile upload {a}Mbps..." mbps) +inf.0))
                             (let ((size 1000)
                                   (duration (or duration 1.)))
                               (let ((delay (/ (cast <fl> size) (mbps->bytes mbps))))
                                 (let ((iter (fxround (/ duration delay))))
                                   (let ((elapse (/ duration (cast <fl> iter)))
                                         (data (make-u8vector size)))
                                     (loop (for n from 0 below iter)
                                           (wait (+ start (* (cast <fl> n) elapse)))
                                           (send-profile-media udp-client data)))))
                               (increase! start duration))
                             (wait (+ start recuperate))
                             (increase! start recuperate))
                           
                           (define (profile-download mbps (feedback?: feedback? #t))
                             (when feedback?
                               (feedback (format "Profile download {a}Mbps..." mbps) +inf.0))
                             (test-profile client 'download (list mbps))
                             (wait (+ start 2.))
                             (increase! start 2.))
                           
                           (define (profile-both mbps)
                             (feedback (format "Profile both {a}Mbps..." mbps) +inf.0)
                             (test-profile client 'download (list mbps))
                             (profile-upload mbps feedback?: #f))
                           
                           (define (profile-bandwidths profile)
                             (profile  1)
                             (profile  2)
                             (profile  4)
                             (profile  8)
                             (profile 16))
                           
                           (declare (proper-tail-calls))
                           (wait (+ start recuperate))
                           (increase! start recuperate)
                           (profile-bandwidths profile-upload)
                           (profile-bandwidths profile-download)
                           (profile-bandwidths profile-both)
                           (exit-thread pulse-thread)
                           (thread-join! pulse-thread)
                           (exit-thread redraw-thread)
                           (thread-join! redraw-thread)
                           (receive (server-profile client-profile) (retrieve-profiles client)
                             (stop-profile client)
                             (with-task-mutex
                               (lambda ()
                                 (cond ((developer?)
                                        (feedback "Profile done")
                                        (close panel)
                                        (set! running-profile #f)
                                        (save-profile server-profile client-profile))
                                       (else
                                        (feedback "Profile saved")
                                        (close panel)
                                        (set! running-profile #f)
                                        (save-profile server-profile client-profile view-profile?: #f))))))))
                       'send))))
          (thread-base-priority-set! pulse-thread udp-priority)
          (thread-base-priority-set! redraw-thread udp-priority)
          (when send-thread
            (thread-base-priority-set! send-thread udp-priority))
          (thread-start! pulse-thread)
          (thread-start! redraw-thread)
          (when send-thread
            (thread-start! send-thread))
          (set! running-profile (new Network-Profile panel pulse-thread redraw-thread send-thread)))))))


(definition protected (profile-pulse)
  (profile-network pulse?: #t))


(definition protected (save-profile server-profile client-profile (view-profile?: view-profile? #t))
  (let ((client (current-client)))
    (let ((parent {Directory Documents "profiles"}))
      (let ((dir (timestamped-directory parent "profile")))
        (create-directories dir)
        (save-binary (new-file dir "_server.replay") server-profile)
        (save-binary (new-file dir (add-extension (get-character-name client) "replay")) client-profile)
        (when view-profile?
          (view-replay-directory dir))))))


(definition protected (done-profile)
  (let ((client (current-client))
        (world (current-world)))
    (receive (server-profile client-profile) (retrieve-profiles client)
      (terminate-profile)
      (save-profile server-profile client-profile)
      (display-message world "Profile done"))))


(definition protected (cancel-profile)
  (let ((world (current-world)))
    (terminate-profile)
    (display-message world "Profile cancelled")))


(definition protected (terminate-profile)
  (let ((client (current-client)))
    (let ((panel (get-panel running-profile))
          (pulse-thread (get-pulse-thread running-profile))
          (redraw-thread (get-redraw-thread running-profile))
          (send-thread (get-send-thread running-profile)))
      (when send-thread
        (exit-thread send-thread)
        (thread-join! send-thread))
      (exit-thread pulse-thread)
      (thread-join! pulse-thread)
      (exit-thread redraw-thread)
      (thread-join! redraw-thread)
      (stop-profile client)
      (close panel)
      (set! running-profile #f)))))
