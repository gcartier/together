;;;============
;;;  Together
;;;============
;;;
;;;; Network Profile
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.network jazz


(import (jazz.event)
        (jazz.graphic)
        (jazz.io)
        (jazz.time)
        (jazz.view)
        (world)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.format)
        (world.interface.evolution)
        (world.interface.timeline)
        (world.profiling)
        (world.record (phase syntax))
        (world.settings)
        (world.streaming)
        (world.task)
        (world.throttle)
        (world.udp)
        (world.video)
        (together))


(definition protected running-profile
  #f)


(class Network-Profile extends Object
  
  
  (slot panel          getter generate)
  (slot pulse-thread   getter generate)
  (slot redraw-thread  getter generate)
  (slot send-thread    getter generate)
  
  
  (method override (initialize self panel pulse-thread redraw-thread send-thread)
    (nextmethod self)
    (set! self.panel panel)
    (set! self.pulse-thread pulse-thread)
    (set! self.redraw-thread redraw-thread)
    (set! self.send-thread send-thread)))


(class Network-Timeline-Panel extends Timeline-Panel
  
  
  (property key-callback initialize #f accessors generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! origin (get-client-no (current-client)))
    (set! rtt-scale (* 82. graph-scale)))
  
  
  (method override (timeline-start self) <fl>
    (or frozen-start
        (evolutionary-time evolution (first-position evolution))))
  
  
  (method override (timeline-end self) <fl>
    (or frozen-end
        (evolutionary-time evolution (last-position evolution))))
  
  
  (method override (key-press self evt)
    (when key-callback
      (key-callback (get-key evt))))
  
  
  (method override (plot-info self surface <Surface> cpu-duration history-duration chronology-duration evolution-duration highlight-duration nowinfo-duration duration)
    (nextmethod self surface cpu-duration history-duration chronology-duration evolution-duration highlight-duration nowinfo-duration duration)
    (let ((title (format "RTT: {r precision: 3}s" (get-round-trip-rate (get-profile-statistics (current-udp))))))
      (draw-text surface 5 3 title {Color red: 32 green: 205 blue: 33}))))


(definition protected (profile-run name sender (title: title "Profile"))
  (let ((interface (current-interface))
        (client (current-client))
        (udp (current-udp))
        (world (current-world))
        (zone (current-zone)))
    (define (feedback message (duration #f))
      (display-message world message duration: duration))
    
    (feedback (format "{a} {a} ..." title name) +inf.0)
    (start-profile client)
    (let ((pulse-period (/ 1. 10.))
          (redraw-period (/ 1. 2.))
          (base (current-monotonic))
          (panel (new Network-Timeline-Panel parent: interface location: '(center 172) proportion: '((bounds -500) 120)))
          (pulse-sent #f))
      (define (wait target)
        (sleep (- (+ base target) (current-monotonic))))
      
      (set-replay? panel #t)
      (set-show-knees? panel #t)
      (set-border-color panel {Color Dark-Gray})
      (setup-sites panel (sites-metadata))
      (set-chronology panel (get-profile-chronology udp))
      (set-evolution panel (get-profile-evolution udp))
      (layout-view interface)
      (let ((pulse-thread
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (loop (n 0))
                    (let ((data (send-profile-pulse udp)))
                      (when pulse-sent
                        (pulse-sent data)))
                    (wait (* (cast <fl> n) pulse-period))
                    (loop (+ n 1))))
                'pulse))
            (redraw-thread
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (loop (n 0))
                    (delay-event
                      (lambda ()
                        (with-task-mutex
                          (lambda ()
                            (redraw panel)))))
                    (wait (* (cast <fl> n) redraw-period))
                    (loop (+ n 1))))
                'redraw)))
        (let ((send-thread
                (and sender
                     (new-thread
                       (lambda ()
                         (define (setup-pulse sent received key-callback)
                           (set! pulse-sent sent)
                           (set-profile-ack-callback udp received)
                           (set-key-callback panel key-callback))
                         
                         (sender panel setup-pulse wait)
                         (exit-thread pulse-thread)
                         (thread-join! pulse-thread)
                         (exit-thread redraw-thread)
                         (thread-join! redraw-thread)
                         (receive (server-profile client-profile) (retrieve-profiles client)
                           (set-profile-ack-callback udp #f)
                           (stop-profile client)
                           (with-task-mutex
                             (lambda ()
                               (cond ((developer?)
                                      (feedback "{a} done" title)
                                      (close panel)
                                      (set! running-profile #f)
                                      (save-profile server-profile client-profile))
                                     (else
                                      (feedback "{a} saved" title)
                                      (close panel)
                                      (set! running-profile #f)
                                      (save-profile server-profile client-profile view-profile?: #f)))))))
                       'send))))
          (thread-base-priority-set! pulse-thread udp-priority)
          (thread-base-priority-set! redraw-thread udp-priority)
          (when send-thread
            (thread-base-priority-set! send-thread udp-priority))
          (when send-thread
            (thread-start! send-thread))
          (thread-start! pulse-thread)
          (thread-start! redraw-thread)
          (acquire-focus panel)
          (set! running-profile (new Network-Profile panel pulse-thread redraw-thread send-thread)))))))


(definition (send-bandwidth panel setup-pulse wait)
  (declare (proper-tail-calls))
  (let ((client (current-client))
        (udp (current-udp)))
    (let ((start 0.)
          (recuperate 1.))
      (define (profile-upload mbps (duration: duration #f) (feedback?: feedback? #t))
        (when feedback?
          (feedback (format "Profile upload {a}Mbps..." mbps) +inf.0))
        (let ((size 1000)
              (duration (or duration 1.)))
          (let ((delay (/ (cast <fl> size) (mbps->bytes mbps))))
            (let ((iter (fxround (/ duration delay))))
              (let ((elapse (/ duration (cast <fl> iter)))
                    (data (make-u8vector size)))
                (loop (for n from 0 below iter)
                      (wait (+ start (* (cast <fl> n) elapse)))
                      (send-profile-media udp data)))))
          (increase! start duration))
        (wait (+ start recuperate))
        (increase! start recuperate))
      
      (define (profile-download mbps (feedback?: feedback? #t))
        (when feedback?
          (feedback (format "Profile download {a}Mbps..." mbps) +inf.0))
        (test-profile client 'download (list mbps))
        (wait (+ start 2.))
        (increase! start 2.))
      
      (define (profile-both mbps)
        (feedback (format "Profile both {a}Mbps..." mbps) +inf.0)
        (test-profile client 'download (list mbps))
        (profile-upload mbps feedback?: #f))
      
      (define (profile-bandwidths profile)
        (profile  1)
        (profile  2)
        (profile  4)
        (profile  8)
        (profile 16))
      
      (wait (+ start recuperate))
      (increase! start recuperate)
      (profile-bandwidths profile-upload)
      (profile-bandwidths profile-download)
      (profile-bandwidths profile-both))))


(definition (send-network panel setup-pulse wait)
  (declare (proper-tail-calls))
  (let ((world (current-world))
        (udp (current-udp))
        (throttle (new UDP-Throttle))
        (base-rate 1.))
    (define (pulse-sent data)
      )
    
    (define (ack-received data)
      (with-record profile-ack
        (let ((sent (read-profile-ack-pulse-sent data))
              (sequence (read-profile-ack-pulse-sequence data))
              (statistics (get-profile-statistics udp)))
          (received-ack throttle sent sequence statistics
            (lambda (adjustment reason)
              (record-rate adjustment)
              (display-rate))
            (lambda (profile)
              ))))
      #f)
    
    (define (display-rate)
      (display-message world (format "Rate {r precision: 2} : {r precision: 2}" base-rate (effective-rate throttle 0. base-rate)) duration: +inf.0))
    
    (define (record-rate adjustment)
      (parameterize ((simulation-evolution (get-profile-evolution udp)))
        (record-event udp-id-throttle-upload
                      -1.
                      -1.
                      -1.
                      adjustment
                      -1.
                      -1.
                      -1.
                      -1.)))
    
    (define (key-callback key)
      (define rates
        '(0. .1 .25 .5 .75 1. 2. 3. 4. 6. 8. 12. 16. 20.))
      
      (define (closest-rate)
        (bind (dist . rate) (car (sort < (map (lambda (rate)
                                                (cons (abs (- rate base-rate)) rate))
                                              rates)
                                   key: car))
          (let ((exact? (= dist 0.)))
            (values rate exact?))))
      
      (define (decrease-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (previous-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #t)
              (record-rate (- new-rate base-rate))))))
      
      (define (increase-rate)
        (receive (rate exact?) (closest-rate)
          (let ((new-rate (if #f rate (next-element rates rate cycle?: #f))))
            (when new-rate
              (set-rate new-rate #f)
              (record-rate (- new-rate base-rate))))))
      
      (define (down-rate)
        (set-rate (- base-rate .1) #t)
        (record-rate -.1))
      
      (define (up-rate)
        (set-rate (+ base-rate .1) #t)
        (record-rate .1))
      
      (define (set-rate rate reset?)
        (set! base-rate rate)
        (when reset?
          (reset throttle))
        (display-rate))
      
      (case key
        ((#\a)
         (decrease-rate))
        ((#\A)
         (down-rate))
        ((#\s)
         (display-rate))
        ((#\d)
         (increase-rate))
        ((#\D)
         (up-rate))
        ((#\r)
         (set-rate 1. #t))
        ((#\z)
         (set-rate 0. #t))
        ((#\f #\space)
         (cond ((time-frozen? panel)
                (thaw-events)
                (thaw-time panel))
               (else
                (freeze-events)
                (freeze-time panel)))
         (redraw panel))
        ((#\v)
         (done-profile))))
    
    (define (wait now target)
      (sleep (- target now)))
    
    (setup-pulse pulse-sent ack-received key-callback)
    (let ((start (current-seconds))
          (payload (make-u8vector 1000)))
      (let (loop (previous start))
        (let ((end +inf.0)
              (bytes/second (cast <fl> (mbps->bytes (effective-rate throttle 0. base-rate))))
              (size (+ (calculate-profile-media-size payload) udp-code-size)))
          (let ((period (and (> bytes/second 0.) (/ (cast <fl> size) bytes/second))))
            (let ((now (current-seconds)))
              (when (< now end)
                (if (not period)
                    (begin
                      (wait now (+ previous .01))
                      (loop now))
                  (send-profile-media udp payload)
                  (wait now (+ previous period))
                  (loop now))))))))))


(definition (send-test panel setup-pulse wait)
  (declare (proper-tail-calls))
  (let ((world (current-world))
        (udp (current-udp))
        (throttle (new UDP-Throttle))
        (base-rate 4.))
    (define (pulse-sent data)
      )
    
    (define (ack-received data)
      (with-record profile-ack
        (let ((sent (read-profile-ack-pulse-sent data))
              (sequence (read-profile-ack-pulse-sequence data))
              (statistics (get-profile-statistics udp)))
          (received-ack throttle sent sequence statistics
            (lambda (adjustment reason)
              (record-rate adjustment)
              (display-rate))
            (lambda (profile)
              ))))
      #f)
    
    (define (key-callback key)
      (case key
        ((#\f #\space)
         (cond ((time-frozen? panel)
                (thaw-events)
                (thaw-time panel))
               (else
                (freeze-events)
                (freeze-time panel)))
         (redraw panel))
        ((#\v)
         (done-profile title: "Test"))))
    
    (define (wait now target)
      (sleep (- target now)))
    
    (setup-pulse pulse-sent ack-received key-callback)
    (let ((start (current-seconds))
          (payload (make-u8vector 1000)))
      (let (loop (previous start))
        (let ((end +inf.0)
              (bytes/second (cast <fl> (mbps->bytes (effective-rate throttle 0. base-rate))))
              (size (+ (calculate-profile-media-size payload) udp-code-size)))
          (let ((period (and (> bytes/second 0.) (/ (cast <fl> size) bytes/second))))
            (let ((now (current-seconds)))
              (when (< now end)
                (if (not period)
                    (begin
                      (wait now (+ previous .01))
                      (loop now))
                  (send-profile-media udp payload)
                  (wait now (+ previous period))
                  (loop now))))))))))


(definition protected (profile-pulse)
  (profile-run "Pulse" #f))


(definition protected (profile-bandwidth)
  (profile-run "Bandwidth" send-bandwidth))


(definition protected (profile-network)
  (profile-run "Network" send-network))


(definition protected (test-network)
  (profile-run "Network" send-test title: "Test"))


(definition protected (save-profile server-profile client-profile (view-profile?: view-profile? #t))
  (let ((client (current-client)))
    (let ((parent {Directory Documents "profiles"}))
      (let ((dir (timestamped-directory parent "profile")))
        (create-directories dir)
        (save-binary (new-file dir "_server.replay") server-profile)
        (save-binary (new-file dir (add-extension (get-character-name client) "replay")) client-profile)
        (when view-profile?
          (view-replay-directory dir))))))


(definition protected (done-profile (title: title "Profile"))
  (let ((client (current-client))
        (world (current-world)))
    (receive (server-profile client-profile) (retrieve-profiles client)
      (terminate-profile)
      (save-profile server-profile client-profile)
      (display-message world (format "{a} done" title)))))


(definition protected (cancel-profile (title: title "Profile"))
  (let ((world (current-world)))
    (terminate-profile)
    (display-message world (format "{a} cancelled" title))))


(definition protected (terminate-profile)
  (let ((client (current-client))
        (udp (current-udp)))
    (let ((panel (get-panel running-profile))
          (pulse-thread (get-pulse-thread running-profile))
          (redraw-thread (get-redraw-thread running-profile))
          (send-thread (get-send-thread running-profile)))
      (when send-thread
        (exit-thread send-thread)
        (thread-join! send-thread))
      (exit-thread pulse-thread)
      (thread-join! pulse-thread)
      (exit-thread redraw-thread)
      (thread-join! redraw-thread)
      (set-profile-ack-callback udp #f)
      (stop-profile client)
      (close panel)
      (set! running-profile #f)))))
