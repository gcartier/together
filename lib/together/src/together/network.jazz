;;;============
;;;  Together
;;;============
;;;
;;;; Network Profile
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.network jazz


(import (jazz.event)
        (jazz.graphic)
        (jazz.io)
        (jazz.time)
        (jazz.view)
        (world)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.interface.evolution)
        (world.interface.timeline)
        (world.streaming)
        (world.task)
        (world.udp)
        (world.video)
        (together))


(class Network-Timeline extends Timeline-Panel
  
  
  (method override (timeline-start self) <fl>
    (evolutionary-time evolution (first-position evolution)))
  
  
  (method override (timeline-end self) <fl>
    (evolutionary-time evolution (last-position evolution))))


(definition protected (profile-network)
  (let ((interface (current-interface))
        (client (current-client))
        (world (current-world))
        (zone (current-zone)))
    (define (feedback message (duration #f))
      (display-message world message duration: duration))
    
    (feedback "Profile network..." +inf.0)
    (start-profile client)
    (let ((udp-client (get-udp-client client))
          (heartbeat-period (/ 1. 10.))
          (redraw-period (/ 1. 2.))
          (base (current-seconds))
          (recuperate 1.)
          (panel (new Network-Timeline parent: interface location: '(center 155) proportion: '((bounds -500) 110))))
      (define (wait target)
        (sleep (- (+ base target) (current-seconds))))
      
      (set-replay? panel #t)
      (set-border-color panel {Color Dark-Gray})
      (set-chronology panel (get-profile-chronology udp-client))
      (set-evolution panel (get-profile-evolution udp-client))
      (layout-view interface)
      (let ((receive-thread
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let ((udp-port (get-udp-port udp-client)))
                    (let (loop)
                      (let ((data (read udp-port)))
                        (receive-data udp-client data))
                      (loop))))
                'receive))
            (heartbeat-thread
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (loop (n 0))
                    (send-profile-heartbeat udp-client)
                    (wait (* (cast <fl> n) heartbeat-period))
                    (loop (+ n 1))))
                'heartbeat))
            (redraw-thread
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (loop (n 0))
                    (delay-event
                      (lambda ()
                        (with-task-mutex
                          (lambda ()
                            (redraw panel)))))
                    (wait (* (cast <fl> n) redraw-period))
                    (loop (+ n 1))))
                'redraw)))
        (let ((send-thread
                (new-thread
                  (lambda ()
                    (let ((start 0.))
                      (define (profile-upload mbps (duration: duration #f) (feedback?: feedback? #t))
                        (when feedback?
                          (feedback (format "Profile upload {a}Mbps..." mbps) +inf.0))
                        (let ((size 1000)
                              (duration (or duration 1.)))
                          (let ((delay (/ (cast <fl> size) (mbps->bytes mbps))))
                            (let ((iter (fxround (/ duration delay))))
                              (let ((elapse (/ duration (cast <fl> iter)))
                                    (data (make-u8vector size)))
                                (loop (for n from 0 below iter)
                                      (wait (+ start (* (cast <fl> n) elapse)))
                                      (send-profile-media udp-client data)))))
                          (increase! start duration))
                        (wait (+ start recuperate))
                        (increase! start recuperate))
                      
                      (define (profile-download mbps (feedback?: feedback? #t))
                        (when feedback?
                          (feedback (format "Profile download {a}Mbps..." mbps) +inf.0))
                        (test-profile client 'download (list mbps))
                        (wait (+ start 2.))
                        (increase! start 2.))
                      
                      (define (profile-both mbps)
                        (feedback (format "Profile both {a}Mbps..." mbps) +inf.0)
                        (test-profile client 'download (list mbps))
                        (profile-upload mbps feedback?: #f))
                      
                      (define (profile-bandwiths profile)
                        (profile  1)
                        (profile  2)
                        (profile  4)
                        (profile  8)
                        (profile 16))
                      
                      (declare (proper-tail-calls))
                      (wait (+ start recuperate))
                      (increase! start recuperate)
                      (profile-bandwiths profile-upload)
                      (profile-bandwiths profile-download)
                      (profile-bandwiths profile-both)
                      (exit-thread heartbeat-thread)
                      (thread-join! heartbeat-thread)
                      (exit-thread redraw-thread)
                      (thread-join! redraw-thread)
                      (exit-thread receive-thread)
                      (thread-join! receive-thread)
                      (receive (server-profile client-profile) (retrieve-profiles client)
                        (stop-profile client)
                        (with-task-mutex
                          (lambda ()
                            (feedback "Profile done")
                            (close panel)
                            (let ((parent {Directory Documents "profiles"}))
                              (let ((dir (timestamped-directory parent "profile")))
                                (create-directories dir)
                                (save-binary (new-file dir "<server>.replay") server-profile)
                                (save-binary (new-file dir (add-extension (get-character-name client) "replay")) client-profile)
                                (view-replay-directory dir))))))))
                  'send)))
          (thread-base-priority-set! heartbeat-thread udp-priority)
          (thread-base-priority-set! redraw-thread udp-priority)
          (thread-base-priority-set! send-thread udp-priority)
          (thread-base-priority-set! receive-thread udp-priority)
          (thread-start! heartbeat-thread)
          (thread-start! redraw-thread)
          (thread-start! send-thread)
          (thread-start! receive-thread))))))


(definition protected (profile-heartbeat)
  ))
