;;;============
;;;  Together
;;;============
;;;
;;;; Gathering Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.gathering jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.clipboard)
        (jazz.component)
        (jazz.console)
        (jazz.document)
        (jazz.editor)
        (jazz.event)
        (jazz.exemplar)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.math)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.snapshot)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.syntax (phase syntax))
        (jazz.template)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (time)
        (gaea.dye)
        (gaea.geometry)
        (gaea.math)
        (world)
        (world.asset)
        (world.audio)
        (world.autoload)
        (world.build)
        (world.camera)
        (world.capture)
        (world.chronology)
        (world.circle)
        (world.client)
        (world.client.text)
        (world.client.tier)
        (world.client.udp)
        (world.colors)
        (world.configure)
        (world.context)
        (world.debugging)
        (world.evolution)
        (world.exibit)
        (world.fog)
        (world.gc)
        (world.group)
        (world.hierarchy)
        (world.history)
        (world.id)
        (world.interface)
        (world.interface.actions)
        (world.interface.bindings)
        (world.interface.captures)
        (world.interface.chat)
        (world.interface.command)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.evolution)
        (world.interface.exception)
        (world.interface.frame)
        (world.interface.invitations)
        (world.interface.mainbar)
        (world.interface.panel)
        (world.interface.participation)
        (world.interface.script)
        (world.interface.sheet)
        (world.interface.text)
        (world.interface.timeline)
        (world.interface.tooltip)
        (world.io)
        (world.live)
        (world.logging)
        (world.manager)
        (world.moment)
        (world.moment.syntax (phase syntax))
        (world.motion)
        (world.pane)
        (world.participation)
        (world.platform)
        (world.player)
        (world.preprocess)
        (world.problem)
        (world.profile)
        (world.profiling)
        (world.ring)
        (world.screenshot)
        (world.script.asset)
        (world.section)
        (world.settings)
        (world.skybox)
        (world.sound)
        (world.space)
        (world.stream)
        (world.streamer)
        (world.streaming)
        (world.support)
        (world.task)
        (world.time)
        (world.timeline)
        (world.udp)
        (world.universe)
        (world.video)
        (world.window)
        (world.zone)
        (together)
        (together.bbr)
        (together.experiment)
        (together.network)
        (together.options)
        (together.organize)
        (together.portal)
        (together.record)
        (together.replay)
        (together.replay-space)
        (together.script)
        (together.script-space)
        (together.settings)
        (together.simulate-space)
        (together.simulator)
        (together.sphere-space)
        (together.visualizer)
        (together.zone)
        (together.zoom))


(definition auto-hide?
  (world-setting 'together.auto-hide? #t))


(definition (auto-audio?)
  (world-setting 'together.auto-audio? #t))

(definition (auto-video?)
  (world-setting 'together.auto-video? #t))

(definition (auto-live?)
  (if (admin?)
      (world-setting 'together.auto-live? #t)
    #t))


(definition connect-sound
  (world-setting 'together.connect-sound #f))

(definition connect-attention
  (world-setting 'together.connect-attention #f))

(definition connect-message
  (world-setting 'together.connect-message #f))

(definition message-sound
  (world-setting 'together.message-sound #t))

(definition message-attention
  (world-setting 'together.message-attention #t))


(definition focus-unmute?
  (world-setting 'together.focus-unmute? #f))

(definition navigate-shortcuts?
  (world-setting 'together.navigate-shortcuts? #f))


(definition edited-script
  (world-setting 'together.edited-script #f))


(definition protected show-debug?
  #f)

(definition protected (set-show-debug? flag)
  (set! show-debug? flag))


(definition protected show-media
  #f)

(definition protected (set-show-media what)
  (set! show-media what))


;; quicky
(cond-expand
  (windows
   (hub get-hide-last-mouse)
   (hub set-hide-last-mouse))
  (else))


;;;
;;;; Gathering-Space
;;;


(define-trait gathering-bindings Bindings
  (<Trait>                   name: gathering
    (<install>
      (<world-main!>
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: view-news                  active?: #t)
        (<!>                 name: view-roadmap               active?: #t)
        (<!>                 name: view-help                  active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-interface           active?: #t)
        (<!>                 name: toggle-windowed-mode       active?: #t))
      (<world-people!>
        (<!>                 name: toggle-participation       active?: #t)
        (<!>                 name: toggle-invite              active?: #t))
      (<world-chat!>
        (<!>                 name: command-message            active?: #t)
        (<!>                 name: command-slash              active?: #t)
        (<!>                 name: repeat-previous            active?: #t))
      (<world-script!>
        (<!>                 name: test1                      active?: #t)
        (<!>                 name: test2                      active?: #t)
        (<!>                 name: test3                      active?: #t)
        (<!>                 name: test4                      active?: #t)
        (<!>                 name: test5                      active?: #t)
        (<!>                 name: test6                      active?: #t)
        (<!>                 name: test7                      active?: #t)
        (<!>                 name: test8                      active?: #t)
        (<!>                 name: test9                      active?: #t)
        (<!>                 name: test0                      active?: #t)
        (<!>                 name: run-script                 active?: #t)
        (<!>                 name: run-last-script            active?: #t)
        (<!>                 name: view-script                active?: #t)
        (<!>                 name: view-workspace             active?: #t)
        (<!>                 name: target-script              active?: #t)
        (<!>                 name: zoom-horizontally          active?: #t)
        (<!>                 name: zoom-vertically            active?: #t)
        (<!>                 name: zoom-fullscreen            active?: #t)
        (<!>                 name: clear-console              active?: #t)
        (<!>                 name: clear-terminal             active?: #t))
      (<world-debug!>
        (<!>                 name: toggle-profiler            active?: #t)
        (<!>                 name: toggle-profiler-all        active?: #t)
        (<!>                 name: toggle-history             active?: #t)
        (<!>                 name: toggle-gc-sound            active?: #t)
        (<!>                 name: explore-interface          active?: #t)
        (<!>                 name: toggle-debug-sections      active?: #t)
        (<!>                 name: garbage-collect            active?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               active?: #t))
      (<together-audio!>
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: video-options              active?: #t))
      (<together-record!>
        (<!>                 name: process-recording          active?: #t))
      (<together-share!>
        (<!>                 name: preprocess-streams         active?: #t)
        (<!>                 name: preprocess-qualities       active?: #t)
        (<!>                 name: capture-window             active?: #t))
      (<together-profile!>
        (<!>                 name: profile-pulse              active?: #t)
        (<!>                 name: profile-bbr                active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: toggle-evolution           active?: #t)
        (<!>                 name: toggle-stress              active?: #t)
        (<!>                 name: test                       active?: #t))
      (<together-experiment!>
        (<!>                 name: toggle-experiment          active?: #t)
        (<!>                 name: run-experiment7            active?: #t)
        (<!>                 name: run-experiment8            active?: #t)
        (<!>                 name: run-experiment9            active?: #t)
        (<!>                 name: run-experiment0            active?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            active?: #t)
        (<!>                 name: edit-definition            active?: #t)
        (<!>                 name: edit-script                active?: #t)
        (<!>                 name: edit-script1               active?: #t)
        (<!>                 name: edit-script2               active?: #t)
        (<!>                 name: edit-script3               active?: #t)
        (<!>                 name: edit-script4               active?: #t)
        (<!>                 name: edit-script5               active?: #t)
        (<!>                 name: edit-script6               active?: #t)
        (<!>                 name: edit-script7               active?: #t)
        (<!>                 name: edit-script8               active?: #t)
        (<!>                 name: edit-script9               active?: #t)
        (<!>                 name: edit-script0               active?: #t)))))


(define-trait gathering-group-bindings Bindings
  (<Trait>                   name: gathering
    (<install>
      (<together-menu!>
        (<!>                 name: leave-group                active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: toggle-push-to-talk        active?: #t)
        (<!>                 name: talk                       active?: #t)))))


(define-trait gathering-circle-bindings Bindings
  (<Trait>                   name: gathering
    (<install>
      (<together-menu!>
        (<!>                 name: leave-circle               active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: toggle-push-to-talk        active?: #t)
        (<!>                 name: talk                       active?: #t)))))


(class Gathering-Space extends Space
  
  
  (slot view-focused initialize #f getter generate)
  
  
  (method override (space-name self)
    'gathering)
  
  
  (method override (space-setup self)
    (nextmethod self)
    (let ((together (current-together))
          (client (current-client))
          (interface (current-interface)))
      (let ((version (process-version (current-process)))
            (date (build-short-date)))
        (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify visible?: #f)))
          (new Label-View name: 'together parent: root title: (format "{a}{a}" (or (get-banner client) tier-title) environment-title-suffix) location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
          (new Version-Label name: 'version parent: root title: (format "v{a}{a}" (present version) environment-suffix) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Version-Label name: 'date parent: root title: date location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Push-Button name: 'quit parent: root title: "Quit" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-quit self))
          (new Enter-View name: 'enter parent: root location: 'center size: {Dimension 200 70})
          (new Join-View name: 'join parent: root location: 'center size: {Dimension 505 70})
          (new Push-Button name: 'edit-circle parent: root title: "Edit Circle" location: '(center -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-edit-circle self))
          (new Join-Zoom-View name: 'join-zoom parent: root location: 'center size: {Dimension 505 70})
          (new Push-Button name: 'edit-zoom parent: root title: "Edit Circle" location: '(center -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-edit-zoom self))
          (new Push-Button name: 'copy-zoom parent: root title: "Copy Link" location: '(center -30) size: {Dimension 150 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-copy-zoom self))
          (new Create-View name: 'create parent: root location: 'center size: {Dimension 400 160})
          (new Create-Zoom-View name: 'create-zoom parent: root location: '(center (center -10)) size: {Dimension 400 210})
          (new Toggle-Button name: 'about parent: root title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-about self))
          (make-unverified-view self root)
          (set-action-handler (child root '(enter enter)) (~ on-enter self))
          (set-action-handler (locate (child root 'join) 'join) (~ on-join self))
          (set-action-handler (locate (child root 'join-zoom) 'join) (~ on-join-zoom self))
          (set-action-handler (child root '(create create)) (~ on-create-random-circle self))
          (set-action-handler (child root '(create-zoom create)) (~ on-create-zoom self))
          (set! self.root root)))))
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((together (current-together))
          (client (current-client))
          (interface (current-interface))
          (world (current-world)))
      (define (determine-cut)
        (let ((view-distance (get-view-distance world)))
          (cond ((>= view-distance 15) .01)
                ((>= view-distance 11) .02)
                ((>= view-distance 7) .04)
                (else .05))))
      
      (set-visible? root #t)
      (set-visible? (child root 'together) #t)
      (set-visible? (child root 'version) #t)
      (set-visible? (child root 'date) #t)
      (set-visible? (child root 'quit) #t)
      (set-visible? (child mainbar 'name) #t)
      (set-title (child mainbar 'name) (get-character-name client))
      (when (admin?)
        (let ((admin-visible? (get-visible? (child interface 'admin))))
          (set-visible? (child root 'join) (not admin-visible?))))
      (set-visible? (child root 'create) #t)
      (set-visible? (child root 'create-zoom) #f)
      (set-visible? (child mainbar 'profile) #t)
      (set-proportion (child interface 'people) '(220 (bounds -300)))
      (set-visible? (child interface 'people-label) #t)
      (set-visible? (child interface 'people) #t)
      (set-visible? (child interface 'streams-label) #f)
      (set-visible? (child interface 'streams) #f)
      (set-visible? (child interface 'chat-label) #t)
      (set-layouter (child interface 'chat) #f)
      (set-layouter (child interface 'command) #f)
      (set-visible? (child interface 'chat) #t)
      (set-location (child interface 'chat) '(-10 100))
      (set-proportion (child interface 'chat) (chat-proportion together))
      (set-visible? (child interface 'command-to) #t)
      (set-location (child interface 'command-to) (command-to-location together))
      (set-size (child interface 'command-to) {Dimension 226 32})
      (set-position (child interface '(command-to invite)) {Point 200 9})
      (set-position (child interface '(command-to verify)) {Point 200 9})
      (set-position (child interface '(command-to teleport)) {Point 178 9})
      (set-visible? (child interface 'command) #t)
      (set-proportion (child interface 'command) #f)
      (set-size (child interface 'command) (command-size together))
      (set-location (child interface 'command) (command-location together))
      (set-visible? (child root 'about) #t)
      (update-center-interface self)
      (layout-view interface)
      (layout-view root)
      (set-horizon-cut (determine-cut))
      (install-vista)
      (no-showcase world)
      (show root)
      (send-to-back root)
      (if (admin?)
          (unless (eq? (active-focus) (locate (child interface 'admin) '(console text)))
            (focus-world))
        (focus-world))))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (setup-visibility mainbar)
    (show-mainbar self)
    (let ((world (current-world)))
      (layout-message world)
      (layout-working world)
      (update-autotrack world)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (set-visible? root #f)
      (hide-mainbar self)
      (hide-interface)
      (reset-panel-stack)
      (no-showcase world)
      (set-horizon-cut 0.)
      (restore-fov)
      (uninstall-vista)))
  
  
  (method override (space-bindings self)
    (let ((together (current-together)))
      (let ((grouped? (grouped?))
            (circling? (circling?)))
        `(,gathering-bindings
          ,@(if grouped? (list gathering-group-bindings) '())
          ,@(if circling? (list gathering-circle-bindings) '())))))

  
  (method override (space-actions self)
    (append (list (find-actions 'together-menu)
                  (find-actions 'world-main)
                  (find-actions 'world-interface)
                  (find-actions 'world-people)
                  (find-actions 'world-chat)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-audio)
                  (find-actions 'together-video)
                  (find-actions 'together-record)
                  (find-actions 'together-share)
                  (find-actions 'together-profile)
                  (find-actions 'together-debug)
                  (find-actions 'together-experiment)
                  (find-actions 'together-script))
            (nextmethod self)))
  
  
  (method package (make-unverified-view self root)
    (let ((file (world-file '("devel" "together" "Unverified.ftx") 'Resources)))
      (let ((scroller (new Scroller-View parent: root name: 'unverified location: 'center size: {Dimension 400 300} style: 'document hscroll?: #t vscroll?: #t visible?: #f)))
        (let ((content (get-content scroller)))
          (set-layout-type content 'fill)
          (let ((text (new World-Formatted-Text-View parent: content background: #f selectable?: #f editable?: #f)))
            (set-moniker (get-document-controller text) file)
            (set-client scroller text)
            scroller)))))

  
  (method override (application-activate self)
    (install-vista))
  
  
  (method override (application-deactivate self)
    (uninstall-vista))
  
  
  (method override (central-menu-show self)
    )
  
  
  (method override (central-menu-hide self)
    )
  
  
  (method override (panel-stack-change self)
    (unless shutdown?
      (update-center-interface self #t)))
  
  
  (method override (zone-change self zone)
    (let ((together (current-together)))
      (prepare-skybox together)))
  
  
  (method override (show-me? self)
    #f)
  
  
  (method override (only-skybox self)
    (let ((together (current-together))
          (zone (current-zone)))
      (if (or (unverified?)
              (not (get-retrieved? zone))
              (not (get-selected-zone? together)))
          (cache-nebula-skybox)
        #f)))
  
  
  (method override (draw-world? self)
    together-skybox?)
  
  
  (method override (draw-message-offset self)
    120)
  
  
  (method override (vista-target? self)
    (let ((together (current-together)))
      (get-selected-zone? together)))
  
  
  (method override (enter-press self)
    (let ((together (current-together)))
      (when (eq? (active-focus) (current-interface))
        (let ((zone? (get-selected-zone? together))
              (group (get-selected-group together)))
          (cond (group
                 (with-cursor :wait
                   (lambda ()
                     (join-circle together group))))
                (zone?
                 (enter-zone together)))))))
  
  
  ;; quicky
  (hub chat-message)
  (method (on-command-message self evt)
    (chat-message (together:current-together)))
  
  
  ;; quicky
  (hub chat-slash)
  (method (on-command-slash self evt)
    (chat-slash (together:current-together)))
  
  
  (method (circle-create-enabled? self)
    (let ((together (current-together)))
      (let ((circle-view (child root '(create view))))
        (not (name-invalid circle-view)))))
  
  
  (method package (update-center-interface self (panel-stack-change? #f))
    (let ((together (current-together))
          (client (current-client))
          (interface (current-interface))
          (world (current-world)))
      (let ((selected-zone? (get-selected-zone? together))
            (selected-zone (get-selected-zone together))
            (selected-group (get-selected-group together))
            (selected-owner (get-selected-owner together))
            (selected-zoom? (get-selected-zoom? together))
            (circling? (circling?)))
        (define (unverified-visible flag)
          (set-visible? (child root 'unverified) flag))
        
        (define (enter-visible flag)
          (let ((layout (child root 'enter)))
            (when flag
              (set-title (child layout 'label) (present-zone together selected-zone))
              (layout-view layout))
            (set-visible? layout flag)))
        
        (define (join-visible flag)
          (let ((layout (child root 'join)))
            (set-visible? layout flag)
            (when flag
              (set-title (child layout 'label) selected-group)
              (layout-view layout)
              (update-description layout)))
          (let ((owner? (personal-key? client selected-owner)))
            (set-visible? (child root 'edit-circle) (and flag owner?))))
        
        (define (join-zoom-visible flag)
          (let ((layout (child root 'join-zoom)))
            (set-visible? layout flag)
            (when flag
              (set-title (child layout 'label) selected-group)
              (layout-view layout)
              (update-description layout)))
          (let ((owner? (personal-key? client selected-owner)))
            (set-visible? (child root 'edit-zoom) (and flag owner?))
            (set-visible? (child root 'copy-zoom) (and flag (not owner?)))))
        
        (define (update-description layout)
          (let ((group (find-group-info selected-group)))
            (let ((text (and group (get-description group)))
                  (desc (locate layout 'description)))
              (if (not text)
                  (begin
                    (set-visible? (get-parent desc) #f)
                    (set-size layout {Dimension 505 70}))
                (set-visible? (get-parent desc) #t)
                (set-description-text layout text)))))
        
        (define (create-visible flag)
          (let ((create (child root 'create)))
            (set-visible? create flag)
            (let ((circle-view (child create 'view)))
              (set-visible? (child create 'label) flag)
              (set-visible? circle-view flag)
              (set-visible? (child create 'invalid) flag)
              (set-visible? (child create 'create) flag)
              (let ((enabled? (circle-create-enabled? self)))
                (set-enabled? (child create 'create) enabled?)
                (set-visible? (child create 'require-camera?) (and flag enabled?))))))
        
        (define (create-zoom-visible flag)
          (let ((create (child root 'create-zoom)))
            (set-visible? create flag)
            (set-stops root (and flag (list
                                        (locate (child create 'view) 'text)
                                        (locate (child create 'link-view) 'text))))))
        
        (when (not (and (admin?) (get-visible? (child interface 'admin))))
          (unless panel-stack-change?
            (reset-panel-stack))
          (cond ((and panel-stack-change? (top-panel))
                 (unverified-visible #f)
                 (enter-visible #f)
                 (join-visible #f)
                 (join-zoom-visible #f)
                 (create-visible #f)
                 (create-zoom-visible #f))
                ((unverified?)
                 (unverified-visible #t)
                 (enter-visible #f)
                 (join-visible #f)
                 (join-zoom-visible #f)
                 (create-visible #f)
                 (create-zoom-visible #f))
                ((and selected-group (not selected-zoom?))
                 (unverified-visible #f)
                 (enter-visible #f)
                 (join-visible #t)
                 (join-zoom-visible #f)
                 (create-visible #f)
                 (create-zoom-visible #f)
                 (layout-view root))
                (selected-group
                 (unverified-visible #f)
                 (enter-visible #f)
                 (join-visible #f)
                 (join-zoom-visible #t)
                 (create-visible #f)
                 (create-zoom-visible #f)
                 (layout-view root))
                (selected-zoom?
                 (unverified-visible #f)
                 (enter-visible #f)
                 (join-visible #f)
                 (join-zoom-visible #f)
                 (create-visible #f)
                 (create-zoom-visible #t)
                 (layout-view root))
                (selected-zone?
                 (unverified-visible #f)
                 (enter-visible #t)
                 (join-visible #f)
                 (join-zoom-visible #f)
                 (create-visible #f)
                 (create-zoom-visible #f)
                 (layout-view root))
                (else
                 (unverified-visible #f)
                 (enter-visible #f)
                 (join-visible #f)
                 (join-zoom-visible #f)
                 (create-visible #t)
                 (create-zoom-visible #f)
                 (layout-view root)))))))
  
  
  (method (on-enter self evt)
    (let ((together (current-together)))
      (enter-zone together)))
  
  
  (method (on-join self evt)
    (let ((together (current-together)))
      (with-cursor :wait
        (lambda ()
          (join-circle together (get-selected-group together))))))
  
  
  (method (on-join-zoom self evt)
    (let ((together (current-together)))
      (with-cursor :wait
        (lambda ()
          (join-zoom-circle together (get-selected-group together))))))
  
  
  (method (on-edit-circle self evt)
    (let ((together (current-together)))
      (edit-circle together (get-selected-group together))))
  
  
  (method (on-edit-zoom self evt)
    (let ((together (current-together)))
      (edit-zoom together (get-selected-group together))))
  
  
  (method (on-copy-zoom self evt)
    (let ((together (current-together)))
      (copy-zoom together (get-selected-group together))))
  
  
  (method (on-create-random-circle self evt)
    (let ((together (current-together)))
      (with-cursor :wait
        (lambda ()
          (create-random-circle together)))))
  
  
  (method (on-create-zoom self evt)
    (let ((together (current-together)))
      (with-cursor :wait
        (lambda ()
          (create-zoom-circle together)))))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (define (closer frame)
        (set-visible? (child root 'join) #t)
        (set-visible? (child root 'create) #t)
        (set-visible? (child interface 'people-label) #t)
        (set-visible? (child interface 'people) #t)
        (set-visible? (child interface 'chat-label) #t)
        (set-visible? (child interface 'chat) #t)
        (set-visible? (child interface 'command-to) #t)
        (set-visible? (child interface 'command) #t)
        (update-center-interface self)
        (when view-focused
          (inhibit-focus-selects-all view-focused
            (lambda ()
              (acquire-focus view-focused)))))
      
      (let ((frame (top-frame)))
        (if (is? frame World-Document)
            (begin
              (close frame)
              (closer frame))
          (show-about self closer: closer)))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (set! view-focused (active-focus))
      (set-visible? (child root 'join) #f)
      (set-visible? (child interface 'people-label) #f)
      (set-visible? (child interface 'people) #f)
      (set-visible? (child interface 'streams-label) #f)
      (set-visible? (child interface 'streams) #f)
      (set-visible? (child interface 'chat-label) #f)
      (set-visible? (child interface 'chat) #f)
      (set-visible? (child interface 'command-to) #f)
      (set-visible? (child interface 'command) #f)
      (when (admin?)
        (set-visible? (child interface 'admin-label) #f)
        (set-visible? (child interface 'admin) #f))
      (set-visible? (child root 'enter) #f)
      (set-visible? (child root 'join) #f)
      (set-visible? (child root 'create) #f)
      (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250}))))


;;;
;;;; Zone-Space
;;;


(define-trait zone-bindings Bindings
  (<Trait>                   name: zone
    (<install>
      (<world-main!>
        (<!>                 name: graphics-options           active?: #t)
        (<!>                 name: sound-options              active?: #t)
        (<!>                 name: interface-options          active?: #t)
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: unstuck-character          active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-interface           active?: #t)
        (<!>                 name: toggle-windowed-mode       active?: #t)
        (<!>                 name: toggle-user                active?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              active?: #t)
        (<!>                 name: toggle-participation       active?: #t)
        (<!>                 name: toggle-invite              active?: #t)
        (<!>                 name: who-panel                  active?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                active?: #t)
        (<!>                 name: command-message            active?: #t)
        (<!>                 name: command-slash              active?: #t)
        (<!>                 name: repeat-previous            active?: #t))
      (<world-showcase!>
        (<!>                 name: showcase-menu              active?: #t)
        (<!>                 name: no-showcase                active?: #t)
        (<!>                 name: blocks-showcase            active?: #t)
        (<!>                 name: models-showcase            active?: #t)
        (<!>                 name: paintings-showcase         active?: #t)
        (<!>                 name: gadgets-showcase           active?: #t)
        (<!>                 name: avatars-showcase           active?: #t)
        (<!>                 name: tiles-showcase             active?: #t)
        (<!>                 name: shaders-showcase           active?: #t)
        (<!>                 name: animations-showcase        active?: #t)
        (<!>                 name: meshes-showcase            active?: #t)
        (<!>                 name: textures-showcase          active?: #t)
        (<!>                 name: skyboxes-showcase          active?: #t))
      (<world-build!>
        (<!>                 name: add-element                active?: #t)
        (<!>                 name: remove-element             active?: #t)
        (<!>                 name: change-element             active?: #t)
        (<!>                 name: select-target              active?: #t)
        (<!>                 name: delete-target              active?: #t)
        (<!>                 name: toggle-grid                active?: #t)
        (<!>                 name: toggle-grid-z              active?: #t)
        (<!>                 name: toggle-grid-y              active?: #t)
        (<!>                 name: toggle-grid-x              active?: #t)
        (<!>                 name: move-grid                  active?: #t)
        (<!>                 name: decrease-grid              active?: #t)
        (<!>                 name: increase-grid              active?: #t)
        (<!>                 name: reset-textures             active?: #t)
        (<!>                 name: change-editor-mode         active?: #t))
      (<world-target!>
        (<!>                 name: select-target-mode         active?: #t)
        (<!>                 name: move-target-mode           active?: #t)
        (<!>                 name: rotate-target-mode         active?: #t)
        (<!>                 name: scale-target-mode          active?: #t)
        (<!>                 name: skeleton-target-mode       active?: #t))
      (<world-history!>
        (<!>                 name: toggle-paused              active?: #t)
        (<!>                 name: backward-history           active?: #t)
        (<!>                 name: forward-history            active?: #t)
        (<!>                 name: step-backward              active?: #t)
        (<!>                 name: step-forward               active?: #t)
        (<!>                 name: step-over                  active?: #t)
        (<!>                 name: toggle-evaluate-future     active?: #t))
      (<world-script!>
        (<!>                 name: test1                      active?: #t)
        (<!>                 name: test2                      active?: #t)
        (<!>                 name: test3                      active?: #t)
        (<!>                 name: test4                      active?: #t)
        (<!>                 name: test5                      active?: #t)
        (<!>                 name: test6                      active?: #t)
        (<!>                 name: test7                      active?: #t)
        (<!>                 name: test8                      active?: #t)
        (<!>                 name: test9                      active?: #t)
        (<!>                 name: test0                      active?: #t)
        (<!>                 name: run-script                 active?: #t)
        (<!>                 name: run-last-script            active?: #t)
        (<!>                 name: view-script                active?: #t)
        (<!>                 name: view-workspace             active?: #t)
        (<!>                 name: view-console               active?: #t)
        (<!>                 name: view-debugger              active?: #t)
        (<!>                 name: view-toolbox               active?: #t)
        (<!>                 name: target-script              active?: #t)
        (<!>                 name: cycle-panes                active?: #t)
        (<!>                 name: zoom-horizontally          active?: #t)
        (<!>                 name: zoom-vertically            active?: #t)
        (<!>                 name: zoom-fullscreen            active?: #t)
        (<!>                 name: run-selected-script        active?: #t)
        (<!>                 name: clear-console              active?: #t)
        (<!>                 name: clear-terminal             active?: #t))
      (<world-debug!>
        (<!>                 name: toggle-info                active?: #t)
        (<!>                 name: toggle-profiler            active?: #t)
        (<!>                 name: toggle-profiler-all        active?: #t)
        (<!>                 name: toggle-history             active?: #t)
        (<!>                 name: toggle-target              active?: #t)
        (<!>                 name: reset-profiler             active?: #t)
        (<!>                 name: all-chronology             active?: #t)
        (<!>                 name: toggle-gc-sound            active?: #t)
        (<!>                 name: explore-interface          active?: #t)
        (<!>                 name: toggle-axes                active?: #t)
        (<!>                 name: toggle-orientation         active?: #t)
        (<!>                 name: toggle-debug-sections      active?: #t)
        (<!>                 name: toggle-debug-sectors       active?: #t)
        (<!>                 name: toggle-debug-areas         active?: #t)
        (<!>                 name: garbage-collect            active?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               active?: #t))
      (<together-audio!>
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: video-options              active?: #t))
      (<together-share!>
        (<!>                 name: capture-window             active?: #t))
      (<together-experiment!>
        (<!>                 name: toggle-experiment          active?: #t)
        (<!>                 name: run-experiment7            active?: #t)
        (<!>                 name: run-experiment8            active?: #t)
        (<!>                 name: run-experiment9            active?: #t)
        (<!>                 name: run-experiment0            active?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            active?: #t)
        (<!>                 name: edit-definition            active?: #t)
        (<!>                 name: edit-script                active?: #t)
        (<!>                 name: edit-script1               active?: #t)
        (<!>                 name: edit-script2               active?: #t)
        (<!>                 name: edit-script3               active?: #t)
        (<!>                 name: edit-script4               active?: #t)
        (<!>                 name: edit-script5               active?: #t)
        (<!>                 name: edit-script6               active?: #t)
        (<!>                 name: edit-script7               active?: #t)
        (<!>                 name: edit-script8               active?: #t)
        (<!>                 name: edit-script9               active?: #t)
        (<!>                 name: edit-script0               active?: #t))
      (<together-profile!>
        (<!>                 name: profile-pulse              active?: #t)
        (<!>                 name: profile-bbr                active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-mode                active?: #t)
        (<!>                 name: toggle-hide                active?: #t)
        (<!>                 name: toggle-debug               active?: #t)
        (<!>                 name: toggle-debug-energy        active?: #t)
        (<!>                 name: toggle-debug-audio         active?: #t)
        (<!>                 name: toggle-debug-video         active?: #t)
        (<!>                 name: toggle-debug-media         active?: #t)
        (<!>                 name: toggle-debug-flow          active?: #t)
        (<!>                 name: toggle-debug-live          active?: #t)
        (<!>                 name: toggle-debug-bbr           active?: #t)
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: toggle-evolution           active?: #t)
        (<!>                 name: toggle-visualizer          active?: #t)
        (<!>                 name: toggle-stress              active?: #t)
        (<!>                 name: request-evolutions         active?: #t)
        (<!>                 name: request-replays            active?: #t)
        (<!>                 name: request-captures           active?: #t)
        (<!>                 name: show-captures              active?: #t)
        (<!>                 name: add-bookmark               active?: #t)
        (<!>                 name: test                       active?: #t)))))


(define-trait zone-group-bindings Bindings
  (<Trait>                   name: avatar
    (<install>
      (<world-main!>
        (<!>                 name: open-welcome               active?: #t))
      (<together-menu!>
        (<!>                 name: leave-group                active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)))))


(define-trait zone-not-grouped-bindings Bindings
  (<Trait>                   name: zone
    (<install>
      (<world-main!>
        (<!>                 name: open-welcome               active?: #t))
      (<together-menu!>
        (<!>                 name: create-circle              active?: #t)))))


(define-trait zone-circling-bindings Bindings
  (<Trait>                   name: avatar
    (<install>
      (<together-circle!>
        (<!>                 name: avatar-mode                active?: #t)))))


(define-trait zone-free-bindings Bindings
  (<Trait>                   name: free
    (<install>
      (<world-graphics!>
        (<!>                 name: toggle-occlusion           active?: #t)
        (<!>                 name: toggle-wireframe           active?: #t)
        (<!>                 name: toggle-fog                 active?: #t)
        (<!>                 name: toggle-gadgets             active?: #t)
        (<!>                 name: toggle-normals             active?: #t)
        (<!>                 name: toggle-x-rays              active?: #t)
        (<!>                 name: toggle-redstone-x-rays     active?: #t)
        (<!>                 name: toggle-draw-me             active?: #t)
        (<!>                 name: toggle-blocks              active?: #t)
        (<!>                 name: toggle-models              active?: #t)
        (<!>                 name: toggle-multisampling       active?: #t))
      (<world-sound!>
        (<!>                 name: toggle-music               active?: #t)
        (<!>                 name: change-music               active?: #t)
        (<!>                 name: display-music              active?: #t)
        (<!>                 name: toggle-ambience            active?: #t)
        (<!>                 name: toggle-sound               active?: #t))
      (<world-zone!>
        (<!>                 name: zone-reload                active?: #t)
        (<!>                 name: zone-regenerate            active?: #t))
      (<world-movement!>
        (<!>                 name: rotate-player              active?: #t)
        (<!>                 name: move-forward               active?: #t)
        (<!>                 name: move-backward              active?: #t)
        (<!>                 name: move-left                  active?: #t)
        (<!>                 name: move-right                 active?: #t)
        (<!>                 name: toggle-run                 active?: #t))
      (<world-camera!>
        (<!>                 name: rotate-camera              active?: #t)
        (<!>                 name: zoom-in/out                active?: #t)
        (<!>                 name: move-up                    active?: #t)
        (<!>                 name: move-down                  active?: #t)
        (<!>                 name: person-motion              active?: #t)
        (<!>                 name: orbit-motion               active?: #t)
        (<!>                 name: free-motion                active?: #t)
        @needs-a-lot-more-work
        (<!>                 name: toggle-camera-smoothing    active?: #t)
        (<!>                 name: toggle-camera-follow       active?: #t)
        (<!>                 name: toggle-autotrack-mode      active?: #t))
      (<world-game!>
        (<!>                 name: jump                       active?: #t)
        (<!>                 name: action                     active?: #t)
        (<!>                 name: mind-control               active?: #t)
        (<!>                 name: toggle-aim                 active?: #t)
        (<!>                 name: toggle-free-aim            active?: #t)
        (<!>                 name: toggle-ride                active?: #t)
        (<!>                 name: toggle-fly                 active?: #t)
        (<!>                 name: toggle-vehicle             active?: #t)
        (<!>                 name: toggle-glow                active?: #t)
        (<!>                 name: compass-panel              active?: #t)
        (<!>                 name: map-panel                  active?: #t)
        (<!>                 name: combat-panel               active?: #t)
        (<!>                 name: character-panel            active?: #t)
        (<!>                 name: bag-panel                  active?: #t)
        (<!>                 name: belt-panel                 active?: #t))
      (<world-spell!>
        (<!>                 name: bullet                     active?: #t)
        (<!>                 name: arrow                      active?: #t)
        @wait
        (<!>                 name: rapid-fire                 active?: #t)
        (<!>                 name: sprint                     active?: #t)
        (<!>                 name: warp                       active?: #t)
        (<!>                 name: dash                       active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-mode                active?: #t)
        (<!>                 name: toggle-hide                active?: #t)
        (<!>                 name: toggle-debug               active?: #t)
        (<!>                 name: toggle-debug-energy        active?: #t)
        (<!>                 name: toggle-debug-audio         active?: #t)
        (<!>                 name: toggle-debug-video         active?: #t)
        (<!>                 name: toggle-debug-media         active?: #t)
        (<!>                 name: toggle-debug-flow          active?: #t)
        (<!>                 name: toggle-debug-live          active?: #t)
        (<!>                 name: toggle-debug-bbr           active?: #t)
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: toggle-visualizer          active?: #t)
        (<!>                 name: request-evolutions         active?: #t)
        (<!>                 name: request-replays            active?: #t)
        (<!>                 name: request-captures           active?: #t)
        (<!>                 name: show-captures              active?: #t)
        (<!>                 name: add-bookmark               active?: #t)
        (<!>                 name: test                       active?: #t)))))


(class Zone-Space extends Sphere-Space
  
  
  (method override (space-name self)
    'zone)
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world))
          (video (current-video)))
      (unbind-camera)
      (unless (2d?)
        (person-motion world yaw: default-yaw pitch: default-pitch feedback?: #f))
      (show-mainbar self)
      (show-compass world)
      (set-proportion (child interface 'people) '(220 (bounds -324)))
      (restore-visible? (child interface 'people-label) #f)
      (restore-visible? (child interface 'people) #f)
      (set-visible? (child interface 'chat-label) #f)
      (restore-visible? (child interface 'chat) #f)
      (restore-visible? (child interface 'command) #f)
      (restore-visible? (child interface 'command-to) #f)
      (set-layouter (child interface 'chat) (lambda (panel) (chat-panel-layouter panel)))
      (set-layouter (child interface 'command) (lambda (panel) (command-bar-layouter panel)))
      (set-proportion (child interface 'chat) '(400 150))
      (set-proportion (child interface 'command) '(400 19))
      (set-location (child interface 'command-to) '(10 -182))
      (set-size (child interface 'command-to) {Dimension 406 32})
      (set-position (child interface '(command-to invite)) {Point 380 9})
      (set-position (child interface '(command-to verify)) {Point 380 9})
      (set-position (child interface '(command-to teleport)) {Point 358 9})
      (set-visible? (child mainbar 'profile) #f)
      (layout-interface)))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (layout-message world)
      (layout-working world)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (close-main-menu world)
      (hide-mainbar self)
      (hide-history world)
      (hide-compass world)
      (remember-interface)
      (reset-panel-stack)))

  
  (method override (space-bindings self)
    (let ((together (current-together)))
      (let ((grouped? (grouped?)))
        `(,zone-bindings
           ,@(cond (grouped? (list zone-group-bindings))
                   (else (list zone-not-grouped-bindings)))
           ,zone-free-bindings))))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-interface)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-people)
                  (find-actions 'world-chat)
                  (find-actions 'world-showcase)
                  (find-actions 'world-build)
                  (find-actions 'world-target)
                  (find-actions 'world-history)
                  (find-actions 'world-tile)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-menu)
                  (find-actions 'together-audio)
                  (find-actions 'together-video)
                  (find-actions 'together-circle)
                  (find-actions 'together-record)
                  (find-actions 'together-share)
                  (find-actions 'together-profile)
                  (find-actions 'together-experiment)
                  (find-actions 'together-script)
                  (find-actions 'together-debug))
            (nextmethod self)))
  
  
  (method override (fade-mainbar? self)
    #t)
  
  
  (method override (maybe-fade-mainbar self)
    (let ((window (current-window)))
      (when (fade-mainbar? self)
        (fade-mainbar (point->point$fl$ (mouse-position window)) #t))))
  
  
  (method override (central-menu-show self)
    (when (fade-mainbar? self)
      (set-fade mainbar-pane #f)
      (invalidate-view mainbar)))
  
  
  (method override (central-menu-hide self)
    (maybe-fade-mainbar self))
  
  
  (method override (panel-stack-change self)
    (zone/avatar-panel-stack-change))
  
  
  (method override (showcase-change self)
    (zone/avatar-showcase-change))
  
  
  (method override (application-activate self)
    (let ((world (current-world)))
      (when (get-autotrack-mode?)
        (maybe-enable-autotrack world #t))))
  
  
  (method override (application-deactivate self)
    (let ((world (current-world)))
      (when (get-autotrack-mode?)
        (disable-autotrack world))))
  
  
  (method override (draw-message-offset self)
    80)
  
  
  (method override (draw-working-offset self)
    80)
  
  
  (method override (mouse-moved self x y)
    (nextmethod self x y)
    (let ((world (current-world)))
      (unless (get-central-menu world)
        (fade-mainbar (new Point$fl$ x y)))))
  
  
  (method override (toggle-chat self)
    (let ((interface (current-interface))
          (world (current-world)))
      (cond ((get-visible? (child interface 'chat))
             (set-visible? (child interface 'chat) #f)
             (set-visible? (child interface 'command-to) #f)
             (set-visible? (child interface 'command) #f))
            (else
             (set-visible? (child interface 'chat) #t)
             (set-visible? (child interface 'command-to) #t)
             (set-visible? (child interface 'command) #t)))
      (update-parameter world 'chat))))


;;;
;;;; Circle-Space
;;;


(class Circle-Space extends Sphere-Space
  
  
  (method override (space-name self)
    'circle)
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((together (current-together))
          (interface (current-interface))
          (world (current-world))
          (video (current-video)))
      (unbind-camera)
      (show-mainbar self)
      (show-compass world)
      (set-visible? (child mainbar 'circle-name) #t)
      (set-title (child mainbar 'circle-name) current-circle-name)
      (set-visible? (child mainbar 'profile) #t)
      (set-proportion (child interface 'people) '(220 (bounds -324)))
      (restore-visible? (child interface 'people-label) #f)
      (restore-visible? (child interface 'people) #f)
      (set-proportion (child interface 'streams) '(300 (bounds -324)))
      (restore-visible? (child interface 'streams-label) #f)
      (restore-visible? (child interface 'streams) #f)
      (set-visible? (child interface 'chat-label) (was-visible? (child interface 'chat)))
      (restore-visible? (child interface 'chat) #f)
      (restore-visible? (child interface 'command) #f)
      (restore-visible? (child interface 'command-to) #f)
      (set-layouter (child interface 'chat) (lambda (panel) (chat-panel-layouter panel)))
      (set-layouter (child interface 'command) (lambda (panel) (command-bar-layouter panel)))
      (set-proportion (child interface 'chat) '(400 150))
      (set-proportion (child interface 'command) '(400 19))
      (set-location (child interface 'command-to) '(10 -182))
      (set-size (child interface 'command-to) {Dimension 406 32})
      (set-position (child interface '(command-to invite)) {Point 380 9})
      (set-position (child interface '(command-to verify)) {Point 380 9})
      (set-position (child interface '(command-to teleport)) {Point 358 9})
      (layout-interface)
      (no-showcase world)))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (layout-message world)
      (layout-working world)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (close-main-menu world)
      (hide-mainbar self)
      (hide-history world)
      (hide-compass world)
      (hide-evolution world)
      (remember-interface)
      (reset-panel-stack)))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-interface)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-people)
                  (find-actions 'world-chat)
                  (find-actions 'world-showcase)
                  (find-actions 'world-build)
                  (find-actions 'world-target)
                  (find-actions 'world-history)
                  (find-actions 'world-tile)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-menu)
                  (find-actions 'together-audio)
                  (find-actions 'together-video)
                  (find-actions 'together-circle)
                  (find-actions 'together-view)
                  (find-actions 'together-record)
                  (find-actions 'together-share)
                  (find-actions 'together-profile)
                  (find-actions 'together-experiment)
                  (find-actions 'together-script)
                  (find-actions 'together-debug))
            (nextmethod self)))
  
  
  (method override (draw-message-offset self)
    80)
  
  
  (method override (draw-working-offset self)
    80)
  
  
  (method override (fade-mainbar? self)
    #t)
  
  
  (method override (maybe-fade-mainbar self)
    (let ((window (current-window)))
      (when (fade-mainbar? self)
        (fade-mainbar (point->point$fl$ (mouse-position window)) #t))))
  
  
  (method override (central-menu-show self)
    (when (fade-mainbar? self)
      (set-fade mainbar-pane #f)
      (invalidate-view mainbar)))
  
  
  (method override (central-menu-hide self)
    (maybe-fade-mainbar self))
  
  
  (method override (mouse-moved self x y)
    (nextmethod self x y)
    (let ((world (current-world)))
      (unless (get-central-menu world)
        (fade-mainbar (new Point$fl$ x y)))))
  
  
  (method protected virtual (toggle-hide self)
    (let ((world (current-world)))
      (set! auto-hide? (not auto-hide?))
      (set-video-interface? (not auto-hide?))
      (display-on/off world "Show names" (not auto-hide?))))
  
  
  (method override (toggle-chat self)
    (let ((interface (current-interface))
          (world (current-world)))
      (cond ((get-visible? (child interface 'chat))
             (set-visible? (child interface 'chat) #f)
             (set-visible? (child interface 'command-to) #f)
             (set-visible? (child interface 'command) #f))
            (else
             (set-visible? (child interface 'chat) #t)
             (set-visible? (child interface 'command-to) #t)
             (set-visible? (child interface 'command) #t)))
      (update-parameter world 'chat))))


;;;
;;;; Zone/Avatar
;;;


(definition (zone/avatar-panel-stack-change)
  (let ((world (current-world)))
    (when (get-autotrack-mode?)
      (cond ((top-panel)
             (disable-autotrack world))
            (else
             (maybe-enable-autotrack world))))))


(definition (zone/avatar-showcase-change)
  (let ((world (current-world)))
    (when (get-autotrack-mode?)
      (cond ((get-showcase world)
             (disable-autotrack world))
            (else
             (maybe-enable-autotrack world))))))


;;;
;;;; Avatar-Space
;;;


(class Avatar-Space extends Circle-Space
  
  
  (method override (space-name self)
    'avatar)
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'chat-label) #f)))

  
  (method override (space-bindings self)
    (let ((together (current-together)))
      (let ((grouped? (grouped?))
            (avatar? (avatar-mode?)))
        `(,zone-bindings
          ,circling-bindings
          ,zone-circling-bindings
          ,@(if (eq? current-circle-mode 'presence) (list circle-bindings) '())
          ,zone-free-bindings))))
  
  
  (method override (panel-stack-change self)
    (zone/avatar-panel-stack-change))
  
  
  (method override (showcase-change self)
    (zone/avatar-showcase-change))
  
  
  (method override (application-activate self)
    (let ((world (current-world)))
      (when (get-autotrack-mode?)
        (maybe-enable-autotrack world #t))))
  
  
  (method override (application-deactivate self)
    (let ((world (current-world)))
      (when (get-autotrack-mode?)
        (disable-autotrack world)))))


;;;
;;;; Presence-Space
;;;


(define-trait presence-bindings Bindings
  (<Trait>                   name: presence
    (<install>
      (<world-main!>
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-interface           active?: #t)
        (<!>                 name: toggle-windowed-mode       active?: #t)
        (<!>                 name: toggle-user                active?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              active?: #t)
        (<!>                 name: toggle-participation       active?: #t)
        (<!>                 name: toggle-invite              active?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                active?: #t)
        (<!>                 name: command-message            active?: #t)
        (<!>                 name: command-slash              active?: #t)
        (<!>                 name: repeat-previous            active?: #t))
      (<world-script!>
        (<!>                 name: test1                      active?: #t)
        (<!>                 name: test2                      active?: #t)
        (<!>                 name: test3                      active?: #t)
        (<!>                 name: test4                      active?: #t)
        (<!>                 name: test5                      active?: #t)
        (<!>                 name: test6                      active?: #t)
        (<!>                 name: test7                      active?: #t)
        (<!>                 name: test8                      active?: #t)
        (<!>                 name: test9                      active?: #t)
        (<!>                 name: test0                      active?: #t)
        (<!>                 name: run-script                 active?: #t)
        (<!>                 name: run-last-script            active?: #t)
        (<!>                 name: view-script                active?: #t)
        (<!>                 name: view-workspace             active?: #t)
        (<!>                 name: view-console               active?: #t)
        (<!>                 name: view-debugger              active?: #t)
        (<!>                 name: view-toolbox               active?: #t)
        (<!>                 name: target-script              active?: #t)
        (<!>                 name: zoom-horizontally          active?: #t)
        (<!>                 name: zoom-vertically            active?: #t)
        (<!>                 name: zoom-fullscreen            active?: #t)
        (<!>                 name: run-selected-script        active?: #t)
        (<!>                 name: clear-console              active?: #t)
        (<!>                 name: clear-terminal             active?: #t))
      (<world-debug!>
        (<!>                 name: toggle-profiler            active?: #t)
        (<!>                 name: toggle-profiler-all        active?: #t)
        (<!>                 name: toggle-history             active?: #t)
        (<!>                 name: toggle-gc-sound            active?: #t)
        (<!>                 name: explore-interface          active?: #t)
        (<!>                 name: garbage-collect            active?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               active?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            active?: #t)
        (<!>                 name: edit-definition            active?: #t)
        (<!>                 name: edit-script                active?: #t)
        (<!>                 name: edit-script1               active?: #t)
        (<!>                 name: edit-script2               active?: #t)
        (<!>                 name: edit-script3               active?: #t)
        (<!>                 name: edit-script4               active?: #t)
        (<!>                 name: edit-script5               active?: #t)
        (<!>                 name: edit-script6               active?: #t)
        (<!>                 name: edit-script7               active?: #t)
        (<!>                 name: edit-script8               active?: #t)
        (<!>                 name: edit-script9               active?: #t)
        (<!>                 name: edit-script0               active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-mode                active?: #t)
        (<!>                 name: toggle-hide                active?: #t)
        (<!>                 name: toggle-debug               active?: #t)
        (<!>                 name: toggle-debug-energy        active?: #t)
        (<!>                 name: toggle-debug-audio         active?: #t)
        (<!>                 name: toggle-debug-video         active?: #t)
        (<!>                 name: toggle-debug-media         active?: #t)
        (<!>                 name: toggle-debug-flow          active?: #t)
        (<!>                 name: toggle-debug-live          active?: #t)
        (<!>                 name: toggle-debug-bbr           active?: #t)
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: toggle-evolution           active?: #t)
        (<!>                 name: toggle-visualizer          active?: #t)
        (<!>                 name: toggle-stress              active?: #t)
        (<!>                 name: request-evolutions         active?: #t)
        (<!>                 name: request-replays            active?: #t)
        (<!>                 name: request-captures           active?: #t)
        (<!>                 name: show-captures              active?: #t)
        (<!>                 name: add-bookmark               active?: #t)
        (<!>                 name: test                       active?: #t)))))


(class Presence-Space extends Circle-Space
  
  
  (slot power?      initialize #f getter generate)
  (slot hide-ring   initialize #f getter generate)
  (slot hide-thread initialize #f getter generate)
  
  
  (method override (space-name self)
    'presence)
  
  
  (method override (space-setup self)
    (nextmethod self)
    (let ((together (current-together))
          (interface (current-interface)))
      (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify visible?: #f)))
        (set! self.root root))))
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((together (current-together))
          (interface (current-interface))
          (world (current-world)))
      (free-motion world feedback?: #f)
      (bind-camera)
      (set-proportion (child interface 'people) '(220 (bounds -300)))
      (set-proportion (child interface 'streams) '(300 (bounds -300)))
      (set-layouter (child interface 'chat) #f)
      (set-layouter (child interface 'command) #f)
      (set-location (child interface 'chat) '(-10 100))
      (set-proportion (child interface 'chat) (chat-proportion together))
      (set-proportion (child interface 'command) #f)
      (set-size (child interface 'command) (command-size together))
      (set-location (child interface 'command) (command-location together))
      (set-location (child interface 'command-to) (command-to-location together))
      (set-size (child interface 'command-to) {Dimension 226 32})
      (set-position (child interface '(command-to invite)) {Point 200 9})
      (set-position (child interface '(command-to verify)) {Point 200 9})
      (set-position (child interface '(command-to teleport)) {Point 178 9})
      (layout-view interface)
      (layout-view root)
      (when auto-hide?
        (install-hider self)
        (delay-hide-interface self #t))
      (show root)
      (send-to-back root)
      (if (admin?)
          (unless (eq? (active-focus) (locate (child interface 'admin) '(console text)))
            (focus-world))
        (focus-world))))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (layout-message world)
      (layout-working world)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (restore-fov)
      (uninstall-push-to-talk)
      (circle-uninstall-camera)
      (hide root)
      (when auto-hide?
        (uninstall-hider self))))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-interface)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-people)
                  (find-actions 'world-chat)
                  (find-actions 'world-showcase)
                  (find-actions 'world-build)
                  (find-actions 'world-target)
                  (find-actions 'world-history)
                  (find-actions 'world-tile)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-menu)
                  (find-actions 'together-audio)
                  (find-actions 'together-video)
                  (find-actions 'together-circle)
                  (find-actions 'together-view)
                  (find-actions 'together-record)
                  (find-actions 'together-share)
                  (find-actions 'together-profile)
                  (find-actions 'together-experiment)
                  (find-actions 'together-script)
                  (find-actions 'together-debug))
            (nextmethod self)))

  
  (method override (space-bindings self)
    (let ((together (current-together)))
      (let ((grouped? (grouped?))
            (avatar? (avatar-mode?)))
        `(,presence-bindings
          ,circling-bindings
          ,zone-circling-bindings
          ,@(if (eq? current-circle-mode 'presence) (list circle-bindings) '())))))
  
  
  (method override (show-me? self)
    #f)
  
  
  (method override (draw-compass? self)
    #f)
  
  
  (method override (draw-world? self)
    (and (not (2d?))
         (or (eq? current-circle-mode 'avatar)
             (eq? current-circle-mode 'presence))))
  
  
  (method override (draw-skybox? self)
    (or (eq? current-circle-mode 'avatar)
        (eq? current-circle-mode 'presence)))
  
  
  (method override (draw-horizon? self)
    (if (2d?)
        #f
      (nextmethod self)))
  
  
  ;;;
  ;;;; Mainbar
  ;;;
  
  
  (method override (mainbar-show self)
    (install-power self)
    (nextmethod self))
  
  
  (method override (mainbar-hide self)
    (uninstall-power self)
    (nextmethod self))
  
  
  (method (install-power self)
    (let ((client (current-client)))
      (unless power?
        (install-microphone-power-probe)
        (let ((view (child mainbar 'microphone-power)))
          (let ((thread
                  (new-thread
                    (lambda ()
                      (declare (proper-tail-calls))
                      (let (loop)
                        (when power?
                          (with-task-mutex
                            (lambda ()
                              (set-power view (microphone-power-level))))
                          (sleep .04)
                          (loop))))
                    'power)))
            (set! power? #t)
            (thread-start! thread))))))
  
  
  (method (uninstall-power self)
    (let ((client (current-client)))
      (when power?
        (uninstall-microphone-power-probe)
        (set! power? #f))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (toggle-hide self)
    (let ((world (current-world)))
      (set! auto-hide? (not auto-hide?))
      (if auto-hide?
          (begin
            (install-hider self)
            (show-interface self #t))
        (show-interface self #f))
      (display-on/off world "Auto hide" auto-hide?)))
  
  
  (method override (toggle-chat self)
    (let ((interface (current-interface))
          (world (current-world)))
      (toggle-visible? (child interface 'chat-label))
      (toggle-visible? (child interface 'chat))
      (toggle-visible? (child interface 'command-to))
      (toggle-visible? (child interface 'command))
      (update-parameter world 'chat)))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (receive-files self pos pathnames)
    (let ((together (current-together)))
      (when (developer?)
        (or (receive-replay together pathnames)
            (for-each (lambda (pathname)
                        (cond ((directory? pathname)
                               @this-needs-to-be-really-thought-out-correctly
                               (iterate-directory pathname
                                 (lambda (file)
                                   (when (and (file? file)
                                              (member? (get-extension file) image-extensions test: extension=?))
                                     (let ((stream (stream-image-file file)))
                                       (delay-stream stream))))))
                              ((file? pathname)
                               @this-is-broken-at-the-moment
                               (when (member? (get-extension pathname) image-extensions test: extension=?)
                                 (let ((stream (stream-image-file pathname)))
                                   (delay-stream stream))))))
                      pathnames)))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-moved self x y)
    (nextmethod self x y)
    (when application-active?
      (unless (script-visible? self)
        (cond-expand
          (windows
           (let ((together (current-together)))
             (let ((point (new Point$fl$ x y)))
               ;; quick hack around windows sending
               ;; mouse-moved every second even with
               ;; the mouse not moving at all
               (when (or (not (get-hide-last-mouse together))
                         (nu/=? (get-hide-last-mouse together) point))
                 (show-interface self #t)
                 (set-hide-last-mouse together point)))))
          (else
           (show-interface self #t))))))
  
  
  (method override (mouse-down self h v)
    (nextmethod self h v)
    (mouse-activity self #f))
  
  
  (method override (mouse-up self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method override (mouse-action self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method override (double-click self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method override (multiple-click self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method (mouse-activity self (hide-interface? #t))
    (when application-active?
      (unless (script-visible? self)
        (show-interface self hide-interface?))))
  
  
  (method (script-visible? self)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (get-visible? panel))))
  
  
  (method (install-hider self)
    (unless hide-thread
      (let ((thread (new-thread
                      (lambda ()
                        (declare (proper-tail-calls))
                        (let (loop)
                          (let ((proc (wait hide-ring)))
                            (when proc
                              (delay-event
                                (lambda ()
                                  (proc)))
                              (loop)))))
                      'hider)))
        (set! hide-ring (new Time-Ring 1))
        (set! hide-thread thread)
        (thread-base-priority-set! thread event-priority)
        (thread-start! thread))))
  
  
  (method (uninstall-hider self)
    (when hide-thread
      (terminate hide-ring)
      (thread-join! hide-thread)
      (set! hide-ring #f)
      (set! hide-thread #f)))
  
  
  ;; we probably need a tolerance so moving
  ;; only 1 pixel doesn't show the interface
  (method override (show-interface self hide-interface?)
    (let ((together (current-together))
          (window (current-window))
          (interface (current-interface))
          (video (current-video)))
      (unless video-interface?
        @wait-buggy
        (show-cursor window)
        (for-each (lambda (child)
                    (when (and (is? child World-Actionbar)
                               (get-auto-show/hide? child))
                      (set-visible? child #t)))
                  (get-children interface))
        (set-video-interface? #t))
      (delay-hide-interface self hide-interface?)))
  
  
  (method (delay-hide-interface self hide-interface?)
    (when auto-hide?
      (let ((hide-time (+ (current-seconds) 2.)))
        (empty hide-ring)
        (when hide-interface?
          (insert hide-ring hide-time (lambda ()
                                        (with-task-mutex
                                          (lambda ()
                                            (let ((window (current-window))
                                                  (interface (current-interface))
                                                  (world (current-world))
                                                  (video (current-video)))
                                              (when (and (is? (current-space) Presence-Space)
                                                         auto-hide?
                                                         video-interface?
                                                         (not (current-tooltip-context))
                                                         (not (get-central-menu world)))
                                                @wait-buggy
                                                (hide-cursor window)
                                                (for-each (lambda (child)
                                                            (when (and (is? child World-Actionbar)
                                                                       (get-auto-show/hide? child))
                                                              (set-visible? child #f)))
                                                          (get-children interface))
                                                (set-video-interface? #f))))))))))))


;;;
;;;; Circle
;;;


(define-trait circling-bindings Bindings
  (<Trait>                   name: circling
    (<install>
      (<together-menu!>
        (<!>                 name: leave-circle               active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: toggle-push-to-talk        active?: #t)
        (<!>                 name: talk                       active?: #t)
        @wait-live-change (<!>                 name: toggle-echo-cancel         active?: #t)
        @wait-live-change (<!>                 name: toggle-noise-suppress      active?: #t)
        (<!>                 name: toggle-rndenoise           active?: #t)
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: toggle-camera              active?: #t)
        (<!>                 name: change-quality             active?: #t)
        (<!>                 name: video-options              active?: #t))
      (<together-circle!>
        (<!>                 name: presence-mode              active?: #t)
        (<!>                 name: focus-mode                 active?: #t)
        (<!>                 name: gallery-mode               active?: #t)
        (<!>                 name: organize-circle            active?: #t)
        (<!>                 name: circle-options             active?: #t))
      (<together-view!>
        (<!>                 name: toggle-paused              active?: #t)
        (<!>                 name: seek-backward              active?: #t)
        (<!>                 name: seek-forward               active?: #t))
      (<together-record!>
        (<!>                 name: start-recording            active?: #t)
        (<!>                 name: stop-recording             active?: #t))
      (<together-share!>
        (<!>                 name: toggle-streams             active?: #t)
        (<!>                 name: add-image                  active?: #t)
        (<!>                 name: add-video                  active?: #t)
        (<!>                 name: add-music                  active?: #t)
        (<!>                 name: remove-stream              active?: #t)
        (<!>                 name: toggle-screen-share        active?: #t)
        (<!>                 name: toggle-window-share        active?: #t)
        (<!>                 name: capture-window             active?: #t))
      (<together-experiment!>
        (<!>                 name: toggle-experiment          active?: #t)
        (<!>                 name: run-experiment7            active?: #t)
        (<!>                 name: run-experiment8            active?: #t)
        (<!>                 name: run-experiment9            active?: #t)
        (<!>                 name: run-experiment0            active?: #t)
        (<!>                 name: exibit-on                  active?: #t)
        (<!>                 name: exibit-off                 active?: #t)))))


(define-trait circle-bindings Bindings
  (<Trait>                   name: circle
    (<install>
      (<together-circle!>
        (<!>                 name: bring-to-front             active?: #t)
        (<!>                 name: backspace-press            active?: #t)
        (<!>                 name: enter-press                active?: #t)
        (<!>                 name: left-press                 active?: #t)
        (<!>                 name: right-press                active?: #t)
        (<!>                 name: up-press                   active?: #t)
        (<!>                 name: down-press                 active?: #t)
        (<!>                 name: tab-press                  active?: #t)
        (<!>                 name: number-press               active?: #t)))))


;;;
;;;; Together
;;;


(class Together extends Object
  
  
  (slot spaces              initialize #f getter generate)
  (slot space               initialize #f getter generate)
  (slot configuration       initialize #f getter generate)
  (slot selected-zone?      initialize #f getter generate)
  (slot selected-zone       initialize 'start getter generate)
  (slot selected-group      initialize #f getter generate)
  (slot selected-data       initialize #f getter generate)
  (slot selected-owner      initialize #f getter generate)
  (slot selected-zoom?      initialize #f getter generate)
  (slot created-zoom-circle initialize #f getter generate)
  (slot preserved-eye?      initialize #f getter generate)
  (slot preserved-eye       initialize #f getter generate)
  (slot preserved-distance  initialize #f getter generate)
  (slot message-recipient   initialize #f getter generate)
  (slot draw-hook           initialize #f getter generate)
  (slot sleep-disconnected  initialize #f getter generate)
  (slot chat-wide?          initialize #f getter generate)
  (slot chat-was-hidden?    initialize #f getter generate)
  (slot previous-command    initialize #f getter generate)
  
  (cond-expand
    (windows
     (slot hide-last-mouse initialize #f accessors generate))
    (else))
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! spaces (make-table test: eq?))
    (set! preserved-eye (make-camera)))
  
  
  (method (need-space self what)
    (or (table-ref spaces what #f)
        (let ((space (case what
                       ((gathering) (new Gathering-Space))
                       ((zone) (new Zone-Space))
                       ((avatar) (new Avatar-Space))
                       ((presence) (new Presence-Space))
                       ((script) (new Script-Space))
                       ((replay) (new Replay-Space))
                       ((simulate) (new Simulate-Space)))))
          (space-setup space)
          (table-set! spaces what space)
          space)))
  
  
  (method (together-enter self auto-enter)
    (let ((client (current-client)))
      (define (enter-gathering)
        (set! space (need-space self 'gathering))
        (space-install space)
        (set-current-space space)
        (add-snapshot-property 'live.space (space-name space))
        (space-activate space))  
      
      (define (handle-reconnection mode zone group require-microphone? require-camera?)
        (unless (eq? zone 'start)
          (restore-zone zone))
        (reconnection client zone group)
        (if (string? group)
            (check-error (rejoin-circle self group require-microphone? require-camera?))
          (if (or (eq? mode 'observer)
                  (eq? zone 'start))
              (enter-gathering)
            (check-error (reenter-zone self zone)))
          (when (integer? group)
            (check-error (rejoin-group self group)))))
      
      (define (restore-zone zone)
        (let ((tree (people-tree self)))
          (let ((row (user-data-row tree zone test: equal?)))
            (when row
              (set-single-selection tree (row->line tree row) generate-event?: #f)
              (set! selected-zone zone)
              (set! selected-data zone)
              (set! message-recipient zone)
              (set-path (current-zone) zone)))))
      
      (define (check-error err)
        (client-status client err)
        (when err
          (enter-gathering)
          (display-problem err)))
      
      (when (current-space+)
        (space-deactivate (current-space))
        (space-uninstall (current-space)))
      (together-ready self)
      (when auto-create
        (for-each (lambda (name)
                    (create-group client name #f #t #t #t #t #f #f #f #f))
                  (listify auto-create)))
      (cond ((get-reconnect-info client)
             =>
             (lambda (reconnect-info)
               (bind (mode zone group require-microphone? require-camera?) reconnect-info
                 (handle-reconnection mode zone group require-microphone? require-camera?))))
            (auto-join
             (check-error (autojoin-circle self auto-join)))
            (auto-enter
             (check-error (autoenter-zone self)))
            (else
             (enter-gathering)))
      (player-ready)))
  
  
  (method (together-exit self)
    (together-destroy self))
  
  
  (method (together-ready self)
    (when (window?)
      (let ((world (current-world))
            (client (current-client)))
        (setup-configuration self)
        (start-gc-monitor)
        (setup-log-listener)
        (prepare-skybox self)
        (install-zone self)
        (install-hooks self)
        (set-escape-hook world (~ escape-press self))
        (let ((hierarchy (ready-to-server client)))
          (register-hierarchy hierarchy)
          (hierarchy-update self hierarchy))
        (start-debugging))))
  
  
  (method (together-destroy self)
    (when (window?)
      (let ((world (current-world))
            (client (current-client)))
        (stop-gc-monitor)
        (stop-log-listener)
        (let ((udp-client (get-udp-client client)))
          (stop udp-client)
          (close-live-stream client)
          (close-send-streams udp-client)
          (close-receive-streams udp-client))
        (uninstall-hooks self)
        (when space
          (space-deactivate space)
          (space-uninstall space))
        (uninstall-zone self)
        (unbind-camera)
        (set! space (new Space))
        (set-current-space space)
        (set-current-together #f)
        (clear-snapshot-property 'live.space))))
  
  
  (method (setup-configuration self)
    (let ((file (user-client-file)))
      (set! configuration (instantiate (read-form file)))))
  
  
  (method (install-zone self)
    (let ((interface (current-interface)))
      ;; common
      (new People-Label name: 'people-label parent: interface title: "People" location: '(10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (new People-Panel name: 'people parent: interface location: '(10 100) proportion: '(220 (bounds -300)) layout-type: 'border visible?: #f)
      (new Streams-Label name: 'streams-label parent: interface title: "Streams" location: '(10 64) size: {Dimension 300 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (new Streams-Panel name: 'streams parent: interface location: '(10 100) proportion: '(300 (bounds -300)) layout-type: 'border visible?: #f)
      (new Chat-Label name: 'chat-label parent: interface title: "Chat" location: '(-10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (let ((chat (child interface 'chat)))
        (set-border-type (child chat 'border) 'solid)
        (set-border-color (child chat 'border) {Color Dark-Gray})
        (set-location chat '(-10 100))
        (set-proportion chat '(220 (bounds -354)))
        (set-visible? chat #f))
      (let ((to (new View name: 'command-to parent: interface size: {Dimension 226 32} visible?: #f)))
        (new Kind-Label name: 'to-label parent: to title: "To" position: {Point 0 10} size: {Dimension 22 21} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: '(head head))
        (new Kind-Label name: 'to parent: to title: "The gathering" position: {Point 23 10} size: {Dimension 220 21} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: '(head head))
        (new Invite-Tool name: 'invite parent: to position: {Point 200 9} resource: {Image-Resource "Workbench"} action-handler: (~ on-invite self))
        (new Verify-Tool name: 'verify parent: to position: {Point 200 9} resource: {Image-Resource "JEMValidator"} action-handler: (~ on-verify self))
        (new Teleport-Tool name: 'teleport parent: to position: {Point 178 9} resource: {Image-Resource "Previous"} action-handler: (~ on-teleport self)))
      (let ((command (child interface 'command)))
        (set-border-type (child command 'border) 'solid)
        (set-border-color (child command 'border) {Color Dark-Gray})
        (set-location command '(-10 -200))
        (set-size command (new Dimension 220 19))
        (set-visible? command #f))
      (new Kind-Label name: 'experiment-label parent: interface title: "Experiment" location: '(center 144) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (new Experiment-Panel name: 'experiment parent: interface location: '(center 180) proportion: '((bounds -500) (bounds -380)) layout-type: 'fill visible?: #f)
      (when (admin?)
        (new Kind-Label name: 'admin-label parent: interface title: "Admin" location: '(center 144) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
        (new Admin-Panel name: 'admin parent: interface location: '(center 180) proportion: '((bounds -500) (bounds -380)) layout-type: 'fill visible?: #f)
        (initial-banner (locate (child interface 'admin) '(console text)) "Together server"))
      (update-profile-label)))
  
  
  (method (uninstall-zone self)
    (let ((interface (current-interface)))
      (close (child interface 'people-label))
      (close (child interface 'people))
      (close (child interface 'streams-label))
      (close (child interface 'streams))
      (close (child interface 'chat-label))
      (close (child interface 'command-to))
      (close (child interface 'experiment-label))
      (close (child interface 'experiment))
      (when (admin?)
        (close (child interface 'admin-label))
        (close (child interface 'admin)))))
  
  
  (method (prepare-skybox self)
    (let ((zone (current-zone)))
      (unless (get-skybox zone)
        (install-skybox zone (cache-together-skybox)))))
  
  
  (method protected (cleanup-group/circle self)
    (cond ((circling?)
           (leave-circle self))
          ((grouped?)
           (leave-group self))))
  
  
  (method protected (sleep-process self)
    (assert-task-mutex)
    (when (client?)
      (let ((client (current-client)))
        (cond ((circling?)
               (leave-circle self)
               (set! sleep-disconnected 'circle))
              ((grouped?)
               (leave-group self)
               (set! sleep-disconnected 'group)))
        (sleep-to-server client))))
  
  
  (method protected (wake-process self)
    (assert-task-mutex)
    ;; this can occur if some other part of the
    ;; system called bailout-client during wakeup
    (when (client?)
      (let ((client (current-client))
            (world (current-world)))
        (wake-to-server client)
        (when sleep-disconnected
          (display-message world (format "Disconnected from {a}" sleep-disconnected) duration: 5.)
          (set! sleep-disconnected #f)))))
  
  
  (method package (update-message-recipient self recipient)
    (define (effective-recipient)
      (if (or (not recipient) (eq? recipient 'zoom))
          #f
        (bind (kind name) recipient
          (case kind
            ((player)
             recipient)
            ((group)
             (if (and (is? space Sphere-Space)
                      (equal? name current-circle-name))
                 recipient
               #f))
            (else
             #f)))))
    
    (set! message-recipient (effective-recipient))
    (update-recipient-interface self))
  
  
  (method package (update-recipient-interface self)
    (let ((client (current-client))
          (interface (current-interface))
          (me (current-me)))
      (let ((to (child interface '(command-to to)))
            (invite (child interface '(command-to invite)))
            (verify (child interface '(command-to verify)))
            (teleport (child interface '(command-to teleport)))
            (user-verified? (verified?)))
        (define (no-recipient)
          (set-title to "The gathering")
          (set-color to {Color red: 32 green: 205 blue: 33})
          (set-visible? invite #f)
          (set-visible? verify #f)
          (set-visible? teleport #f))
        
        (if (not message-recipient)
            (no-recipient)
          (bind (kind name) message-recipient
            (case kind
              ((player)
               (let ((user-info (find-player-info (get-character-name client)))
                     (player-info (find-player-info name)))
                 (cond (player-info
                        (let ((user-group (get-group user-info)))
                          (let ((player-me? (equal? (get-name player-info) (get-name me)))
                                (player-mode (get-mode player-info))
                                (player-group (get-group player-info))
                                (player-verified? (get-verified? player-info))
                                (player-mobile? (get-mobile? player-info)))
                            (let ((in-party? (and user-group player-group (eq? user-group player-group))))
                              ;; to
                              (set-title to (if (and player-group (group? player-group)) (format "<{a}>" name) name))
                              (set-color to (if (and player-group (circle? player-group)) {Color World-Blue} {Color White}))
                              ;; invite
                              (if (and user-verified? (not player-me?) (not in-party?) (not player-mobile?))
                                  (begin
                                    (set-kind invite (if current-circle-name 'circle 'group))
                                    (set-visible? invite #t))
                                (set-visible? invite #f))
                              ;; verify
                              (if (and user-verified? (not player-verified?) (or in-group? current-circle-name) in-party? (not player-mobile?))
                                  (set-visible? verify #t)
                                (set-visible? verify #f))
                              ;; teleport
                              (if (and user-verified? (not player-me?) (participant?) (can-explore?) (or (not current-circle-name) (avatar-mode?)) (not player-mobile?))
                                  (set-visible? teleport #t)
                                (set-visible? teleport #f))))))
                       (else
                        (set! message-recipient #f)
                        (no-recipient)))))
              ((group)
               (set-title to name)
               (set-color to group-color)
               (set-visible? invite #f)
               (set-visible? verify #f)
               (set-visible? teleport #f))))))))
  
  
  (method package (in-call? self)
    (or in-group? current-circle-name))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-central-menu self evt)
    (let ((world (current-world)))
      (toggle-radial-menu world)))
  
  
  (method (on-toggle-participation self evt)
    (let ((interface (current-interface))
          (client (current-client))
          (zone (current-zone)))
      (let ((frame (find-component interface 'participation)))
        (if frame
            (close frame)
          (let ((template (world-file '("devel" "together" "Participation.ftx") 'Resources))
                (associations (list (cons 'name (get-character-name client))
                                    (cons 'participation (present-current-participation)))))
            (let ((expander (new Template-Expander)))
              (let ((output (open-output-string)))
                (expand expander template associations output)
                (let ((content (get-output-string output)))
                  (push-panel (open-world-document content class: World-Formatted-Text-View name: 'participation title: "Participation" size: {Dimension 550 242} background: {Color red: .000 green: .000 blue: .000 alpha: .250}))))))))))
  
  
  (method (on-toggle-invite self evt)
    (let ((interface (current-interface)))
      (let ((frame (find-component interface 'invitations)))
        (if frame
            (if (get-visible? frame)
                (begin
                  (set-visible? frame #f)
                  (pop-panel frame))
              (update-invitations frame)
              (set-visible? frame #t)
              (push-panel frame))
          (push-panel (open-frame (new World-Invitations name: 'invitations size: {Dimension 600 300} location: 'center)))))
      (focus-world)))
  
  
  (method (on-invite self evt)
    (let ((recipient (cadr message-recipient)))
      (invite-to-group self recipient current-circle-name)))
  
  
  (method (invite-to-group self recipient circle-name)
    (let ((tier (current-client))
          (world (current-world)))
      (if (not (has-microphone?))
          (display-problem no-microphone-found)
        (if (not (acquire-microphone-pipeline))
            (display-problem unable-to-acquire-microphone)
          (let ((error (client-invite tier recipient circle-name)))
            (if error
                (if (equal? error "You cannot invite yourself")
                    (display-error world error)
                  (open-message (format "{a}. Chat instead?" error)
                                caption: "Chat"
                                type: 'question
                                yes: "Yes"
                                no: "No"
                                execute: (lambda (evt)
                                           (let ((dialog (find-ascendant (get-sender evt) World-Dialog))
                                                 (button (get-property evt button:)))
                                             (close dialog)
                                             (case button
                                               ((yes)
                                                (update-message-recipient self (list 'player recipient))
                                                (show-chat self)
                                                (focus-command-text self))
                                               ((no))
                                               ((cancel)
                                                (signal-cancel)))))))
              (chat-show world (format "Invite {a}" recipient))))))))
  
  
  (method (on-verify self evt)
    (let ((recipient (cadr message-recipient)))
      (verify-identity self recipient)))
  
  
  (method (verify-identity self recipient)
    (let ((client (current-client)))
      (define (layout box)
        (let ((border (child box 'border))
              (yes (child box 'yes))
              (no (child box 'no)))
          (define (set-v view v)
            (let ((pos (get-position view)))
              (set-position view (new Point (get-h pos) v))))
          
          (set-v border 3)
          (set-v yes 65)
          (set-v no 65)))
      
      (let ((recipient (cadr message-recipient)))
        (open-message `(<span>
                         (<paragraph> justification: center
                           (<text> ,(format "Verify that you know {a}?" recipient)))
                         (<paragraph> (<text> font: Spacer-Small " "))
                         (<paragraph> justification: center
                           (<text> color: {Color red: .938 green: .428 blue: .066} "A verified person gets full access to Together")))
                      caption: "Verification"
                      layouter: layout
                      type: 'question
                      yes: "Yes"
                      no: "No"
                      execute: (lambda (evt)
                                 (let ((dialog (find-ascendant (get-sender evt) World-Dialog))
                                       (button (get-property evt button:)))
                                   (close dialog)
                                   (case button
                                     ((yes)
                                      (let ((err (client-verify client (get-character-name client) recipient)))
                                        (when (string? err)
                                          (display-error (current-world) err)))))))))))
  
  
  (method (on-teleport self evt)
    (let ((recipient (cadr message-recipient)))
      (teleport-person self recipient)))
  
  
  (method (teleport-person self recipient)
    (let ((client (current-client))
          (space (current-space))
          (world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (let ((path (get-path zone))
            (position (get-position me))
            (sight (get-sight me)))
        (if (is? space Gathering-Space)
            (display-error world "You cannot teleport someone to The gathering")
          (let ((err (client-teleport client recipient path position sight)))
            (if (string? err)
                (display-error world err)
              (chat-show world (format "Teleport {a}" recipient))))))))

  
  (method (on-message self evt)
    (chat-message self))
  
  
  @wait-live-change
  (method (on-toggle-echo-cancel self evt)
    (let ((client (current-client))
          (world (current-world)))
      (set-audio-echo-cancel? (not audio-echo-cancel?))
      (when (microphone-on? client)
        (let ((microphone-channel (get-microphone-channel client)))
          (let ((src (get-src (get-pipeline microphone-channel))))
            (update-echo-cancel src audio-echo-cancel?))))
      (display-on/off world "Echo Cancellation" audio-echo-cancel?)))
  
  
  @wait-live-change
  (method (on-toggle-noise-suppress self evt)
    (let ((client (current-client))
          (world (current-world)))
      (set-audio-noise-suppress? (not audio-noise-suppress?))
      (when (microphone-on? client)
        (let ((microphone-channel (get-microphone-channel client)))
          (let ((src (get-src (get-pipeline microphone-channel))))
            (update-noise-suppress src audio-noise-suppress?))))
      (display-on/off world "Noise Suppression" audio-noise-suppress?)))
  
  
  (method (on-toggle-rndenoise self evt)
    (let ((client (current-client))
          (world (current-world)))
      (change-rndenoise client (not audio-rndenoise?))
      (display-on/off world "Aggressive Denoising" audio-rndenoise?)))
  
  
  (method (on-toggle-microphone self evt)
    (let ((client (current-client))
          (world (current-world)))
      (if (and (not current-circle-name)
               (not (get-live-stream client)))
          (display-error world "You are not in a group")
        (with-cursor :wait
          (lambda ()
            (let ((microphone-on? (microphone-on? client)))
              (if (and (not microphone-on?) (not (has-microphone?)))
                  (display-problem no-microphone-found)
                (if (and (not microphone-on?) (not (acquire-microphone-pipeline)))
                    (display-problem unable-to-acquire-microphone)
                  (require-live-stream client)
                  (toggle-microphone client)
                  (update-parameter world 'microphone)))))))))
  
  
  (method (central-button? self evt)
    (let ((sender (get-sender evt)))
      (and (is? sender World-Action-Button)
           (find-ascendant sender World-Central-Menu))))
  
  
  (method (close-non-central-top self)
    (let ((top (top-panel)))
      (when (and top (is-not? top World-Central-Menu))
        (user-close top))))
  
  
  (method (on-audio-options self evt)
    (let ((from-central? (central-button? self evt)))
      (toggle-audio-options self from-central?)))
  
  
  (method package (toggle-audio-options self (from-central? #f))
    (let ((interface (current-interface)))
      (let ((frame (find-type interface Audio-Options)))
        (if frame
            (close frame)
          (with-cursor :wait
            (lambda ()
              (unless from-central?
                (close-non-central-top self))
              (let ((size (cond-expand
                            (windows {Dimension 466 328})
                            (else {Dimension 466 308}))))
                (push-panel (open-frame (new Audio-Options size: size location: 'center))))))))))
  
  
  (method (on-video-options self evt)
    (let ((from-central? (central-button? self evt)))
      (toggle-video-options self from-central?)))
  
  
  (method package (toggle-video-options self (from-central? #f))
    (let ((interface (current-interface)))
      (let ((frame (find-type interface Video-Options)))
        (if frame
            (close frame)
          (with-cursor :wait
            (lambda ()
              (unless from-central?
                (close-non-central-top self))
              (push-panel (open-frame (new Video-Options size: {Dimension 466 288} location: 'center)))))))))
  
  
  (method (on-organize-circle self evt)
    (let ((interface (current-interface)))
      (let ((panel (find-type interface Organize-Circle)))
        (if panel
            (close panel)
          (with-cursor :wait
            (lambda ()
              (let ((from-central? (central-button? self evt)))
                (unless from-central?
                  (close-non-central-top self))
                (push-panel (open-frame (new Organize-Circle size: {Dimension 366 588} location: 'center))))))))))
  
  
  (method (on-circle-options self evt)
    (let ((from-central? (central-button? self evt)))
      (toggle-circle-options self from-central?)))
  
  
  (method package (toggle-circle-options self (from-central? #f))
    (let ((interface (current-interface)))
      (let ((frame (find-type interface Circle-Options)))
        (if frame
            (close frame)
          (with-cursor :wait
            (lambda ()
              (unless from-central?
                (close-non-central-top self))
              (push-panel (open-frame (new Circle-Options circle-name: current-circle-name size: {Dimension 466 288} location: 'center)))))))))
  
  
  (method (on-toggle-push-to-talk self evt)
    (toggle-push-to-talk))
  
  
  (method (on-toggle-camera self evt)
    (let ((client (current-client))
          (video (current-video))
          (world (current-world)))
      (if (and (not current-circle-name)
               (not (get-live-stream client)))
          (display-error world "You are not in a group")
        (with-cursor :wait
          (lambda ()
            (if (not (has-camera?))
                (display-problem no-camera-found)
              (require-live-stream client)
              (toggle-camera client)
              (update-layouts video)
              (update-parameter world 'camera)
              @version0
              (download-profile-update)))))))
  
  
  (method (escape-press self)
    (let ((world (current-world)))
      (toggle-radial-menu world)
      (done-menu world)))
  
  
  (method (on-create-circle self evt)
    (create-circle self))
  
  
  (method (create-circle self)
    (let ((tier (current-client))
          (interface (current-interface))
          (universe (current-universe))
          (world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (define (problem problem)
        (update-cursor)
        (client-status tier problem)
        (display-problem unable-to-acquire-microphone))
      
      (set-cursor :wait)
      (let ((persistent? #f)
            (require-microphone? #t)
            (panel-class Create-Panel))
        (if (and require-microphone? (not (has-microphone?)))
            (problem no-microphone-found)
          (if (and require-microphone? (not (acquire-microphone-pipeline)))
              (problem unable-to-acquire-microphone)
            (update-cursor)
            (let ((panel (or (find-type interface panel-class)
                             (let ((panel (new panel-class parent: interface location: 'center size: {Dimension 402 167})))
                               (define (create evt)
                                 (let ((require-camera? (get-checked? (locate panel '(create require-camera?)))))
                                   (if (and require-camera? (not (has-camera?)))
                                       (problem no-camera-found)
                                     (client-status tier #f)
                                     (let ((text (locate panel '(create view text))))
                                       (let ((name (trim-whitespace (get-string-content text)))
                                             (position (get-position me))
                                             (lookat (get-lookat me))
                                             (scale (vertex 1. 1. 1.)))
                                         (let ((position (vertex+ position (vertex-scalar* (get-sight lookat) 3.))))
                                           (let ((broadcast-hierarchy? persistent?))
                                             (let ((no/exception (create-circle-at self name persistent? require-microphone? require-camera? broadcast-hierarchy? position lookat scale)))
                                               (if (string? no/exception)
                                                   (display-error world no/exception)
                                                 (close panel)
                                                 (join-circle self name))))))))))
                               
                               (define (escape evt)
                                 (close panel))
                               
                               (layout-view panel)
                               (layout-view interface)
                               (set-action-handler (locate panel '(create create)) create)
                               (set-escape-press-handler (locate panel '(create view text)) escape)
                               (set-visible? panel #t)
                               (push-panel panel)
                               panel))))
              (acquire-focus (locate panel '(create view text)))))))))
  
  
  (method (create-circle-at self name persistent? require-microphone? require-camera? broadcast-hierarchy? position lookat scale)
    (let ((tier (current-client))
          (universe (current-universe))
          (world (current-world))
          (zone (current-zone)))
      (define (block-center pos)
        (- (round (+ pos .5)) .5))
      
      (let ((id (make-unique-id))
            (position (vertex (block-center (vertex-x position)) (vertex-y position) (block-center (vertex-z position)))))
        (let ((no/exception (create-group tier name persistent? require-microphone? require-camera? broadcast-hierarchy? #f (list id position lookat scale) #f #f #f)))
          (if (string? no/exception)
              no/exception
            (clear-message world)
            (let ((class Circle-Stone)
                  (scale (vertex .4 .4 .4))
                  (color (make-dye))
                  (model circle-stone-model)
                  (script-text #f)
                  (properties '()))
              (let ((entity (apply new class name: name id: id position: position lookat: lookat scale: scale color: color model: model properties)))
                (add-element universe #f entity name position lookat scale color model script-text properties)
                (bake-entity-lighting zone entity))
              (let ((fire-position (vertex (vertex-x position) (+ (round (vertex-y position)) .5) (vertex-z position))))
                (add-block-at-position universe fire-position 51 0))
              #f))))))
  
  
  (method (on-leave-group self evt)
    (leave-group self))
  
  
  (method (leave-group self)
    (let ((tier (current-client)))
      (client-leave tier)))
  
  
  (method (on-leave-circle self evt)
    (leave-circle self))
  
  
  (method package (check-circle-stone self stone)
    (let ((world (current-world)))
      (cond ((not current-circle-name)
             (display-action world "E : Join Circle"
               (lambda ()
                 (with-cursor :wait
                   (lambda ()
                     (join-circle self (get-name stone))))))
             #t)
            (else
             #f))))
  
  
  (method package (check-invite-player self player)
    (let ((client (current-client))
          (world (current-world)))
      (let ((user-name (get-character-name client))
            (player-name (get-name player)))
        (let ((user-info (find-player-info user-name))
              (player-info (find-player-info player-name)))
          (let ((user-group (and user-info (get-group user-info)))
                (player-group (and player-info (get-group player-info))))
            (let ((in-party? (and user-group player-group (eq? user-group player-group))))
              (cond ((not in-party?)
                     (let ((invite (cond (in-group? "your audio group")
                                         (current-circle-name "your circle")
                                         (else "an audio group"))))
                       (display-action world (format "E : Invite {a} to join {a}" player-name invite)
                         (lambda ()
                           (let ((recipient player-name))
                             (invite-to-group self recipient current-circle-name))))))
                    (else
                     (display-action world (format "E : Chat with {a}" player-name)
                       (lambda ()
                         (let ((recipient player-name))
                           (update-message-recipient self (list 'player recipient))
                           (show-chat self)
                           (focus-command-text self))))))))))))
  
  
  (method package (enter-zone self)
    (let ((client (current-client))
          (window (current-window))
          (interface (current-interface))
          (world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (let ((info (participate-to-server client)))
        (if (string? info)
            (begin
              (display-error world (format "{a}" info))
              info)
          (startup-gstreamer)
          @work-in-progess
          (prepare-steps)
          (retrieve-camera client)
          (reset-chronology)
          (uninstall-vista)
          (goto-space self 'zone)
          (setup-visibility mainbar)
          (set-current-mode 'participant)
          (mode-change me 'participant)
          (add-snapshot-property 'live.player-mode current-mode)
          (unless (2d?)
            (preload-animations me)
            (prepare-motion world))
          (delay-enable-autotrack self)
          #f))))
  
  
  (method package (autoenter-zone self)
    (let ((zone (current-zone)))
      (let ((path (get-path zone)))
        (set! selected-zone path)
        (set! selected-data path)
        (enter-zone self))))
  
  
  (method package (reenter-zone self zone)
    (let ((world (current-world))
          (me (current-me)))
      (reset-chronology)
      (uninstall-vista)
      (goto-space self 'zone)
      (setup-visibility mainbar)
      (set-current-mode 'participant)
      (mode-change me 'participant)
      (add-snapshot-property 'live.player-mode current-mode)
      (unless (2d?)
        (prepare-motion world))
      (delay-enable-autotrack self)
      #f))
  
  
  (method package (present-zone self zone)
    (if (eq? zone 'start)
        "Void"
      (last zone)))
  
  
  (method (teleport-circle self position)
    (let ((zone (current-zone)))
      (let ((sight (random-horizon)))
        (let ((position (vertex+ position (vertex-scalar* sight -4.))))
          (teleport zone position sight)))))
  
  
  (method (delay-enable-autotrack self)
    (let ((world (current-world)))
      (delay-event
        (lambda ()
          (with-task-mutex
            (lambda ()
              (when (get-autotrack-mode?)
                (maybe-enable-autotrack world))))))))
  
  
  (method (observer-mode self)
    (let ((client (current-client))
          (me (current-me)))
      (set-current-mode 'observer)
      (mode-change me 'observer)
      (observe-to-server client)
      (add-snapshot-property 'live.player-mode current-mode)))
  
  
  (method package (exit-zone self)
    (let ((client (current-client))
          (interface (current-interface))
          (world (current-world))
          (zone (current-zone)))
      (reset-selection world)
      (save-to-processor client)
      (observer-mode self)
      (install-vista)
      (goto-space self 'gathering)
      (reset-history)))
  
  
  (method (moonless-lookat self)
    (let ((moon-sight (vertex .49883 .00000 .86670))
          (moon-cone 2.356))
      (let ((moon-half-cone (/ moon-cone 2.)))
        (let ((lookat (horizon-lookat moon-sight))
              (angle (+ moon-half-cone (random-between 0. (- PI*2 moon-cone)))))
          (rotate-lookat lookat angle (vertex 0. 1. 0.))))))
  
  
  (method (spaced-moonless-lookat self)
    (let ((zone (current-zone)))
      (let ((stones (collect-type Circle-Stone (get-entities zone))))
        (define (try spacing (n 0))
          (if (>= n 10)
              #f
            (let ((lookat (moonless-lookat self)))
              (if (null? stones)
                  lookat
                (let ((closest (closest-stone lookat)))
                  (if (>= closest spacing)
                      lookat
                    (try spacing (+ n 1))))))))
        
        (define (closest-stone lookat)
          (apply min
                 (map (lambda (stone)
                        (let ((sight (get-sight lookat))
                              (stone-sight (get-sight stone)))
                          (vector-angle sight stone-sight)))
                      stones)))
        
        (or (try PI/4)
            (try PI/8)
            (try PI/12)
            (moonless-lookat self)))))
  
  
  (method package (create-random-circle self)
    (let ((tier (current-client))
          (world (current-world))
          (zone (current-zone)))
      (let ((create (child (get-root space) 'create)))
        (let ((require-camera (child create 'require-camera?))
              (view (child create 'view)))
          (let ((persistent? #f)
                (require-microphone? #t)
                (require-camera? (get-checked? require-camera))
                (broadcast-hierarchy? #f))
            (let ((err (acquire-microphone/camera self require-microphone? require-camera?)))
              (client-status tier err)
              (if err
                  (display-problem err)
                (load/wait-zone world-zone "Creating circle"
                  (lambda ()
                    (let ((text (locate view 'text)))
                      (let ((name (trim-whitespace (get-string-content text))))
                        (let ((lookat (spaced-moonless-lookat self))
                              (distance (random-between 15. 50.)))
                          (let ((position (vertex+ (vertex 0. 4. 0.) (vertex-scalar* (get-sight lookat) distance)))
                                (scale (vertex 1. 1. 1.)))
                            (let ((no/exception (create-circle-at self name persistent? require-microphone? require-camera? broadcast-hierarchy? position lookat scale)))
                              (if (string? no/exception)
                                  (display-error world no/exception)
                                (clear-message world)
                                (set-string-content text "")
                                (content-changed view)
                                (set-checked? require-camera #t)
                                (join-circle self name #t))))))))))))))))
  
  
  (method package (create-zoom-circle self)
    (let ((tier (current-client))
          (world (current-world)))
      (let ((create (child (get-root space) 'create-zoom)))
        (let ((view (child create 'view))
              (link-view (child create 'link-view)))
          (let ((text (locate view 'text))
                (link-text (locate link-view 'text)))
            (let ((name (trim-whitespace (get-string-content text)))
                  (link (trim-whitespace (get-string-content link-text))))
              (let ((no/exception (create-group tier name #t #f #f #t #f #f #t link #f)))
                (if (string? no/exception)
                    (display-error world no/exception)
                  (clear-message world)
                  (set-string-content text "")
                  (set-string-content link-text "")
                  (content-changed view)
                  (set! created-zoom-circle name)))))))))
  
  
  (method package (join-circle self name (from-create-random? #f))
    (let ((tier (current-client))
          (world (current-world)))
      (let ((err (acquire-circle self name)))
        (client-status tier err)
        (if err
            (display-problem err)
          (let ((group-info/exception (join-group tier name 'participant)))
            (if (string? group-info/exception)
                (display-error world group-info/exception)
              (circle-join self name group-info/exception from-create-random? #f)))))))
  
  
  (method package (join-zoom-circle self name)
    (let ((tier (current-client))
          (world (current-world)))
      (let ((link (circle-property tier name 'link)))
        (if (empty-string? link)
            (display-message world "No Zoom link")
          (catch (Invalid-Link exc
                   (display-message world "Invalid Zoom link"))
            (let ((successful? (launch-zoom-link link)))
              (when (not successful?)
                (display-error world "Unable to launch Zoom"))))))))
  
  
  (method package (edit-circle self name)
    (let ((interface (current-interface)))
      (let ((frame (find-type interface Circle-Edit)))
        (if frame
            (close frame)
          (with-cursor :wait
            (lambda ()
              (push-panel (open-frame (new Circle-Edit circle-name: name size: {Dimension 566 260} location: 'center)))))))))
  
  
  (method package (edit-zoom self name)
    (let ((interface (current-interface)))
      (let ((frame (find-type interface Zoom-Circle-Edit)))
        (if frame
            (close frame)
          (with-cursor :wait
            (lambda ()
              (push-panel (open-frame (new Zoom-Circle-Edit circle-name: name size: {Dimension 566 328} location: 'center)))))))))
  
  
  (method package (copy-zoom self name)
    (let ((tier (current-client))
          (world (current-world)))
      (let ((link (circle-property tier name 'link)))
        (if (empty-string? link)
            (display-message world "No Zoom link")
          (set-clipboard-text link)
          (display-message world "Link copied to clipboard")))))
  
  
  (method (autojoin-circle self name)
    (let ((tier (current-client)))
      (let ((err (acquire-circle self name)))
        (if err
            err
          (let ((group-info/exception (join-group tier name 'participant)))
            (if (string? group-info/exception)
                group-info/exception
              (setup-circle self name #t #t group-info/exception)
              #f))))))
  
  
  (method (rejoin-circle self name require-microphone? require-camera?)
    (let ((tier (current-client)))
      (let ((err (acquire-microphone/camera self require-microphone? require-camera?)))
        (if err
            err
          (let ((group-info/exception (rejoin-group tier name)))
            (if (string? group-info/exception)
                group-info/exception
              (setup-circle self name #t #t group-info/exception)
              #f))))))
  
  
  (method (circle-acquire self require-microphone? require-camera?)
    (acquire-microphone/camera self require-microphone? require-camera?))
  
  
  (method (circle-invite self name group-info/exception)
    (circle-join self name group-info/exception #f #t))
  
  
  (method (circle-join self name group-info/exception from-create-random? from-invite?)
    (bind (no require-microphone? require-camera? duration zone stone shape) group-info/exception
      (let ((effective-zone (if (user?) 'start zone)))
        (cond (from-create-random?
               (setup-circle self name #t #t group-info/exception)
               (paint-mainbar (current-space)))
              ((participant?)
               (if (not from-invite?)
                   (setup-circle self name #f #f group-info/exception)
                 (load/wait-zone effective-zone "Joining circle"
                   (lambda ()
                     (setup-circle self name #t #f group-info/exception)))))
              (else
               (load/wait-zone effective-zone "Joining circle"
                 (lambda ()
                   (setup-circle self name #t #t group-info/exception)))
               (paint-mainbar (current-space)))))))
  
  
  (method (acquire-circle self name)
    (let ((tier (current-client)))
      (if (auto-live?)
          (let ((requirements/err (group-requirements tier name)))
            (if (string? requirements/err)
                requirements/err
              (bind (require-microphone? require-camera?) requirements/err
                (acquire-microphone/camera self require-microphone? require-camera?))))
        #f)))
  
  
  (method (acquire-microphone/camera self require-microphone? require-camera?)
    (if (auto-live?)
        (cond ((and (auto-audio?) require-microphone? (not (has-microphone?)))
               no-microphone-found)
              ((and (auto-audio?) require-microphone? (not (acquire-microphone-pipeline)))
               unable-to-acquire-microphone)
              ((and (auto-video?) require-camera? (not (has-camera?)))
               no-camera-found)
              (else
               #f))
      #f))
  
  
  (method (setup-circle self name teleport? from-gathering? group-info/exception)
    (let ((tier (current-client))
          (udp (current-udp))
          (universe (current-universe))
          (world (current-world))
          (video (current-video)))
      (bind (no require-microphone? require-camera? duration zone stone shape . streams) group-info/exception
        (let ((circle-mode (cond ((participant?)
                                  'avatar)
                                 ((world-setting 'world.presence-mode? #f)
                                  'presence)
                                 (else
                                  'gallery))))
          (startup-gstreamer)
          (when (auto-live?)
            (require-live-stream tier))
          (start udp)
          (when (auto-live?)
            (when (and (auto-audio?) require-microphone?)
              (play-microphone tier))
            (when (and (auto-video?) require-camera?)
              (play-camera tier)))
          (unless (participant?)
            (enter-zone self))
          (clear-message world)
          (uninstall-vista)
          (cond-expand
            (windows (set! hide-last-mouse #f))
            (else))
          (set-current-circle-name name)
          (set-current-circle-no no)
          (set-current-circle-started (- (current-seconds) duration))
          (set-current-circle-joined (current-seconds))
          (set-current-circle-from-gathering? from-gathering?)
          (set-visible? (child mainbar 'circle-name) #t)
          (set-title (child mainbar 'circle-name) current-circle-name)
          (add-snapshot-property 'live.circle-name current-circle-name)
          (streams-add tier no require-microphone? require-camera? streams)
          (cond ((not stone)
                 (set-circle-position default-circle-position)
                 (set-circle-lookat default-circle-lookat)
                 (set-circle-scale default-circle-scale))
                (else
                 (bind (id position lookat scale) stone
                   (set-circle-position position)
                   (set-circle-lookat lookat)
                   (set-circle-scale scale))))
          (unless (2d?)
            (when stone
              (bind (id position) stone
                (let ((section-index (position->section-index position)))
                  (let ((section (index-section-if universe section-index)))
                    (when section
                      (let ((entity (find-entity-by-id section id)))
                        (when entity
                          (set-visible? entity #f)))))))))
          (current-circle-shape-set! shape)
          (install-circle-hooks self)
          (let ((self-output (get-self-output video)))
            (let ((order (if (not self-output)
                             (map third streams)
                           (append! (map third streams) (list (get-stream-no self-output))))))
              (reorder-outputs video order)))
          (set! preserved-eye? #f)
          (change-circle-mode self circle-mode feedback?: #f)
          (space-refresh space)
          @admin-request
          (start-captures)
          @version0
          (download-profile-update)
          (setup-visibility mainbar)
          (refresh-central-menu world)
          (unless (2d?)
            (when teleport?
              (teleport-circle self circle-position)))))))
  
  
  (method (leave-circle self)
    (let ((tier (current-client))
          (window (current-window))
          (interface (current-interface))
          (universe (current-universe))
          (world (current-world))
          (zone (current-zone)))
      @admin-request
      (stop-captures)
      (uninstall-circle-hooks self)
      (let ((udp-client (get-udp-client tier)))
        (stop udp-client)
        (close-live-stream tier)
        (close-send-streams udp-client)
        (close-receive-streams udp-client))
      (let ((removed? (leave-group tier current-circle-name)))
        (unless (2d?)
          (unless removed?
            (let ((stone (find-circle-stone tier current-circle-name)))
              (when stone
                (bind (id position) stone
                  (let ((section-index (position->section-index position)))
                    (let ((section (index-section-if universe section-index)))
                      (when section
                        (let ((entity (find-entity-by-id section id)))
                          (when entity
                            (set-visible? entity #t))))))))))))
      (let ((from-gathering? current-circle-from-gathering?)
            (circle-mode current-circle-mode))
        @wait-buggy
        (show-cursor window)
        (uninstall-push-to-talk)
        (restore-fov)
        (restore-eye self)
        (set-current-circle-name #f)
        (set-current-circle-no #f)
        (set-current-circle-mode 'avatar)
        (unbind-camera)
        (maybe-enable-autotrack world)
        (unless (2d?)
          (person-motion world feedback?: #f)
          (restore-distance self))
        (set-draw-players? world #t)
        (clear-snapshot-property 'live.circle-name)
        (goto-space self 'zone)
        (setup-visibility mainbar)
        (refresh-central-menu world)
        (hide-streams self)
        (let ((frame (find-type interface Circle-Options)))
          (when frame
            (close frame)))
        (when (or (circler?) (and from-gathering? (neq? circle-mode 'avatar)))
          (exit-zone self)))))
  
  
  (method (rejoin-group self group-no)
    (let ((tier (current-client)))
      (let ((group-info/exception (rejoin-group tier group-no)))
        (if (string? group-info/exception)
            group-info/exception
          (bind (no require-microphone? require-camera? duration zone stone shape . streams) group-info/exception
            (let ((udp-client (get-udp-client tier)))
              (start udp-client)
              (require-live-stream tier)
              (streams-add tier no require-microphone? require-camera? streams)
              (play-microphone tier)
              #f))))))
  
  
  (method (hide-streams self)
    (let ((interface (current-interface))
          (world (current-world)))
      (when (get-visible? (child interface 'streams))
        (set-visible? (child interface 'streams-label) #f)
        (set-visible? (child interface 'streams) #f)
        (update-parameter world 'people)
        (update-parameter world 'streams))))
  
  
  (method (goto-space self what)
    (space-deactivate (current-space))
    (space-uninstall (current-space))
    (set! space (need-space self what))
    (space-install space)
    (set-current-space space)
    (add-snapshot-property 'live.space (space-name space))
    (space-activate space)
    space)
  
  
  ;;;
  ;;;; Hooks
  ;;;
  
  
  (method (install-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (udp (current-udp))
          (audio (current-audio))
          (video (current-video)))
      (set-user-verified-hook tier (~ user-verified self))
      (set-user-upgraded-hook tier (~ user-upgraded self))
      (set-server-entered-hook tier (~ server-entered self))
      (set-server-exited-hook tier (~ server-exited self))
      (set-server-disconnected-hook tier (~ server-disconnected self))
      (set-server-reconnected-hook tier (~ server-reconnected self))
      (set-processor-entered-hook tier (~ processor-entered self))
      (set-processor-exited-hook tier (~ processor-exited self))
      (set-hierarchy-update-hook tier (~ hierarchy-update self))
      (set-group-invite-hook tier (~ group-invite self))
      (set-group-leave-hook tier (~ group-leave self))
      (set-circle-acquire-hook tier (~ circle-acquire self))
      (set-circle-invite-hook tier (~ circle-invite self))
      (set-stream-addable-hook tier (~ stream-addable self))
      (set-message-received-hook tier (~ message-received self))
      (set-teleport-hook tier (~ teleport-to self))
      (set-profile-changed-hook udp (~ profile-changed self))
      (set-render-hook video (~ render-video self))
      (set-layout-circle-hook (~ layout-circle self))
      (set! draw-hook (~ draw-debug self))
      (register-draw-hook interface draw-hook)
      (set-refresh-interface-hook (~ refresh-hook self))
      (set-matrix-hook (get-eye world) (~ eye-matrix self))
      (set-displayed-hook (child interface 'chat) (~ chat-displayed self))
      (set-sender-hook (child interface 'chat) (~ chat-sender self))
      (set-return-handler (child interface 'command) (~ command-return self))
      (set-escape-handler (child interface 'command) (~ command-escape self))
      (set-view-replay-directory (~ open/view-replay self))))
  
  
  (method (uninstall-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-server-entered-hook tier #f)
      (set-server-exited-hook tier #f)
      (set-server-disconnected-hook tier #f)
      (set-server-reconnected-hook tier #f)
      (set-processor-entered-hook tier #f)
      (set-processor-exited-hook tier #f)
      (set-hierarchy-update-hook tier #f)
      (set-stream-addable-hook tier #f)
      (set-render-hook video #f)
      (set-layout-circle-hook #f)
      (unregister-draw-hook interface draw-hook)
      (set-refresh-interface-hook #f)
      (set-matrix-hook (get-eye world) #f)
      (set-displayed-hook (child interface 'chat) #f)
      (set-sender-hook (child interface 'chat) #f)
      (set-return-handler (child interface 'command) #f)
      (set-escape-handler (child interface 'command) #f)
      (reset-view-replay-directory)))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method (user-verified self)
    (let ((world (current-world))
          (space (current-space)))
      (space-refresh space)
      (refresh-central-menu world)
      (when (is? space Gathering-Space)
        (update-center-interface space))))
  
  
  (method (user-upgraded self role)
    (let ((world (current-world)))
      (change-role world role)))
  
  
  (method (server-entered self character-name)
    (let ((world (current-world)))
      (unless (in-call? self)
        (when (cond ((eqv? connect-sound #t) #t)
                    ((eqv? connect-sound 'gathering) (is? space Gathering-Space))
                    (else #f))
          (play-ambient-sound 'connect))
        (when (cond ((eqv? connect-attention #t) #t)
                    ((eqv? connect-attention 'gathering) (is? space Gathering-Space))
                    (else #f))
          (user-attention (current-toplevel))))
      (when (cond ((eqv? connect-message #t) #t)
                  ((eqv? connect-message 'gathering) (is? space Gathering-Space))
                  (else #f))
        (display-message world (format "{a} entered" character-name)))))
  
  
  (method (server-exited self character-name)
    (let ((world (current-world)))
      (when (cond ((eqv? connect-message #t) #t)
                  ((eqv? connect-message 'gathering) (is? space Gathering-Space))
                  (else #f))
        (display-message world (format "{a} exited" character-name)))))
  
  
  (method (server-disconnected self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} disconnected" character-name))))
  
  
  (method (server-reconnected self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} reconnected" character-name))))
  
  
  (method (processor-entered self character-name)
    )
  
  
  (method (processor-exited self character-name)
    )
  
  
  (method (hierarchy-update self hierarchy)
    (let ((world (current-world)))
      (let ((tree (people-tree self)))
        (define (same-entity? x y)
          (define (entity info)
            (if (or (not info)
                    (eq? info 'zoom))
                info
              (bind (kind name) info
                (if (eq? kind 'zone)
                    kind
                  (cons kind name)))))
          
          (equal? (entity x)
                  (entity y)))
        
        (with-preserved-selection tree
          (lambda ()
            (view-hierarchy self hierarchy))
          use: 'data
          test: same-entity?
          selection-position?: #f)
        (select-zoom-circle self)
        (people-selection-change self)
        (update-recipient-interface self)
        (refresh-compass world))))
  
  
  (method (select-zoom-circle self)
    (when created-zoom-circle
      (let ((tree (people-tree self)))
        (let ((row (user-data-row tree created-zoom-circle test: (lambda (name data)
                                                                   (and (pair? data)
                                                                        (eq? (car data) 'group)
                                                                        (equal? (cadr data) name))))))
          (when row
            (let ((line (row->line tree row)))
              (when line
                (set-selection tree (list line)))))))
      (set! created-zoom-circle #f)))
  
  
  ;; this rare case can happen if the server had just sent
  ;; a stream-add moments before receiving our leave circle
  (method (stream-addable self group-no)
    (or (not group-no)
        ;; quick hack for test
        (not current-circle-no)
        (eqv? group-no current-circle-no)))
  
  
  ;;;
  ;;;; Media
  ;;;
  
  
  (method (render-video self video)
    (if (eq? world.video:video-layout 'circle)
        #f
      (is-not? space Sphere-Space)))
  
  
  (method (draw-debug self surface)
    ;; YOWNU quick hack
    (when (client?)
    (let ((client (current-client)))
      (let ((udp-client (get-udp-client client)))
        (define (upload-drop)
          (let ((drop (get-upload-drop (get-statistics udp-client))))
            (if drop
                (format "{r precision: 1}% (upload)" drop)
              "N/A")))
        
        (define (download-drop)
          (let ((drop (get-download-drop (get-statistics udp-client))))
            (if drop
                (format "{r precision: 1}% (download)" drop)
              "N/A")))
        
        (define (upload-rate)
          (let ((rate (get-last-upload-rate (get-statistics udp-client))))
            (if (and rate (/= rate -1.))
                (format "{r precision: 1}Mbps (upload)" (bytes->mbps rate))
              "N/A")))
        
        (define (download-rate)
          (let ((rate (get-last-download-rate (get-statistics udp-client))))
            (if (and rate (/= rate -1.))
                (format "{r precision: 1}Mbps (download)" (bytes->mbps rate))
              "N/A")))
        
        (define (throttle-rate)
          (let ((bitrate (camera-bitrate client)))
            (if bitrate
                (format "{r precision: 1}Mbps ({r precision: 1}%)" (/ bitrate 1000.) (* (camera-bitrate-modifier client) 100.))
              "N/A")))
        
        (define (present-chronology-duration)
          (let ((chronology (current-chronology)))
            (let ((duration (chronology-duration chronology)))
              (if (not duration)
                  "N/A"
                (format "{r precision: 1}s (chronology)" duration)))))
        
        (define (present-evolution-duration)
          (let ((evolution (current-evolution)))
            (let ((duration (evolution-duration evolution)))
              (if (not duration)
                  "N/A"
                (format "{r precision: 1}s (evolution)" duration)))))
        
        (let ((rank 0))
          (define (draw text color)
            (let ((h 20)
                  (v (+ 80 (* rank 28))))
              (draw-text surface h v text color))
            (increase! rank))
          
          (when show-debug?
            (set-font surface {Font font-name: tahoma point-size: 18 hint-style: slight hint-metrics: on})
            (unless (eq? show-media 'bbr)
              (when current-circle-started
                (draw (format "{a}" (present-duration (- (current-seconds) current-circle-started))) {Color World-Ochre}))
              (unless (eq? show-media 'energy)
                (draw (format "Upload: {a}" (throttle-rate)) {Color World-Red})
                (draw (format "Drop: {a} {a}" (upload-drop) (download-drop)) {Color World-Red})
                (draw (format "Traffic: {a} {a}" (upload-rate) (download-rate)) {Color World-Red})
                (draw (format "Replay: {a} {a}" (present-chronology-duration) (present-evolution-duration)) {Color World-Red})))
            (with-bin-mutex
              (lambda ()
                (let ((threads (and (neq? show-media 'bbr) (current-process-threads))))
                  (cond-expand
                    (mac
                     (when threads
                       (receive (main gstreamer other) (process-threads-cpu threads)
                         (let ((total (+ main gstreamer other)))
                           (draw (format "CPU%: {r precision: 1} (total) {r precision: 1} (main) {r precision: 1} (gstreamer) {r precision: 1} (other)" (* total 100.) (* main 100.) (* gstreamer 100.) (* other 100.)) {Color World-Red})))))
                    (else))
                  (case show-media
                    ((energy)
                     (cond-expand
                       (mac
                        (set-font surface {Font font-name: tahoma point-size: 14 hint-style: slight hint-metrics: on shadow: thin})
                        (draw-energy self surface 'horizontal (or threads '()) 20 (+ 80 (* rank 28))))
                       (else)))
                    ((audio video)
                     (set-font surface {Font font-name: tahoma point-size: 14 hint-style: slight hint-metrics: on shadow: thin})
                     (draw-streams self surface 'horizontal (or threads '()) 20 (+ 80 (* rank 28)) #f))
                    ((bbr)
                     (set-font surface {Font font-name: tahoma point-size: 14 hint-style: slight hint-metrics: on shadow: thin})
                     (draw-bbr surface 20 235))))))
            @wait
            (let ((leaks (leaks)))
              (when (not-null? leaks)
                (draw (format "Leaks: {a}" (length leaks)) {Color World-Red})))))))))
  
  
  (method protected (draw-energy self surface direction threads start-h start-v)
    (let ((base-h start-h)
          (base-v start-v)
          (other-h (+ start-h 330))
          (other-v start-v))
      (define (draw text color (padding 0))
        (let ((h (+ base-h padding))
              (v (+ base-v 17)))
          (draw-text surface h v text color))
        (increase! base-v 20))
      
      (define (draw-other text color (padding 0))
        (let ((h (+ other-h padding))
              (v (+ other-v 17)))
          (draw-text surface h v text color))
        (increase! other-v 20))
      
      (define (present name percentage)
        (format "{a} {r precision: 1}%" name (* percentage 100.)))
      
      (bind (main . rest) threads
        (for-each (lambda (thread)
                    (bind (fullname percentage) thread
                      (let ((fullname (or fullname "")))
                        (let ((gstreamer? (gstreamer-thread? fullname)))
                          (let ((name (cond (gstreamer?
                                             (gstreamer-streaming-name fullname))
                                            ((empty-string? fullname)
                                             "unknown")
                                            (else
                                             fullname)))
                                (color (cond (gstreamer?
                                              {Color World-Blue})
                                             (else
                                              {Color White}))))
                            (let ((text (present name percentage)))
                              (if gstreamer?
                                  (draw text color)
                                (draw-other text color))))))))
                  (sort > rest key: second)))))
  
  
  (method protected (draw-streams self surface direction threads start-h start-v type?)
    (let ((base-h start-h)
          (base-v start-v))
      (define (draw text color (padding 0))
        (let ((h (+ base-h padding))
              (v (+ base-v 17)))
          (draw-text surface h v text color))
        (increase! base-v 20))
      
      (define (draw-property name value)
        (draw (format "{a}: {a}" name value) {Color World-Orange} 20))
      
      (let ((threads
              (collect (lambda (thread)
                         (bind (fullname percentage) thread
                           (and (and fullname (find fullname #\:))
                                (bind (name pad) (split-string fullname #\:)
                                  (let ((split (split-string name #\%)))
                                    (if (= (length split) 1)
                                        (begin
                                          (format :terminal "Streaming thread {a} is missing an explicit name{%}" name)
                                          #f)
                                      (bind (element id) split
                                        (let ((bin (id->bin (string->number id))))
                                          (and bin
                                               (let ((bin-name (gst_object_get_name bin)))
                                                 (list bin bin-name element pad percentage)))))))))))
                       threads))
            (bins (sort nu<? (collect-bins) key: gst_object_get_name))
            (pipeline-color {Color World-Green})
            (thread-color {Color World-Blue})
            (info-color {Color White})
            (element-color {Color White}))
        (for-each (lambda (bin)
                    (let ((bin-name (gst_object_get_name bin)))
                      (when (case show-media
                              ((audio) (starts-with? bin-name "audio"))
                              ((video) (starts-with? bin-name "video")))
                        (draw (format "<{a}>" bin-name) pipeline-color)
                        (with-unref ((elements (gst_bin_elements_sorted bin)))
                          (for-each (lambda (elem)
                                      (define (parse-name name)
                                        (let ((parts (split-string name #\%)))
                                          (if (= (length parts) 1)
                                              (list name #f)
                                            parts)))
                                      
                                      (let ((name (gst_object_get_name elem))
                                            (class (g_object_class_name elem)))
                                        (let ((type (if type? (format "{a} " class) ""))
                                              (color element-color))
                                          (bind (element id) (parse-name name)
                                            (let ((element (if (starts-with? element "capsfilter")
                                                               "caps"
                                                             element)))
                                              (if (not id)
                                                  (draw (format "{a}{a}" type element) color)
                                                (let ((thread (find-if (lambda (thread)
                                                                         (and (eq? (first thread) bin)
                                                                              (equal? (third thread) element)))
                                                                       threads)))
                                                  (if (not thread)
                                                      (draw (format "{a}{a}" type element) color)
                                                    (bind (bin bin-name element pad percentage) thread
                                                      (draw (format "{a}{a}:{a} {r precision: 1}%"
                                                                    type
                                                                    element
                                                                    pad
                                                                    (* percentage 100.))
                                                            thread-color))))))))
                                        (cond ((equal? class "GstQueue")
                                               (draw-property "current-level-buffers" (format "{a}" (g_object_get_uint elem "current-level-buffers")))
                                               (draw-property "current-level-bytes" (format "{r precision: 1}k" (/ (cast <fl> (g_object_get_uint elem "current-level-bytes")) 1024.)))
                                               (draw-property "current-level-time" (format "{r precision: 2}s" (timestamp->flonum (g_object_get_uint64 elem "current-level-time")))))
                                              ((equal? class "GstAudioRate")
                                               (draw-property "add" (g_object_get_uint64 elem "add"))
                                               (draw-property "drop" (g_object_get_uint64 elem "drop")))
                                              ((gst_is_base_sink elem)
                                               (let ((stats (gst_base_sink_get_stats elem)))
                                                 (draw-property "rate" (gst_structure_get_double stats "average-rate"))
                                                 (draw-property "dropped" (gst_structure_get_uint64 stats "dropped"))
                                                 (draw-property "rendered" (gst_structure_get_uint64 stats "rendered"))
                                                 (gst_structure_free stats))))))
                                    (reverse elements)))
                        (case direction
                          ((horizontal)
                           (increase! base-h (if type? 300 200))
                           (set! base-v start-v))
                          ((vertical)
                           (increase! base-v 20))))))
                  bins))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method (eye-matrix self camera stable?)
    (when (circling-3d?)
      (update-interface-matrices (current-video))
      @wait
      (let ((position (get-position camera))
            (sight (get-sight camera)))
        (updating-3d-audio position sight
          (lambda ()
            (let ((udp-client (get-udp-client (current-client))))
              (iterate-table (get-receive-streams udp-client)
                (lambda (stream-no stream)
                  (let ((audio-channel (locate-stream-audio-channel stream)))
                    (when audio-channel
                      (let ((video-channel (locate-stream-video-channel stream)))
                        (when video-channel
                          (let ((audio-output (get-output audio-channel))
                                (video-output (get-output video-channel)))
                            (when (and audio-output video-output)
                              (when (is? video-output Circle-Video-Sink)
                                (let ((position (matrix-translation (get-matrix (get-pane video-output)))))
                                  (update-3d-output audio-output position)))))))))))))))))
  
  
  ;;;
  ;;;; People
  ;;;
  
  
  (method (people-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'people) '(people people))))
  
  
  (method (refresh-hierarchy self)
    (let ((tier (current-tier)))
      (let ((hierarchy (list-hierarchy tier)))
        (register-hierarchy hierarchy)
        (hierarchy-update self hierarchy))))
  
  
  (method (unify-hierarchy self hierarchy)
    (let ((client (current-client)))
      (bind (groupless . groups) hierarchy
        (let ((people '())
              (circles '())
              (zoom-circles '())
              (circlers #f)
              (party #f)
              (character-name (get-character-name client)))
          (define (add zone member)
            (set! people (cons member people)))
          
          (define (add-players zone players)
            (for-each add-player players))
          
          (define (add-player player)
            (set! people (cons player people)))
          
          (bind (group owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description . players) groupless
            (add-players zone players))
          (for-each (lambda (group)
                      (bind (name owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description . players) group
                        (cond ((integer? name)
                               (when (member? character-name players key: car)
                                 (set! party players))
                               (add-players zone players))
                              (else
                               (when (member? character-name players key: car)
                                 (set! circlers players))
                               (if zoom?
                                   (set! zoom-circles (cons group zoom-circles))
                                 (set! circles (cons group circles)))))))
                    groups)
          (if (not circlers)
              (clear-snapshot-property 'live.circle-members)
            (add-snapshot-property 'live.circle-members (map car circlers)))
          (add-snapshot-property 'live.player-party (and party (map car party)))
          (values people circles zoom-circles party)))))
  
  
  (method (view-hierarchy self hierarchy)
    (let ((tier (current-tier))
          (zone (current-zone))
          (me (current-me)))
      (let ((tree (people-tree self))
            (separator? #f))
        (receive (people circles zoom-circles party) (unify-hierarchy self hierarchy)
          (remove-every-row tree)
          (with-update-locked tree
            (lambda ()
              (define (add-gathering)
                (let ((row (add-row tree
                                    state: 'expanded
                                    children: (list (new Tree-Node
                                                      title: "The gathering"
                                                      font: {Font Label-User}
                                                      color: gathering-color)))))
                  (added #f)
                  (add-people row)))
              
              (define (add-people father)
                (for-each (lambda (info)
                            (add-player father info #f))
                          (let ((me (get-name me)))
                            (sort di<? people key: (lambda (player)
                                                     (if (equal? player me)
                                                         (cons 0 player)
                                                       (cons 1 player)))))))
              
              (define (add-player father info group)
                (bind (player id no verified? asleep? disconnected? zone mode mobile?) info
                  (let ((group? (and party (memq? info party))))
                    (let ((player-title (if group? (format "<{a}>" player) player)))
                      (let ((title (cond (disconnected? (format "{a} (disconnected)" player-title))
                                         (asleep? (format "{a} (offline)" player-title))
                                         ((not verified?) (format "{a} (unverified)" player-title))
                                         (mobile? (format "{a} (Web)" player-title))
                                         ((eq? mode 'participant) (format "{a} ({a})" player-title (present-zone self zone)))
                                         (else player-title)))
                            (font {Font Label-User})
                            (color (cond ((or disconnected? asleep?)
                                          {Color Medium-Gray})
                                         ((not verified?)
                                          unverified-color)
                                         (group
                                          circler-color)
                                         (else
                                          player-color))))
                        (add-row tree
                                 father: father
                                 children: (list (new Tree-Node title: title font: font color: color))
                                 user-data: (list 'player player group zone mode))
                        (added father))))
                  (let ((player (find-player (current-zone) player)))
                    (when player
                      (set-disconnected? player disconnected?)))))
              
              (define (add-zone)
                (let ((title (present-zone self active-zone)))
                  (add-row tree
                           state: 'expanded
                           children: (list (new Tree-Node
                                             title: title
                                             font: {Font Label-User}
                                             color: zone-color))
                           user-data: (list 'zone active-zone))
                  (added #f)))
              
              (define (add-circles circles)
                (let ((non-empty '())
                      (empty '()))
                  (for-each (lambda (info)
                              (bind (group owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description . players) info
                                (if (not-null? players)
                                    (set! non-empty (cons info non-empty))
                                  (set! empty (cons info empty)))))
                            circles)
                  (for-each (lambda (info)
                              (add-circle 'group #f info))
                            (sort di<? non-empty key: car))
                  (when (not-null? empty)
                    (add-separator 'empty)
                    (for-each (lambda (info)
                                (add-circle 'group #f info #t))
                              (sort di<? empty key: car)))))
              
              (define (add-circle kind father info (empty? #f))
                (bind (group owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description . players) info
                  (let ((title group))
                    (let ((row (add-row tree
                                        father: father
                                        state: 'expanded
                                        children: (list (new Tree-Node title: title font: {Font Label-User} color: group-color))
                                        user-data: (list kind group owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description))))
                      (added father)
                      (for-each (lambda (info)
                                  (add-player row info group))
                                players)
                      (when (not empty?)
                        (add-separator title))))))
              
              (define (add-zoom)
                (let ((row (add-row tree
                                    state: 'expanded
                                    children: (list (new Tree-Node
                                                      title: "Web"
                                                      font: {Font Label-User}
                                                      color: gathering-color))
                                    user-data: 'zoom)))
                  (add-zoom-circles row zoom-circles)))
              
              (define (add-zoom-circles father circles)
                (for-each (lambda (info)
                            (add-circle 'zoom-group father info))
                          (sort di<? circles key: car)))
              
              (define (add-directory father title)
                (prog1 (add-row tree
                                father: father
                                state: 'expanded
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: directory-color))
                                user-data: (list 'directory title))
                  (added father)))
              
              (define (add-separator identifier)
                (unless separator?
                  (add-row tree
                           children: (list (new Tree-Node title: "" font: {Font Label-User}))
                           user-data: (list 'separator identifier))
                  (set! separator? #t)))
              
              (define (added father)
                (when (not father)
                  (set! separator? #f)))
              
              (add-gathering)
              (unless (circler?)
                (add-separator 'zone)
                (add-zone))
              (when (not-null? circles)
                (add-separator 'circles)
                (add-circles circles))
              (add-separator 'zoom)
              (add-zoom)))))))
  
  
  (method package (people-selection-change self)
    (when (and (verified?) (is? space Gathering-Space))
      (let ((tree (people-tree self)))
        (define (select-gathering)
          (select (list 'group #f #f #f #f #f #f 'start #f #f #f #f)))
        
        (define (select-zoom)
          (select (list 'group #f #f #f #f #f #f 'start #f #t #f #f)))
        
        (define (select data (zone? #f))
          (bind (kind . rest) data
            (define (select zone group owner stone zoom? link description player)
              (set-circle-vista (and stone (second stone)))
              (set! selected-zone? zone?)
              (let ((effective-zone (if zone? zone 'start)))
                (unless (equal? effective-zone selected-zone)
                  (set! selected-zone effective-zone)
                  (load/wait-zone effective-zone #f (lambda ()))))
              (set! selected-group group)
              (set! selected-data data)
              (set! selected-owner owner)
              (set! selected-zoom? zoom?)
              (reinstall-vista)
              (update-center-interface space))
            
            (case kind
              ((group zoom-group)
               (bind (group owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description) rest
                 (select zone group owner stone zoom? link description #f)))
              ((zone)
               (bind (zone) rest
                 (select zone #f #f #f #f #f #f #f))))))
        
        (define (select-row row)
          (if (not row)
              (select-gathering)
            (let ((data (get-user-data row)))
              (if (not data)
                  (select-gathering)
                (if (eq? data 'zoom)
                    (select-zoom)
                  (bind (kind) data
                    (if (eq? kind 'separator)
                        (select-gathering)
                      (if (eq? kind 'player)
                          (select-row (get-father row))
                        (if (eq? kind 'zone)
                            (select data #t)
                          (select data))))))))))
        
        (select-row (get-selected-row tree)))))
  
  
  (method package (people-double-click self)
    (people-action-selected self))
  
  
  (method package (people-return-press self)
    (people-action-selected self))
  
  
  (method (people-action-selected self)
    (when (is? space Gathering-Space)
      (let ((data (get-single-selected-data (people-tree self))))
        (when (pair? data)
          (let ((kind (car data))
                (rest (cdr data)))
            (cond (selected-group
                   (when (or (eq? kind 'group)
                             (eq? kind 'zoom-group))
                     (with-cursor :wait
                       (lambda ()
                         (bind (group owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description) rest
                           (if zoom?
                               (join-zoom-circle self selected-group)
                             (join-circle self selected-group)))))))
                  (selected-zone?
                   (enter-zone self))))))))
  
  
  (method package (focus-command-text self)
    (let ((interface (current-interface)))
      (let ((text (locate (child interface 'command) 'text)))
        (when (view-visible? text)
          (acquire-focus text)))))
  
  
  (method package (people-label-action self)
    )
  
  
  ;;;
  ;;;; Experiment
  ;;;
  
  
  (method (experiment-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'experiment) 'experiment)))
  
  
  (method (experiment-text self)
    (let ((interface (current-interface)))
      (locate (child interface 'experiment) '(console text))))
  
  
  (method (view-experiment self)
    (let ((tree (experiment-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (for-each (lambda (experiment)
                      (let ((title (experiment-title self experiment))
                            (color (experiment-color self experiment)))
                        (add-row tree
                                 children: (list (new Tree-Node title: title font: {Font Label-User} color: color))
                                 user-data: experiment)))
                    experiments)))))
  
  
  (method (experiment-title self experiment)
    (get-title experiment))
  
  
  (method (experiment-color self experiment)
    (if (get-running? experiment)
        {Color World-Blue}
      {Color White}))
  
  
  (method package (experiment-action self clear?)
    (experiment-action-selected self clear?))
  
  
  (method (experiment-action-selected self clear?)
    (let ((tree (experiment-tree self))
          (text (experiment-text self)))
      (let ((row (get-selected-row tree)))
        (when row
          (let ((experiment (get-user-data row)))
            (define (update-cell)
              (let ((title (experiment-title self experiment))
                    (color (experiment-color self experiment))
                    (line (row->line tree row))
                    (col 0))
                (let ((cell (new Cell line col)))
                  (let ((data (get-cell-data tree cell)))
                    (set-title data title)
                    (set-color data color))
                  (invalidate-cell tree cell))))
            
            (when experiment
              (let ((action (get-action experiment)))
                (define (feedback message)
                  (with-reentrant-task-mutex
                    (lambda ()
                      (let ((end (text-ending text)))
                        (let ((range (new Range$Cell$ end end)))
                          (replace (get-model text) range (list message ""))
                          (ensure-range-displayed text range))))))
                
                (when (or clear? (get-clear? experiment))
                  (empty-text text))
                (delay-event
                  (lambda ()
                    (set-running? experiment #t)
                    (update-cell)
                    (action feedback)
                    (set-running? experiment #f)
                    (update-cell))))))))))
  
  
  ;;;
  ;;;; Teleport
  ;;;
  
  
  (method (teleport-to self path position sight)
    (let ((observer? (observer?)))
      (load/wait-zone path "Teleport in progress"
        (lambda ()
          (let ((zone (current-zone))
                (position (vertex+ position (vertex-scalar* sight 3.)))
                (sight (vertex-negate sight)))
            (when observer?
              (enter-zone self))
            (teleport zone position sight))))))
  
  
  ;;;
  ;;;; Message
  ;;;
  
  
  (method (message-received self sender kind message)
    (let ((client (current-client)))
      (unless (eq? kind 'activity)
        (unless (equal? sender (get-character-name client))
          (when message-sound
            (play-ambient-sound 'message volume: .25))
          (when message-attention
            (user-attention (current-toplevel)))))))
  
  
  ;;;
  ;;;; Chat
  ;;;
  
  
  (method (chat-displayed self chat)
    (show-chat self)
    #f)
  
  
  (method (chat-sender self sender (user-origin? #t))
    (when user-origin?
      (update-message-recipient self (if (not sender)
                                         #f
                                       (list 'player sender)))
      (show-chat self)
      (focus-command-text self)))
  
  
  (method package (chat-message self)
    (let ((interface (current-interface)))
      (show-chat self)
      (show-command self)
      (acquire-focus (locate (child interface 'command) 'text))))
  
  
  (method package (chat-slash self)
    (let ((interface (current-interface)))
      (set! chat-was-hidden? (not (get-visible? (child interface 'chat))))
      (show-chat self)
      (show-command self)
      (let ((text (locate (child interface 'command) 'text)))
        (acquire-focus text)
        (set-string-content text "")
        (insert-char text #\/))))
  
  
  (method package (chat-previous self)
    (let ((interface (current-interface)))
      (let ((focus (active-focus)))
        (when (is? focus Command-Bar-Text-View)
          (if (not previous-command)
              (bell)
            (let ((command (child interface 'command)))
              (let ((text (locate command 'text))
                    (previous previous-command))
                (set! previous-command (get-string-content text))
                (set-string-content text previous)
                (set-caret text (text-ending text)))))))))
  
  
  (method package (show-chat self)
    (let ((interface (current-interface))
          (world (current-world))
          (space (current-space)))
      (typecase space
        ((Zone-Space Avatar-Space)
         (set-visible? (child interface 'chat) #t)
         (set-visible? (child interface 'command-to) #t)
         (set-visible? (child interface 'command) #t))
        ((Presence-Space)
         (set-visible? (child interface 'chat-label) #t)
         (set-visible? (child interface 'chat) #t)
         (set-visible? (child interface 'command-to) #t)
         (set-visible? (child interface 'command) #t)))
      (update-parameter world 'chat)))
  
  
  (method package (show-command self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'command-to) #t)
      (set-visible? (child interface 'command) #t)))
  
  
  (method package (hide-chat self)
    (let ((interface (current-interface))
          (world (current-world)))
      (set-visible? (child interface 'chat-label) #f)
      (set-visible? (child interface 'chat) #f)
      (set-visible? (child interface 'command-to) #f)
      (set-visible? (child interface 'command) #f)
      (update-parameter world 'chat)))
  
  
  (method (command-return self command)
    (let ((tier (current-client))
          (interface (current-interface))
          (world (current-world))
          (space (current-space)))
      (define (parse-content content)
        (cond ((starts-with? content "/s ")
               (if (admin?)
                   (values 'server #f (substring content 3 (string-length content)) #f)
                 (selected-recipient content)))
              ((starts-with? content "/g ")
               (values 'group (group-recipient) (substring content 3 (string-length content)) #f))
              ((starts-with? content "/w ")
               (let ((str (substring content 3 (string-length content))))
                 (let ((pos (find (trim-leading-whitespace str) #\space)))
                   (if (not pos)
                       (values 'whisper (get-name (current-me)) str #f)
                     (let ((str (trim-leading-whitespace str)))
                       (let ((recipient (trim-whitespace (substring str 0 pos)))
                             (message (substring str (+ pos 1) (string-length str))))
                         (values 'whisper recipient message (lambda () (show-panel-whisper recipient message)))))))))
              ((starts-with? content "/r ")
               (let ((last-whisperer (get-last-whisperer world))
                     (message (substring content 3 (string-length content))))
                 (if (not last-whisperer)
                     (values 'group (group-recipient) message #f)
                   (values 'whisper last-whisperer message (lambda () (show-panel-whisper last-whisperer message))))))
              ((and (verified?) (starts-with? content "/invite "))
               (if (not (has-microphone?))
                   (show-panel-message (get-character-name tier) 'show no-microphone-found)
                 (if (not (acquire-microphone-pipeline))
                     (show-panel-message (get-character-name tier) 'show unable-to-acquire-microphone)
                   (let ((recipient (trim-whitespace (substring content 8 (string-length content)))))
                     (let ((error (client-invite tier recipient current-circle-name)))
                       (if error
                           (show-panel-message (get-character-name tier) 'show error)
                         (show-panel-message (get-character-name tier) 'show (format "Invite {a}" recipient)))))))
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/leave")
               (let ((error (client-leave tier)))
                 (if error
                     (show-panel-message (get-character-name tier) 'show error)
                   (show-panel-message (get-character-name tier) 'show "Left group")))
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/applaud")
               (emote "EmoteApplaud")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/beg")
               (emote "EmoteBeg")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/cheer")
               (emote "EmoteCheer")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/cry")
               (emote "EmoteCry")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/dance")
               (emote "EmoteDance")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/kneel")
               (emote "EmoteKneel")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/laugh")
               (emote "EmoteLaugh")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/no")
               (emote "EmoteNo")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/point")
               (emote "EmotePoint")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/wave")
               (emote "EmoteWave")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/yes")
               (emote "EmoteYes")
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/clear")
               (post-chat
                 (lambda (panel)
                   (clear panel)))
               (values #f #f #f #f))
              (else
               (selected-recipient content))))
      
      (define (group-recipient)
        (if (is? space Circle-Space)
            current-circle-name
          #f))
      
      (define (selected-recipient message)
        (if (not message-recipient)
            (begin
              (when (is-not? space Gathering-Space)
                (show-panel-say "The gathering" message))
              (values 'gathering #f message #f))
          (bind (what name) message-recipient
            (case what
              ((player)
               (show-panel-whisper name message)
               (values 'whisper name message #f))
              (else
               (values 'group name message #f))))))
      
      (define (show-panel-say recipient message)
        (let ((sender #f))
          (post-chat
            (lambda (panel)
              (show-say panel recipient message sender)))))
      
      (define (show-panel-whisper recipient message)
        (let ((sender recipient))
          (post-chat
            (lambda (panel)
              (show-whisper panel recipient message sender)))))
      
      (define (show-panel-message sender kind message)
        (post-chat
          (lambda (panel)
            (show-message panel sender kind message))))
      
      ;; using a post is a quick fix to displayed scrolling
      ;; somehow now always working when done directly
      (define (post-chat proc)
        (let ((panel (child interface 'chat)))
          (post-event
            (lambda ()
              (with-task-mutex
                (lambda ()
                  (proc panel)))))))
      
      (define (emote emote)
        (let ((me (current-me)))
          (when (find-animation (cache-model me) emote)
            (set-animation-continuous me emote)
            (if chat-was-hidden?
                (begin
                  (hide-chat self)
                  (set! chat-was-hidden? #f))
              (hide-command world)))))
      
      (let ((text (locate command 'text)))
        (let ((content (get-string-content text)))
          (unless (whitespace? content)
            (set! previous-command content)
            (receive (kind recipient message cont) (parse-content content)
              (when kind
                (let ((error (client-message tier kind recipient message)))
                  (if error
                      (show-panel-message (get-character-name tier) 'show error)
                    (when cont
                      (cont)))))
              (set-string-content text "")))))))
  
  
  (method (command-escape self command)
    (let ((world (current-world))
          (space (current-space)))
      (when (or (is? space Zone-Space) (is? space Circle-Space))
        (hide-command world))))
  
  
  (method package (chat-label-action self)
    (let ((interface (current-interface)))
      (let ((chat-label (child interface 'chat-label))
            (chat (child interface 'chat))
            (command-to (child interface 'command-to))
            (command (child interface 'command)))
        (set! chat-wide? (not chat-wide?))
        (set-size chat-label (chat-label-size self))
        (set-proportion chat (chat-proportion self))
        (set-size command-to (command-to-size self))
        (set-location command-to (command-to-location self))
        (set-size command (command-size self))
        (set-location command (command-location self)))
      (layout-view interface)))
  
  
  (method protected (chat-label-size self)
    (if chat-wide?
        {Dimension 420 40}
      {Dimension 220 40}))
  
  
  (method protected (chat-proportion self)
    `(,(if chat-wide? 420 220)
      (bounds ,(if (is? space Gathering-Space) -300 -354))))
  
  
  (method protected (command-to-size self)
    (if chat-wide?
        {Dimension 426 32}
      {Dimension 226 32}))
  
  
  (method protected (command-to-location self)
    (if (is? space Gathering-Space)
        '(-4 -166)
      '(-4 -220)))
  
  
  (method protected (command-size self)
    (if chat-wide?
        {Dimension 420 19}
      {Dimension 220 19}))
  
  
  (method protected (command-location self)
    (if (is? space Gathering-Space)
        '(-10 -146)
      '(-10 -200)))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method (profile-changed self profile)
    (let ((profile-title (capitalize (->string profile))))
      (display-message (current-world) (format "Lowering video quality to {a}" profile-title) duration: 3.))
    (update-profile-label))
  
  
  ;;;
  ;;;; Mode
  ;;;
  
  
  (method (preserve-camera self)
    (let ((world (current-world))
          (motion (current-motion)))
      (camera-copy! preserved-eye (get-eye world))
      (set! preserved-distance (and (is? motion Target-Motion) (get-desired-distance motion)))
      (set! preserved-eye? #t)))
  
  
  (method (restore-eye self)
    (let ((world (current-world)))
      (when preserved-eye?
        (camera-copy! (get-eye world) preserved-eye)
        (set! preserved-eye? #f))))
  
  
  (method (restore-distance self)
    (when preserved-distance
      (setup-motion (current-motion) preserved-distance)
      (set! preserved-distance #f)))
  
  
  (method (on-avatar-mode self evt)
    (avatar-mode self))
  
  
  (method (on-presence-mode self evt)
    (presence-mode self)
    (set-setting options-settings 'world.presence-mode? #t)
    (save-content options-settings))
  
  
  (method (on-focus-mode self evt)
    (focus-mode self))
  
  
  (method (on-gallery-mode self evt)
    (gallery-mode self)
    (set-setting options-settings 'world.presence-mode? #f)
    (save-content options-settings))
  
  
  ;; for testing camera positioning
  (method protected (free-mode self)
    (let ((world (current-world)))
      (unbind-camera)
      (free-motion world feedback?: #f)
      (display-message world "Free")))
  
  
  (method (avatar-mode self (feedback?: feedback? #t))
    (let ((world (current-world)))
      (unless (eq? current-circle-mode 'avatar)
        (change-circle-mode self 'avatar feedback?: feedback?)
        (restore-eye self)
        (unbind-camera)
        (maybe-enable-autotrack world)
        (person-motion world feedback?: #f)
        (restore-distance self)
        (focus-world))))
  
  
  (method (presence-mode self (feedback?: feedback? #t))
    (let ((world (current-world)))
      (unless (eq? current-circle-mode 'presence)
        (let ((from-avatar? (eq? current-circle-mode 'avatar)))
          (change-circle-mode self 'presence feedback?: feedback?)
          (when from-avatar?
            (preserve-camera self)
            (circle-home)
            (bind-camera)
            (disable-autotrack world))))))
  
  
  (method (focus-mode self (feedback?: feedback? #t))
    (let ((world (current-world)))
      (unless (eq? current-circle-mode 'focus)
        (let ((from-avatar? (eq? current-circle-mode 'avatar)))
          (change-circle-mode self 'focus feedback?: feedback?)
          (when from-avatar?
            (preserve-camera self)
            (bind-camera)
            (disable-autotrack world))))))
  
  
  (method (gallery-mode self (feedback?: feedback? #t))
    (let ((world (current-world)))
      (unless (eq? current-circle-mode 'gallery)
        (let ((from-avatar? (eq? current-circle-mode 'avatar)))
          (change-circle-mode self 'gallery feedback?: feedback?)
          (when from-avatar?
            (preserve-camera self)
            (bind-camera)
            (disable-autotrack world))))))
  
  
  (method (change-circle-mode self mode (feedback?: feedback? #t))
    (let ((world (current-world))
          (video (current-video)))
      (set-current-circle-mode mode)
      (unless (if (eq? mode 'avatar)
                  (is? (current-space) Avatar-Space)
                (is? (current-space) Presence-Space))
        (let ((new-space (if (eq? mode 'avatar) 'avatar 'presence)))
          (goto-space self new-space)))
      (goto-layout video (if (memq? mode '(avatar presence)) 'circle mode))
      (when (eq? video-layout 'focus)
        (goto-focused self))
      (set-draw-players? world (eq? mode 'avatar))
      (reset-looked-at-output)
      (space-refresh (current-space))
      (show-interface (current-space) #t)
      (update-parameter world 'avatar-mode)
      (update-parameter world 'presence-mode)
      (update-parameter world 'focus-mode)
      (update-parameter world 'gallery-mode)
      (when feedback?
        (display-message world (capitalize (symbol->string mode))))))
  
  
  (method (goto-focused self)
    (let ((video (current-video)))
      (let ((focused-output (effective-focused-output video)))
        (when focused-output
          (circle-goto-focus focused-output)))))
  
  
  ;;;
  ;;;; Zone
  ;;;
  
  
  (method (load-zone self path)
    (let ((client (current-client)))
      (load-zone client path)))
  
  
  (method (change-zone self path)
    (let ((client (current-client))
          (world (current-world))
          (zone (current-zone)))
      (unless (equal? path (get-path zone))
        (let ((info (change-zone client path)))
          (if (string? info)
              (display-error world (format "{a}" info))
            (uninstall-vista zone)
            (install-vista))))))
  
  
  ;;;
  ;;;; Group
  ;;;
  
  
  (method (group-invite self)
    (let ((world (current-world))
          (space (current-space)))
      (set-in-group? #t)
      (space-refresh space)
      (setup-visibility mainbar)
      (refresh-central-menu world)))
  
  
  (method (group-leave self)
    (let ((world (current-world))
          (space (current-space)))
      (set-in-group? #f)
      (space-refresh space)
      (setup-visibility mainbar)
      (refresh-central-menu world)))
  
  
  ;;;
  ;;;; Circle
  ;;;
  
  
  (method (install-circle-hooks self)
    (let ((tier (current-tier)))
      (set-stream-add-hook tier (~ stream-add self))
      (set-stream-remove-hook tier (~ stream-remove self))))
  
  
  (method (uninstall-circle-hooks self)
    (let ((tier (current-tier)))
      (set-stream-add-hook tier #f)
      (set-stream-remove-hook tier #f)))
  
  
  (method (stream-add self stream)
    (let ((world (current-world)))
      (when (eq? (get-source-kind stream) 'live)
        (unless (is? space Circle-Space)
          (display-message world (format "{a} joined" (get-sender stream)))))))
  
  
  (method (stream-remove self stream)
    (let ((world (current-world)))
      (when (eq? (get-source-kind stream) 'live)
        (unless (is? space Circle-Space)
          (display-message world (format "{a} left" (get-sender stream)))))))
  
  
  (method (layout-circle self ordered-outputs)
    (let ((count (length ordered-outputs)))
      (when camera-bound?
        (circle-update-camera count))
      (when (and (is? space Circle-Space)
                 (eq? video-layout 'focus))
        (goto-focused self)
        (show-interface (current-space) #t))
      (circle-placements count)))
  
  
  (method package (shortcut-press-circle self shortcut)
    (define (focus-no no)
      (let ((video (current-video)))
        ;; useful to compare profiles
        (define (find-by-level level)
          (find-if (lambda (output)
                     (eqv? (get-level output) level))
                   (get-ordered-outputs video)))
        
        (define (find-nth rank)
          (let ((outputs (get-ordered-outputs video)))
            (and (< rank (length outputs))
                 (element outputs rank))))
        
        (let ((output (find-nth (- no 1))))
          (when output
            (circle-switch-focus output)
            (when focus-unmute?
              (let ((circle-view (circle-view output)))
                (let ((mute-view (child circle-view 'mute)))
                  (when (and (get-visible? mute-view)
                             (get-muted? mute-view))
                    (adjust-muted? mute-view #f)))))))))
    
    (define (cycle-focus reversed?)
      (let ((video (current-video)))
        (let ((focused (effective-focused-output video))
              (outputs (get-ordered-outputs video)))
          (when focused
            (let ((next (cycle-element outputs focused reversed?: reversed?)))
              (circle-switch-focus next))))))
    
    (define (world/circle-focus? focus)
      (or (world-focus? focus)
          (circle-focus? focus)))
    
    (define (circle-focus? focus)
      (is? focus Circle-View))
    
    (let ((focus (active-focus)))
      (nucase shortcut
        (({Shortcut Space})
         (if (and (circle-focus? focus)
                  (not (push-to-talk?)))
             (begin
               (toggle-paused focus)
               #t)
           #f))
        (({Shortcut Left})
         (if (circle-focus? focus)
             (begin
               (seek-backward focus)
               #t)
           (and (or (presence-mode?)
                    (focus-mode?))
                (world-focus? focus)
                (begin
                  (circle-left)
                  #t))))
        (({Shortcut Right})
         (if (circle-focus? focus)
             (begin
               (seek-forward focus)
               #t)
           (and (or (presence-mode?)
                    (focus-mode?))
                (world-focus? focus)
                (begin
                  (circle-right)
                  #t))))
        (({Shortcut Up})
         (and (presence-mode?)
              (world/circle-focus? focus)
              (begin
                (circle-up)
                #t)))
        (({Shortcut Down})
         (and (presence-mode?)
              (world/circle-focus? focus)
              (begin
                (circle-down)
                #t)))
        (({Shortcut Return})
         (and (presence-mode?)
              (world/circle-focus? focus)
              (begin
                (circle-return)
                #t)))
        (({Shortcut Backspace})
         (and (presence-mode?)
              (world/circle-focus? focus)
              (begin
                (circle-backspace)
                #t)))
        (({Shortcut #\1})
         (and (or (presence-mode?)
                  (focus-mode?))
              (begin
                (focus-no 1)
                #t)))
        (({Shortcut #\2})
         (and (or (presence-mode?)
                  (focus-mode?))
              (begin
                (focus-no 2)
                #t)))
        (({Shortcut #\3})
         (and (or (presence-mode?)
                  (focus-mode?))
              (begin
                (focus-no 3)
                #t)))
        (({Shortcut #\4})
         (and (or (presence-mode?)
                  (focus-mode?))
              (begin
                (focus-no 4)
                #t)))
        (({Shortcut #\5})
         (and (or (presence-mode?)
                  (focus-mode?))
              (begin
                (focus-no 5)
                #t)))
        (({Shortcut Tab})
         (and (or (presence-mode?)
                  (focus-mode?))
              (world/circle-focus? focus)
              (begin
                (cycle-focus #f)
                #t)))
        (({Shortcut :shift Tab})
         (and (or (presence-mode?)
                  (focus-mode?))
              (world/circle-focus? focus)
              (begin
                (cycle-focus #t)
                #t)))
        (else
         #f))))
  
  
  ;;;
  ;;;; Refresh
  ;;;
  
  
  (method (refresh-hook self)
    (cond (show-debug?
           (invalidate-interface)
           #t)
          ((and debug-stream (not auto-hide?))
           (lambda ()
             (invalidate-outputs (current-video))))
          (else
           #f)))

  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (on-toggle-debug self evt)
    (set-show-debug? (not show-debug?))
    (invalidate-interface))
  
  
  (method (on-toggle-debug-energy self evt)
    (cond ((eq? show-media 'energy)
           (set-show-debug? #f)
           (set-show-media #f))
          (else
           (set-show-debug? #t)
           (set-show-media 'energy)))
    (invalidate-interface))
  
  
  (method (on-toggle-debug-audio self evt)
    (cond ((eq? show-media 'audio)
           (set-show-debug? #f)
           (set-show-media #f))
          (else
           (set-show-debug? #t)
           (set-show-media 'audio)))
    (invalidate-interface))
  
  
  (method (on-toggle-debug-video self evt)
    (cond ((eq? show-media 'video)
           (set-show-debug? #f)
           (set-show-media #f))
          (else
           (set-show-debug? #t)
           (set-show-media 'video)))
    (invalidate-interface))
  
  
  (method (on-toggle-debug-bbr self evt)
    (let ((udp (current-udp)))
      (cond ((eq? show-media 'bbr)
             (set-show-debug? #f)
             (set-show-media #f)
             (set-upload-info? udp #t))
            (else
             (set-show-debug? #t)
             (set-show-media 'bbr)
             (set-upload-info? udp #t)))
      (invalidate-interface)))
  
  
  (method (on-toggle-debug-media self evt)
    (let ((video (current-video)))
      (set-debug-stream (if (eq? debug-stream 'media)
                            #f
                          'media))
      (invalidate-outputs video)
      (when debug-stream
        (show-interface (current-space) #t))))
  
  
  (method (on-toggle-debug-flow self evt)
    (let ((video (current-video)))
      (set-debug-stream (if (eq? debug-stream 'flow)
                            #f
                          'flow))
      (invalidate-outputs video)
      (when debug-stream
        (show-interface (current-space) #t))))
  
  
  (method (on-toggle-debug-live self evt)
    (let ((video (current-video)))
      (set-debug-stream (if (eq? debug-stream 'live)
                            #f
                          'live))
      (invalidate-outputs video)
      (when debug-stream
        (show-interface (current-space) #t))))
  
  
  (method (on-toggle-admin self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (if (and (get-visible? panel)
                   (eq? (active-focus) text))
              (begin
                (hide-admin self)
                ;; should not be necessary
                (focus-world))
            (show-admin self)
            (acquire-focus text))))))
  
  
  (method (show-admin self)
    (let ((interface (current-interface)))
      (when (admin?)
        (set-visible? (child interface 'admin-label) #t)
        (set-visible? (child interface 'admin) #t))
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (set-visible? (child root 'enter) #f)
          (set-visible? (child root 'join) #f)
          (set-visible? (child root 'create) #f)))
      (layout-view interface)))
  
  
  (method (hide-admin self)
    (let ((interface (current-interface)))
      (when (admin?)
        (set-visible? (child interface 'admin-label) #f)
        (set-visible? (child interface 'admin) #f))
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (update-center-interface space)))))
  
  
  (method (on-toggle-evolution self evt)
    (let ((interface (current-interface))
          (world (current-world))
          (client (current-client))
          (video (current-video)))
      (toggle-evolution world)
      (let ((panel (child interface 'evolution)))
        (when (get-visible? panel)
          (let ((lite? (world-setting 'world.timeline-lite? #f)))
            (set-lite? panel lite?)
            (set-span panel (world-setting 'world.timeline-span (if lite? 10. 30.)))
            (set-events-mode panel 'all)
            (let ((video-output (effective-focused-output video)))
              (when video-output
                (let ((video-channel (get-channel video-output)))
                  (when (is? video-channel UDP-Receive-Channel)
                    (let ((audio-channel (locate-stream-audio-channel (get-stream video-channel))))
                      (when audio-channel
                        (let ((origin (get-origin (get-stream audio-channel))))
                          (set-origin panel origin)
                          (set-channel panel (get-no audio-channel))
                          (invalidate-view panel)))))))))))))
  
  
  (method (on-toggle-visualizer self evt)
    (if (is? space Replay-Space)
        (let ((interface (current-interface)))
          (let ((root (child interface 'replay)))
            (let ((visualizer (child root 'visualizer)))
              (set-visible? visualizer (not (get-visible? visualizer)))
              (together-visualizer-panel-layouter visualizer)
              (together-timeline-panel-layouter (child root 'timeline))
              (together-evolution-panel-layouter (child root 'evolution))
              (layout-view root)
              (layout-view interface)
              (invalidate-interface))))
      (bell)))
  
  
  (method (on-toggle-stress self evt)
    (let ((world (current-world)))
      (if (not stressable?)
          (display-error world "Not stressable")
        (set-stress? (not stress?))
        (display-on/off world "Stress" stress?))))
  
  
  (method (on-goto-gathering self evt)
    (let ((client (current-client)))
      (typecase space
        ((Gathering-Space))
        ((Sphere-Space)
         (exit-zone self))
        (else
         (goto-space self 'gathering)))))
  
  
  (method (on-goto-script self evt)
    (typecase space
      ((Script-Space))
      ((Circle-Space)
       (bell))
      (else
       (goto-script/last self))))
  
  
  @convert!?
  (method (toggle-script self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((toplevel (current-toplevel))
            (panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (if (get-visible? panel)
              (begin
                (set-visible? panel #f)
                (set-caption toplevel #f)
                (focus-world))
            (require-cataloguer)
            (let ((text (locate manager '(script text))))
              (if edited-entity
                  (begin
                    (recolorize-syntax text)
                    (edited-update manager))
                (when edited-script
                  (let ((script (find-script world edited-script)))
                    (when script
                      (let ((entity (register-asset-script script)))
                        (set-edited-entity entity)
                        (set-edited manager entity)
                        (set-moniker text (get-file script)))))))
              (acquire-focus text))
            (set-visible? panel #t))))))
  
  
  (method (goto-script/last self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (let ((text (locate manager '(script text))))
            (when (not edited-entity)
              (when edited-script
                (let ((script (find-script world edited-script)))
                  (when script
                    (require-cataloguer)
                    (let ((entity (register-asset-script script)))
                      (set-edited-entity entity)
                      (set-edited manager entity)
                      (set-moniker text (get-file script)))))))
            (goto-script self))))))
  
  
  (method (goto-script self)
    (goto-space self 'script))
  
  
  (method (on-goto-replay self evt)
    (typecase space
      ((Replay-Space))
      ((Circle-Space)
       (view-last-replay self))
      (else
       (goto-replay/last self))))
  
  
  (method (view-last-replay self)
    (let ((last-replay (world-setting 'world.last-replay #f)))
      (if last-replay
          (bind (name from to now) last-replay
            (let ((dir (new-directory {Directory Documents "replays"} name)))
              (if (exists? dir)
                  (open/view-replay self dir from to now)
                (bell))))
        (bell))))
  
  
  (method (goto-replay/last self)
    (let ((interface (current-interface)))
      (if (get-replay (child interface 'replay))
          (goto-replay self)
        (let ((last-replay (world-setting 'world.last-replay #f)))
          (if last-replay
              (bind (name from to now) last-replay
                (let ((dir (new-directory {Directory Documents "replays"} name)))
                  (if (exists? dir)
                      (open/view-replay self dir from to now)
                    (goto-replay self))))
            (goto-replay self))))))
  
  
  (method (goto-replay self)
    (goto-space self 'replay))
  
  
  (method (open/view-replay self dir (from #f) (to #f) (now #f))
    (let ((replay (open-replay dir)))
      (view-replay self replay from to now)
      (set-setting options-settings 'world.last-replay (list (get-name dir) (get-from replay) (get-to replay) (get-now replay)))
      (save-content options-settings)))
  
  
  (method protected (view-replay self replay (from #f) (to #f) (now #f))
    (let ((title (get-title replay))
          (tier (get-tier replay))
          (names (get-names replay))
          (metadatas (get-metadatas replay))
          (chronologies (get-chronologies replay))
          (evolutions (get-evolutions replay))
          (channels (get-channels replay))
          (moments (get-moments replay))
          (base-time (get-base-time replay)))
      (let ((sites (metadata-sites (table-ref metadatas tier)))
            (chronology (table-ref chronologies tier))
            (evolution (table-ref evolutions tier)))
        (define (setup-replay-panel panel)
          (set-replay panel replay))
        
        (define (setup-visualizer-panel panel)
          (set-replay panel replay)
          (set-tier panel tier)
          (setup-visualizer panel)
          (invalidate-view panel))
        
        (define (setup-timeline-panel panel)
          (set-tier panel (table-ref names tier))
          (set-title panel title)
          (set-highlighted-values panel '())
          (setup-sites panel sites)
          (set-chronology panel chronology)
          (set-evolution panel evolution)
          (set-evolutions panel evolutions)
          (reset-start/end panel)
          (setup-replay panel base-time)
          (when (and from to)
            (set-bounds panel from to)
            (update-span panel))
          (when now
            (set-now panel now))
          (set-from replay from)
          (set-to replay to)
          (set-now replay now))
        
        (define (setup-evolution-panel panel)
          (set-names panel names)
          (set-channels panel channels)
          (set-evolutions panel evolutions)
          (set-moments panel moments)
          (set-base-time panel base-time))
        
        (define (setup-moments-panel panel)
          (set-names panel names)
          (set-moments panel moments)
          (set-base-time panel base-time))
        
        (if #f @wait (is? space Circle-Space)
            (let ((world (current-world))
                  (udp (current-udp)))
              (define (stream-replay name)
                (let ((channels (list (make-replay-channel))))
                  (make-stream "Replay" 'replay #f channels)))
              
              (define (make-replay-channel)
                (let ((media-kind udp-video)
                      (source-kind 'replay)
                      (level #f)
                      (resolution draw-resolution)
                      (framerate #f)
                      (bitrate draw-bitrate)
                      (codec #f)
                      (caps #f)
                      (metadata '())
                      (send-state 'on))
                  (new Channel-Creator
                    (list media-kind source-kind level resolution framerate bitrate codec caps metadata send-state)
                    (lambda (stream-no channel-no)
                      (let ((client (current-client)))
                        (let ((channel (register-send-channel (get-udp-client client) upload-stream-priority stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state)))
                          (channel-output (current-video) stream-no channel root-view: (make-replay-view))
                          (let ((src (new Video-Src))
                                (sink (new Stream-Frame-Consumer
                                        consumer: (client-video-consumer client channel))))
                            (let ((pipeline (pipeline (list src sink))))
                              (set-pipeline channel pipeline)))))))))
              
              (define (make-replay-view)
                (let ((root (new Together-Replay-Panel position: {Point 0 0} size: {Dimension 1280 720} in-circle?: #t)))
                  (let ((visualizer (new Together-Visualizer-Panel parent: root name: 'visualizer position: {Point 64  20} size: {Dimension 1152 150}))
                        (timeline   (new Together-Timeline-Panel   parent: root name: 'timeline   position: {Point 64 168} size: {Dimension 1152 220}))
                        (evolution  (new Together-Evolution-Panel  parent: root name: 'evolution  position: {Point 64 387} size: {Dimension 1152 333}))
                        (moments    (new Together-Moments-Panel    parent: root name: 'moments    position: {Point 64 387} size: {Dimension 1152 333})))
                    ;(set-background root {Color red: 30 green: 30 blue: 30 alpha: .7})
                    ;(set-border-sides (child visualizer 'border) 'bottom)
                    ;(set-border-color timeline #f)
                    ;(set-border-sides (child evolution 'border) 'top)
                    (setup-replay-panel root)
                    (setup-visualizer-panel visualizer)
                    (setup-timeline-panel timeline)
                    (setup-evolution-panel evolution)
                    (setup-moments-panel moments)
                    (display-evolutions root now)
                    (update-visualizer root)
                    root)))
              
              (hide-admin self)
              (play (stream-replay "Replay")))
        (hide-admin self)
        (goto-replay self)
        (let ((root (get-root space)))
          (setup-replay-panel root)
          (setup-visualizer-panel (child root 'visualizer))
          (setup-timeline-panel (child root 'timeline))
          (setup-evolution-panel (child root 'evolution))
          (setup-moments-panel (child root 'moments))
          (display-evolutions root now)
          (update-visualizer root))))))
  
  
  (method (on-profile-pulse self evt)
    (if running-profile
        (cancel-profile)
      (profile-pulse)))
  
  
  (method (on-profile-bbr self evt)
    (if running-profile
        (cancel-profile title: "BBR")
      (profile-bbr)))
  
  
  (method (on-exibit-on self evt)
    (exibit-on))
  
  
  (method (on-exibit-off self evt)
    (exibit-off))
  
  
  (method (on-request-evolutions self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (show-admin self)
          (acquire-focus text)
          (insert-string text "request evolution all")
          (console-return text
            (lambda ()
              (console-evaluate text)))))))
  
  
  (method (on-request-replays self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (show-admin self)
          (acquire-focus text)
          (insert-string text "request replay all")
          (console-return text
            (lambda ()
              (console-evaluate text)))))))
  
  
  (method (on-request-captures self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (show-admin self)
          (acquire-focus text)
          (insert-string text "request retrieve all")
          (console-return text
            (lambda ()
              (console-evaluate text)))))))
  
  
  (method (on-show-captures self evt)
    (let ((interface (current-interface)))
      (let ((panel (find-type interface Captures-Viewer)))
        (if panel
            (close panel)
          (open-frame (new Captures-Viewer size: {Dimension 366 588} location: 'center))))))
  
  
  (method package (receive-replay self pathnames)
    (if (and (client?)
             (= 1 (length pathnames))
             (extension=? (get-extension (car pathnames)) "replay"))
        (let ((interface (current-interface)))
          (let ((panel (child interface 'admin)))
            (let ((text (locate panel '(console text)))
                  (path (subpath {Directory Documents} (car pathnames))))
              (if (not path)
                  (bell)
                (show-admin self)
                (acquire-focus text)
                (insert-string text (format "simulate {s}" (join path "/")))
                (console-return text
                  (lambda ()
                    (console-evaluate text))))
              #t)))
      #f))
  
  
  (method (on-goto-simulate self evt)
    (typecase space
      ((Simulate-Space))
      ((Circle-Space)
       (bell))
      (else
       (goto-simulate self))))
  
  
  (method (goto-simulate self)
    (goto-space self 'simulate))
  
  
  (method (on-start-recording self evt)
    (start-recording))
  
  
  (method (on-stop-recording self evt)
    (stop-recording))
  
  
  (method (on-process-recording self evt)
    (process-recording))
  
  
  (method (on-preprocess-streams self evt)
    (preprocess-streams self #t))
  
  
  (method (on-preprocess-qualities self evt)
    (preprocess-streams self #t)
    (preprocess-streams self #f))
  
  
  (method (preprocess-streams self prime?)
    (let ((thread
            (new-thread
              (lambda ()
                (with-task-mutex
                  (lambda ()
                    (let ((world (current-world)))
                      (working world
                        (lambda ()
                          (define (feedback stage file suffix percentage)
                            (working-progress world (format "Preprocessing {a} ({a})" (get-name file) suffix) percentage))
                          
                          (catch (Preprocess-Unsupported-Error err
                                   (display-error world (get-message err)))
                            (iterate-stream-directories
                              (lambda (stream-directory)
                                (let ((dir (if (admin?)
                                               (let ((dir (new-directory stream-directory '("convert"))))
                                                 (if (exists? dir)
                                                     dir
                                                   stream-directory))
                                             stream-directory)))
                                  (preprocess-directory dir prime?: prime? denoise?: preprocess-denoise? voice?: preprocess-voice? feedback: feedback)))))))))))
              'preprocess)))
      (thread-base-priority-set! thread background-priority)
      (thread-start! thread)))
  
  
  (method (on-toggle-window-share self evt)
    (with-cursor :wait
      (lambda ()
        (toggle-window-share self))))
  
  
  (method (toggle-window-share self)
    (let ((world (current-world))
          (client (current-client))
          (udp (current-udp)))
      (if (not current-circle-name)
          (display-error world "You are not in a group")
        (if (locate-screen-stream)
            (display-error world "You are already sharing your screen")
          (let ((stream (locate-window-stream)))
            (cond ((not stream)
                   (let ((stream (stream-window "Window")))
                     (play stream)
                     (let ((channel (locate-window-channel stream)))
                       (let ((info (require-caps channel)))
                         (if (not info)
                             (begin
                               (close-send-stream udp stream)
                               (display-error world "Unable to share window"))
                           (receive (caps resolution) info
                             (media-init client (get-no stream) (list (list (get-no channel) caps resolution)))
                             (set-send-state channel 'on)
                             (set-caps channel caps)
                             (set-resolution channel resolution))
                           (display-on/off world "Window sharing" #t))))))
                  (else
                   (close-send-stream udp stream)
                   (display-on/off world "Window sharing" #f))))))))
  
  
  (method (on-toggle-screen-share self evt)
    (with-cursor :wait
      (lambda ()
        (toggle-screen-share self))))
  
  
  (method (toggle-screen-share self)
    (let ((world (current-world))
          (client (current-client))
          (udp (current-udp)))
      (if (not current-circle-name)
          (display-error world "You are not in a group")
        (if (locate-window-stream)
            (display-error world "You are already sharing your window")
          (let ((stream (locate-screen-stream)))
            (cond ((not stream)
                   (let ((stream (stream-screen "Screen")))
                     (play stream)
                     (let ((channel (locate-screen-channel stream)))
                       (let ((info (require-caps channel)))
                         (if (not info)
                             (begin
                               (close-send-stream udp stream)
                               (display-error world "Unable to share screen"))
                           (receive (caps resolution) info
                             (media-init client (get-no stream) (list (list (get-no channel) caps resolution)))
                             (set-send-state channel 'on)
                             (set-caps channel caps)
                             (set-resolution channel resolution))
                           (display-on/off world "Screen sharing" #t))))))
                  (else
                   (close-send-stream udp stream)
                   (display-on/off world "Screen sharing" #f))))))))
  
  
  (method (on-capture-window self evt)
    (capture-window self))
  
  
  (method (capture-window self)
    (let ((world (current-world)))
      (let ((file (timestamped-file {Directory Documents "screenshots"} "together" "png")))
        (create-directories file)
        (capture-window-to-file file)
        (display-message world "Screenshot captured"))))
  
  
  (method (on-toggle-mode self evt)
    (let ((world (current-world)))
      (set-video-mode
        (if (eq? video-mode 'fit)
            'fill
          'fit))
      (display-message world (case video-mode
                               ((fit) "Fit")
                               ((fill) "Fill")))))
  
  
  (method (on-toggle-hide self evt)
    (let ((space (current-space)))
      (when (is? space Circle-Space)
        (toggle-hide space))))
  
  
  (method (on-toggle-experiment self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'experiment)))
        (if (get-visible? panel)
            (hide-experiment self)
          (show-experiment self)))))
  
  
  (method (on-run-experiment7 self evt)
    (experiment7))
  
  
  (method (on-run-experiment8 self evt)
    (experiment8))
  
  
  (method (on-run-experiment9 self evt)
    (experiment9))
  
  
  (method (on-run-experiment0 self evt)
    (experiment0))
  
  
  (method (show-experiment self)
    (install-experiments)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'experiment-label) #t)
      (set-visible? (child interface 'experiment) #t)
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (set-visible? (child root 'join) #f)))
      (view-experiment self)
      (layout-view interface)))
  
  
  (method (hide-experiment self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'experiment-label) #f)
      (set-visible? (child interface 'experiment) #f)
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (set-visible? (child root 'join) #t)))))
  
  
  (method (on-add-image self evt)
    (add-image))
  
  
  (method (on-add-video self evt)
    (add-video))
  
  
  (method (on-add-music self evt)
    (add-music))
  
  
  (method (on-remove-stream self evt)
    (remove-random-stream))
  
  
  (method (on-edit-test self evt)
    (edit-test-script self 'world.test-script "test/test"))
  
  
  (method (on-edit-test1 self evt)
    (edit-test-script self 'world.test1-script "test/test1"))
  
  
  (method (on-edit-test2 self evt)
    (edit-test-script self 'world.test2-script "test/test2"))
  
  
  (method (on-edit-test3 self evt)
    (edit-test-script self 'world.test3-script "test/test3"))
  
  
  (method (on-edit-test4 self evt)
    (edit-test-script self 'world.test4-script "test/test4"))
  
  
  (method (on-edit-test5 self evt)
    (edit-test-script self 'world.test5-script "test/test5"))
  
  
  (method (on-edit-test6 self evt)
    (edit-test-script self 'world.test6-script "test/test6"))
  
  
  (method (on-edit-test7 self evt)
    (edit-test-script self 'world.test7-script "test/test7"))
  
  
  (method (on-edit-test8 self evt)
    (edit-test-script self 'world.test8-script "test/test8"))
  
  
  (method (on-edit-test9 self evt)
    (edit-test-script self 'world.test9-script "test/test9"))
  
  
  (method (on-edit-test0 self evt)
    (edit-test-script self 'world.test0-script "test/test0"))
  
  
  (method package (edit-test-script self name default)
    (let ((world (current-world)))
      (let ((script (world-setting name default)))
        (if (not script)
            (display-message world (format "Setting {a} is undefined" name))
          (edit-asset-script script))))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (cleanup-group/circle together)
      (clear-together-skybox)
      (open-login-zone))))


;;;
;;;; Circle-Label
;;;


(class Circle-Label extends Kind-Label
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (toggle-circle-options together))))


;;;
;;;; Profile-Label
;;;


(class Profile-Label extends Kind-Label
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (toggle-video-options together))))


;;;
;;;; Microphone-Power
;;;


(class Microphone-Power extends View
  
  
  (property power initialize 0. getter generate)
  
  
  (method public (set-power self p)
    (set! power p)
    (invalidate-view self))
  
  
  (method override (draw self surface context)
    (let ((rect (new Rect 0 3 65 19)))
      (frame-rect surface rect {Color Dark-Green})
      (let ((rect (inflate-rect rect -2 -2)))
        (let ((l (get-left rect))
              (t (get-top rect))
              (r (+ (get-left rect) (fxround (* power (cast <fl> (rect-width rect))))))
              (b (get-bottom rect)))
          (fill-rect surface (new Rect l t r b) {Color Green})))))
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (toggle-audio-options together))))


;;;
;;;; Enter
;;;


(class Enter-View extends Layout-View
  
  
  (form
    (<install>                   layout-type: border
      (<Kind-Label>  name: label title: "" location: north size: {Dimension 200 34} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: center)
      (<Push-Button> name: enter title: "Enter" location: south size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default}))))


;;;
;;;; Join-Circle
;;;


(class Join-Circle-View extends Layout-View
  
  
  (method protected (set-description-text self text)
    (let ((label (locate self 'label))
          (desc (locate self 'description))
          (join (locate self 'join))
          (text `(<span>
                   (<paragraph>
                     (<text> color: White font: Description-View ,text)))))
      (set-text desc text)
      (let ((height (+ (get-height label)
                       (get-height desc)
                       (get-height join))))
        (set-size self (new Dimension 505 (+ height 20)))
        (layout-view (get-parent desc))
        (layout-view (get-parent join))))))


;;;
;;;; Join
;;;


(class Join-View extends Join-Circle-View
  
  
  (form
    (<install>                                layout-type: border
      (<Kind-Label>         name: label       title: "" location: north size: {Dimension 200 34} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: center)
      (<Layout-View>                          location: center size: {Dimension 505 34} layout-type: justify
        (<Description-View> name: description location: center))
      (<Layout-View>                          location: south size: {Dimension 200 42} layout-type: justify
        (<Push-Button>      name: join        title: "Join" location: (center tail) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default})))))


;;;
;;;; Join-Zoom
;;;


(class Join-Zoom-View extends Join-Circle-View
  
  
  (form
    (<install>                                layout-type: border
      (<Kind-Label>         name: label       title: "" location: north size: {Dimension 200 34} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: center)
      (<Layout-View>                          location: center size: {Dimension 505 34} layout-type: justify
        (<Description-View> name: description location: center))
      (<Layout-View>                          location: south size: {Dimension 200 42} layout-type: justify
        (<Push-Button>      name: join        title: "Join on Zoom" location: (center tail) size: {Dimension 210 36} font: {Font Label-User point-size: 16.5 antialias: default})))))


;;;
;;;; Create
;;;


(class Create-View extends Layout-View
  
  
  (form
    (<install>                              layout-type: justify
      (<Kind-Label>   name: label           title: "New circle name" location: (center 0) size: {Dimension 200 40} auto-size?: #t font: {Font Label-User point-size: 17.5 antialias: default} justification: tail)
      (<Name-View>    name: view            location: (center 30) size: {Dimension 300 24} border-type: solid border-color: {Color Dark-Gray} action-view: create invalid-view: invalid option-view: require-camera? name-label: "Circle name" max-length: 40)
      (<Name-Invalid> name: invalid         location: (center 56) size: {Dimension 400 16} font: {Font Label-User point-size: 12.5})
      (<Push-Button>  name: create          title: "Create & Join" enabled?: #f location: (center 89) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default})
      (<Check-Box>    name: require-camera? title: "Start with camera" location: (center 134) size: {Dimension 116 16} checked?: #t visible?: #f))))


(class Create-Close extends View
  
  
  (method override (draw self surface context)
    (let ((width (get-width self))
          (height (get-height self)))
      (set-color surface {Color World-Caption})
      (set-line-width surface 1.5)
      (line surface 0 0 8 8)
      (line surface 8 0 0 8)))
  
  
  (method override (mouse-up self evt)
    (let ((panel (find-ascendant self Create-Panel)))
      (close panel))))


(class Create-Panel extends World-Panel
  
  
  (form
    (<install>                                  layout-type: fill
      (<Border-View>      name: content         location: center border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .450}
        (<Create-View>    name: create
          (<!>            name: label           location: (center 10))
          (<!>            name: view            location: (center 40))
          (<!>            name: invalid         location: (center 66))
          (<!>            name: create          location: (center 99))
          (<!>            name: require-camera? location: (center 142) checked?: #t)
          (<Create-Close> name: close           location: (-6 6) size: {Dimension 8 8})))))
  
  
  (method override (escape-close? self)
    #t))


;;;
;;;; Create-Zoom
;;;


(class Create-Zoom-View extends Layout-View
  
  
  (form
    (<install>                               layout-type: justify
      (<Kind-Label>    name: label           title: "New circle name" location: (center 0) size: {Dimension 200 40} auto-size?: #t font: {Font Label-User point-size: 17.5 antialias: default} justification: tail)
      (<Zoom-Name>     name: view            location: (center 30) size: {Dimension 300 24} border-type: solid border-color: {Color Dark-Gray} action-view: create invalid-view: invalid brother-view: link-view name-label: "Circle name" max-length: 40)
      (<Name-Invalid>  name: invalid         location: (center 56) size: {Dimension 400 16} font: {Font Label-User point-size: 12.5})
      (<Kind-Label>    name: link-label      title: "Zoom link" location: (center 75) size: {Dimension 200 40} auto-size?: #t font: {Font Label-User point-size: 17.5 antialias: default} justification: tail)
      (<Zoom-Link>     name: link-view       location: (center 105) size: {Dimension 400 24} border-type: solid border-color: {Color Dark-Gray} action-view: create invalid-view: link-invalid brother-view: view name-label: "Zoom link")
      (<Name-Invalid>  name: link-invalid    location: (center 131) size: {Dimension 400 16} font: {Font Label-User point-size: 12.5})
      (<Push-Button>   name: create          title: "Create" enabled?: #f location: (center 165) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default}))))


;;;
;;;; Zoom-View
;;;


(class Zoom-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: navigate-previous visible?: #t action-handler: {Event-Handler :focus on-navigate-previous} shortcut: {Shortcut Tab})
      (<Action-Item> name: navigate-next     visible?: #t action-handler: {Event-Handler :focus on-navigate-next} shortcut: {Shortcut :shift Tab}))))


(definition zoom-actions
  #f)

(definition (cache-zoom-actions)
  (or zoom-actions
      (let ((actions (new Zoom-Actions)))
        (set! zoom-actions actions)
        actions)))


(class Zoom-Text extends Name-Text
  
  
  (method override (focus-actions self)
    (cons (cache-zoom-actions)
          (nextmethod self)))
  
  
  (method (on-navigate-previous self evt)
    (navigate-view self #t))
  
  (method (on-navigate-next self evt)
    (navigate-view self #f)))


(class Zoom-Name extends Name-View
  
  
  (method override (form-model self form)
    (case (get-name form)
      ((text) Zoom-Text)
      (else (nextmethod self form)))))


(class Zoom-Link extends Link-View
  
  
  (method override (form-model self form)
    (case (get-name form)
      ((text) Zoom-Text)
      (else (nextmethod self form)))))


;;;
;;;; People-Label
;;;


(class People-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (people-label-action together))))


;;;
;;;; People-Panel
;;;


(class People-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>   name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<People-View> name: people  location: center)))))


;;;
;;;; People-View
;;;


(class People-View extends Scroller-View
  
  
  (form
    (<install>                                 style: document hscroll?: #f vscroll?: #f
      (<content~>                              layout-type: fill
        (<Tree-Header>                         style: document shown?: #f
          (<content~>
            (<People-Tree>        name: people portfolio: :images filled-column: person always-select?: #t background: #f mouse-up-handler: {Event-Handler :form on-mouse-up} action-handler: {Event-Handler :form on-action} selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
              (<Tree-Node-Column> name: person title: "Person" width: 235 controls?: #f toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-mouse-up self evt)
    (let ((together (current-together)))
      (show-chat together)))
  
  
  (method package (on-action self evt)
    (let ((together (current-together)))
      (let ((tree (get-sender evt)))
        (let ((recipient (get-single-selected-data tree))
              (previous-focus (get-previous-focus tree)))
          (update-message-recipient together recipient)
          (when (is? previous-focus Command-Bar-Text-View)
            (focus-command-text together))))))
  
  
  (method package (on-selection-change self evt)
    (let ((together (current-together)))
      (people-selection-change together)))
  
  
  (method package (on-double-click self evt)
    (let ((together (current-together)))
      (people-double-click together)))
  
  
  (method override (on-return-press self evt)
    (let ((together (current-together)))
      (people-return-press together))))


;;;
;;;; People-Tree
;;;


(class People-Tree extends Tree-View
  
  
  (slot previous-focus initialize #f getter generate)
  
  
  (method override (mouse-down self evt)
    (set! previous-focus (active-focus))
    (nextmethod self evt)))


;;;
;;;; Streams-Label
;;;


(class Streams-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((space (current-space)))
      (streams-label-action space))))


;;;
;;;; Streams-Panel
;;;


(class Streams-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Streams-View> name: streams location: center)))))


;;;
;;;; Streams-View
;;;


(class Streams-View extends Scroller-View
  
  
  (form
    (<install>                                style: document hscroll?: #f vscroll?: #f
      (<content~>                             layout-type: fill
        (<Tree-Header>                        style: document shown?: #f
          (<content~>
            (<Streams-Tree>     name: streams portfolio: :images filled-column: stream background: #f action-handler: {Event-Handler :form on-action}
              (<Streams-Column> name: stream  title: "Stream" width: 235 toplevel-controls?: #f controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-action self evt)
    (let ((space (current-space)))
      (streams-action space))))


;;;
;;;; Streams-Tree
;;;


(class Streams-Tree extends Tree-View)


;;;
;;;; Streams-Column
;;;


(class Streams-Column extends Tree-Node-Column
  
  
  (method override (draw-background self surface context row data width height)
    )
  
  
  (method override (cell-color self color context)
    color))


;;;
;;;; Chat-Label
;;;


(class Chat-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (chat-label-action together))))


;;;
;;;; To-Tool
;;;


(class To-Tool extends Push-Tool
  
  
  (form
    (<install> size: {Dimension 22 22} portfolio: :images tooltip?: #t))
  
  
  (method override (get-tooltip-context self pos)
    (let ((text (get-tooltip-text self))
          (bounds (get-tooltip-bounds self pos)))
      (tooltip-context self text bounds))))


;;;
;;;; Invite-Tool
;;;


(class Invite-Tool extends To-Tool
  
  
  (slot kind initialize #f accessors generate)
  
  
  (method override (get-tooltip-text self)
    (case kind
      ((group)
       `(<span>
          (<paragraph> "Invite to group")
          ""
          (<paragraph> (<text> color: World-Green "Invite person to join an audio group"))))
      ((circle)
       `(<span>
          (<paragraph> "Invite to circle")
          ""
          (<paragraph> (<text> color: World-Green "Invite person to join your circle")))))))


;;;
;;;; Verify-Tool
;;;


(class Verify-Tool extends To-Tool
  
  
  (method override (get-tooltip-text self)
    `(<span>
       (<paragraph> "Verify")
       ""
       (<paragraph> (<text> color: World-Green "Verify that you know this person")))))


;;;
;;;; Teleport-Tool
;;;


(class Teleport-Tool extends To-Tool
  
  
  (method override (get-tooltip-text self)
    `(<span>
       (<paragraph> "Teleport to you")
       ""
       (<paragraph> (<text> color: World-Green "Teleport person to your location")))))


;;;
;;;; Experiment-Panel
;;;


(class Experiment-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>                 name: content    location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Splitter-View>             name: splitter   separator: none orientation: vert mode: relative division: 40.
          (<Scroller-View>                                location: first style: document hscroll?: #t vscroll?: #t
            (<content~>                                   layout-type: fill
              (<Tree-Header>             name: header     style: document shown?: #f
                (<content~>                               layout-type: fill
                  (<Experiment-Tree>     name: experiment portfolio: :images filled-column: title background: #f action-handler: {Event-Handler :form on-action}
                    (<Experiment-Column> name: title      title: "Experiment" toplevel-controls?: #f controls?: #f display-images?: #f display-levels?: #f))))))
          (<Experiment-View>         name: console    location: second)))))
  
  
  (method override (draw self surface context)
    (let ((v (- (get-height (locate self 'header)) 1)))
      (set-color surface {Color Medium-Gray alpha: .7})
      (set-line-width surface 1)
      (move-to surface 1 v)
      (line-to surface (- (get-width self) 1) v)))
  
  
  (method package (on-action self evt)
    (let ((together (current-together)))
      (let ((clear? (get-shift? evt)))
        (experiment-action together clear?)))))


;;;
;;;; Experiment-Tree
;;;


(class Experiment-Tree extends Tree-View)


;;;
;;;; Experiment-Column
;;;


(class Experiment-Column extends Tree-Node-Column
  
  
  (method override (draw-background self surface context row data width height)
    )
  
  
  (method override (cell-color self color context)
    color))


;;;
;;;; Experiment-View
;;;


(class Experiment-View extends Scroller-View
  
  
  (form
    (<install>
      (<!>                      name: content
        (<Experiment-Text-View> name: text    background: #f)))))


;;;
;;;; Experiment-Text-View
;;;


(class Experiment-Text-View extends World-Text-View
  
  
  (form
    (<install> editable?: #f selectable?: #t))
  
  
  (method override (new-model self)
    (new Text-Model wrap?: #t left-padding: 2 top-padding: 1)))


;;;
;;;; Admin-Panel
;;;


(class Admin-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>  name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Admin-View> name: console location: center)))))


;;;
;;;; Admin-View
;;;


(class Admin-View extends Scroller-View
  
  
  (form
    (<install>
      (<!>                 name: content
        (<Admin-Text-View> name: text    background: #f))))))
