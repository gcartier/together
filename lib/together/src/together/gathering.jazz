;;;============
;;;  Together
;;;============
;;;
;;;; Gathering Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.gathering jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.component)
        (jazz.console)
        (jazz.editor)
        (jazz.event)
        (jazz.exemplar)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.math)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.snapshot)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (time)
        (world)
        (world.asset)
        (world.audio)
        (world.autoload)
        (world.build)
        (world.camera)
        (world.capture)
        (world.chronology)
        (world.circle)
        (world.client)
        (world.client.text)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.context)
        @bazoo
        (world.dye)
        (world.evolution)
        (world.gc)
        (world.geometry)
        (world.history)
        (world.interface)
        (world.interface.actions)
        (world.interface.bindings)
        (world.interface.chat)
        (world.interface.command)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.evolution)
        (world.interface.exception)
        (world.interface.frame)
        (world.interface.mainbar)
        (world.interface.panel)
        (world.interface.script)
        (world.interface.sheet)
        (world.interface.text)
        (world.interface.timeline)
        (world.interface.tooltip)
        (world.io)
        (world.live)
        (world.logging)
        (world.manager)
        (world.pane)
        (world.player)
        (world.preprocess)
        (world.profile)
        (world.profiling)
        (world.ring)
        (world.screenshot)
        (world.script.asset)
        (world.settings)
        (world.skybox)
        (world.sound)
        (world.space)
        (world.stream)
        (world.streamer)
        (world.streaming)
        (world.support)
        (world.task)
        (world.throttle)
        (world.time)
        (world.timeline)
        (world.udp)
        (world.video)
        (world.window)
        (world.zone)
        (together)
        (together.experiment)
        (together.network)
        (together.options)
        (together.replay)
        (together.replay-space)
        (together.script)
        (together.script-space)
        (together.settings)
        (together.simulate-space)
        (together.simulator)
        (together.space)
        (together.sphere-space)
        (together.visualizer)
        (together.zone))


(definition auto-hide?
  (world-setting 'together.auto-hide? #t))


(definition (auto-audio?)
  (world-setting 'together.auto-audio? #t))

(definition (auto-video?)
  (world-setting 'together.auto-video? #t))

(definition (auto-live?)
  (if (admin?)
      (world-setting 'together.auto-live? #t)
    #t))


(definition auto-create
  (world-setting 'together.auto-create #f))

(definition auto-join
  (world-setting 'together.auto-join #f))


(definition connect-sound
  (world-setting 'together.connect-sound #f))

(definition connect-attention
  (world-setting 'together.connect-attention #f))

(definition connect-message
  (world-setting 'together.connect-message #f))

(definition message-sound
  (world-setting 'together.message-sound #t))

(definition message-attention
  (world-setting 'together.message-attention #t))


(definition focus-unmute?
  (world-setting 'together.focus-unmute? #f))

(definition navigate-shortcuts?
  (world-setting 'together.navigate-shortcuts? #f))


(definition preprocess-prime?
  (world-setting 'together.preprocess-prime? #t))


(definition edited-script
  (world-setting 'together.edited-script #f))


(definition protected show-dropped?
  (world-setting 'together.show-dropped? #f))


(definition protected show-debug?
  #f)

(definition protected (set-show-debug? flag)
  (set! show-debug? flag))


(definition protected show-media
  #f)

(definition protected (set-show-media what)
  (set! show-media what))


;; YOWNU quicky
(definition *available-zones*
  #f)

(definition protected (cache-available-zones)
  (define (filter-zones zones)
    (collect-if (lambda (info)
                  (bind (zone . title) info
                    (not (equal? title "welcome"))))
                zones))
  
  (or *available-zones*
      (let ((zones (available-zones (current-client))))
        (set! *available-zones* (filter-zones zones))
        zones)))


;; quicky
(cond-expand
  (windows
   (hub get-hide-last-mouse)
   (hub set-hide-last-mouse))
  (else))


;;;
;;;; Void-Zone
;;;


(class Void-Zone extends Zone
  
  
  (form
    (<install> draw-grid?: #f))
  
  
  (method override (void? self)
    #t))


;;;
;;;; Gathering-Space
;;;


(define-trait gathering-bindings Bindings
  (<Trait>                   name: gathering
    (<install>
      (<world-main!>
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: view-news                  active?: #t)
        (<!>                 name: view-roadmap               active?: #t)
        (<!>                 name: view-help                  active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-interface           active?: #t)
        (<!>                 name: toggle-windowed-mode       active?: #t))
      (<world-chat!>
        (<!>                 name: command-message            active?: #t)
        (<!>                 name: command-slash              active?: #t)
        (<!>                 name: repeat-previous            active?: #t))
      (<world-script!>
        (<!>                 name: test1                      active?: #t)
        (<!>                 name: test2                      active?: #t)
        (<!>                 name: test3                      active?: #t)
        (<!>                 name: test4                      active?: #t)
        (<!>                 name: test5                      active?: #t)
        (<!>                 name: test6                      active?: #t)
        (<!>                 name: test7                      active?: #t)
        (<!>                 name: test8                      active?: #t)
        (<!>                 name: test9                      active?: #t)
        (<!>                 name: test0                      active?: #t)
        (<!>                 name: run-script                 active?: #t)
        (<!>                 name: run-last-script            active?: #t)
        (<!>                 name: view-script                active?: #t)
        (<!>                 name: view-workspace             active?: #t)
        (<!>                 name: target-script              active?: #t)
        (<!>                 name: zoom-horizontally          active?: #t)
        (<!>                 name: zoom-vertically            active?: #t)
        (<!>                 name: zoom-fullscreen            active?: #t)
        (<!>                 name: clear-console              active?: #t)
        (<!>                 name: clear-terminal             active?: #t))
      (<world-debug!>
        (<!>                 name: toggle-profiler            active?: #t)
        (<!>                 name: explore-interface          active?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               active?: #t))
      (<together-audio!>
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: video-options              active?: #t))
      (<together-share!>
        (<!>                 name: preprocess-streams         active?: #t)
        (<!>                 name: capture-screen             active?: #t))
      (<together-profile!>
        (<!>                 name: profile-pulse              active?: #t)
        (<!>                 name: profile-bandwidth          active?: #t)
        (<!>                 name: profile-network            active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: test                       active?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            active?: #t)
        (<!>                 name: edit-definition            active?: #t)
        (<!>                 name: edit-script1               active?: #t)
        (<!>                 name: edit-script2               active?: #t)
        (<!>                 name: edit-script3               active?: #t)
        (<!>                 name: edit-script4               active?: #t)
        (<!>                 name: edit-script5               active?: #t)
        (<!>                 name: edit-script6               active?: #t)
        (<!>                 name: edit-script7               active?: #t)
        (<!>                 name: edit-script8               active?: #t)
        (<!>                 name: edit-script9               active?: #t)
        (<!>                 name: edit-script0               active?: #t)))))


(define-trait gathering-group-bindings Bindings
  (<Trait>                   name: gathering
    (<install>
      (<together-menu!>
        (<!>                 name: leave-group                active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: toggle-push-to-talk        active?: #t)
        (<!>                 name: talk                       active?: #t)
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: video-options              active?: #t)))))


(define-trait gathering-circle-bindings Bindings
  (<Trait>                   name: gathering
    (<install>
      (<together-menu!>
        (<!>                 name: leave-circle               active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: toggle-push-to-talk        active?: #t)
        (<!>                 name: talk                       active?: #t)
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: video-options              active?: #t)))))


(class Gathering-Space extends Together-Space
  
  
  (slot view-focused initialize #f getter generate)
  
  
  (method override (space-name self)
    'gathering)
  
  
  (method override (space-setup self)
    (nextmethod self)
    (let ((together (current-together))
          (interface (current-interface)))
      (let ((version (process-version (current-process)))
            (date (build-short-date)))
        (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify visible?: #f)))
          (new Label-View name: 'together parent: root title: tier-title location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
          (new Version-Label name: 'version parent: root title: (format "v{a}{a}" (present version) environment-suffix) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Version-Label name: 'date parent: root title: date location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
          (new Push-Button name: 'quit parent: root title: "Quit" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-quit self))
          (new Kind-Label name: 'selected-label parent: root title: "" location: '(center (center -120)) size: {Dimension 500 40} auto-size?: #t font: {Font font-name: tahoma point-size: 24.5 antialias: default} justification: 'center)
          (new Kind-Label name: 'zone parent: root title: "" location: '(center (center -40)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'center)
          (new Push-Button name: 'zone-enter parent: root title: "Enter" location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-enter self))
          (new Kind-Label name: 'circle parent: root title: "" location: '(center (center -40)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'center)
          (new Push-Button name: 'circle-join parent: root title: "Join" location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-join self))
          (new Toggle-Button name: 'about parent: root title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-about self))
          (new Create-Circle-View name: 'circle-create parent: root location: 'center size: {Dimension 400 160})
          (set-action-handler (child root '(circle-create create)) (~ on-create&join self))
          (set! self.root root)))))
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((together (current-together))
          (client (current-client))
          (interface (current-interface))
          (world (current-world)))
      (set-visible? root #t)
      (set-visible? (child root 'together) #t)
      (set-visible? (child root 'version) #t)
      (set-visible? (child root 'date) #t)
      (set-visible? (child root 'quit) #t)
      (set-visible? (child mainbar 'name) #t)
      (set-title (child mainbar 'name) (get-character-name client))
      (when (admin?)
        (let ((admin-visible? (get-visible? (child interface 'admin))))
          (set-visible? (child root 'circle) (not admin-visible?))
          (set-visible? (child root 'circle-join) (not admin-visible?))))
      (set-visible? (child root 'circle-create) #t)
      (set-visible? (child mainbar 'profile) #t)
      (set-visible? (child interface 'people-label) #t)
      (set-visible? (child interface 'people) #t)
      (set-visible? (child interface 'streams-label) #f)
      (set-visible? (child interface 'streams) #f)
      (set-visible? (child interface 'chat-label) #t)
      (set-layouter (child interface 'chat) #f)
      (set-layouter (child interface 'command) #f)
      (set-visible? (child interface 'chat) #t)
      (set-location (child interface 'chat) '(-10 100))
      (set-proportion (child interface 'chat) (chat-proportion together))
      (set-visible? (child interface 'command-to) #t)
      (set-location (child interface 'command-to) (command-to-location together))
      (set-visible? (child interface 'command) #t)
      (set-proportion (child interface 'command) #f)
      (set-size (child interface 'command) (command-size together))
      (set-location (child interface 'command) (command-location together))
      (set-visible? (child root 'about) #t)
      (update-message-recipient together #f)
      (update-center-interface self)
      (layout-view interface)
      (layout-view root)
      (install-vista)
      (no-showcase world)
      (show root)
      (send-to-back root)
      (if (admin?)
          (unless (eq? (active-focus) (locate (child interface 'admin) '(console text)))
            (focus-world))
        (focus-world))))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (setup-visibility mainbar)
    (show-mainbar self)
    (let ((world (current-world)))
      (layout-message world)
      (layout-working world)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (set-visible? root #f)
      (hide-interface)
      (reset-panel-stack)
      (no-showcase world)
      (restore-fov)
      (uninstall-vista)))
  
  
  (method override (space-bindings self)
    (let ((together (current-together)))
      (let ((grouped? (grouped? together))
            (circling? (circling? together)))
        `(,gathering-bindings
          ,@(if grouped? (list gathering-group-bindings) '())
          ,@(if circling? (list gathering-circle-bindings) '())))))

  
  (method override (space-actions self)
    (append (list (find-actions 'together-menu)
                  (find-actions 'world-main)
                  (find-actions 'world-interface)
                  (find-actions 'world-chat)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-audio)
                  (find-actions 'together-video)
                  (find-actions 'together-share)
                  (find-actions 'together-profile)
                  (find-actions 'together-debug)
                  (find-actions 'together-script))
            (nextmethod self)))
  
  
  (method override (application-activate self)
    (install-vista))
  
  
  (method override (application-deactivate self)
    (uninstall-vista))
  
  
  (method override (central-menu-show self)
    (update-center-interface self))
  
  
  (method override (central-menu-hide self)
    (update-center-interface self))
  
  
  (method override (zone-change self zone)
    (let ((together (current-together)))
      (prepare-skybox together)))
  
  
  (method override (show-me? self)
    (let ((zone (current-zone)))
      (not (void? zone))))
  
  
  (method override (only-skybox? self)
    (let ((zone (current-zone)))
      (void? zone)))
  
  
  (method override (draw-message-offset self)
    120)
  
  
  (method override (enter-press self)
    (let ((together (current-together)))
      (when (and (eq? (active-focus) (current-interface))
                 (selected-loaded? together))
        (let ((zone (get-active-zone together))
              (group (get-active-group together))
              (allow-audio-only? (get-active-allow-audio-only? together)))
          (cond (group
                 (join-circle together group allow-audio-only?))
                (zone
                 (enter-zone together)))))))
  
  
  (method (circle-create-enabled? self)
    (let ((together (current-together)))
      (let ((circle-view (child root '(circle-create view))))
        (and (selected-loaded? together) (not (name-invalid circle-view))))))
  
  
  (method package (update-center-interface self)
    (let ((together (current-together))
          (interface (current-interface))
          (world (current-world)))
      (let ((active-zone (get-active-zone together))
            (active-group (get-active-group together))
            (circling? (circling? together)))
        (let ((loaded? (selected-loaded? together)))
          (define (enter-visible flag)
            (set-visible? (child root 'zone) flag)
            (set-visible? (child root 'zone-enter) flag)
            (set-enabled? (child root 'zone-enter) loaded?))
          
          (define (join-visible flag)
            (set-visible? (child root 'circle) flag)
            (set-visible? (child root 'circle-join) flag)
            (set-enabled? (child root 'circle-join) loaded?))
          
          (define (create-visible flag)
            (let ((create (child root 'circle-create)))
              (set-visible? create flag)
              (let ((circle-view (child create 'view)))
                (set-visible? (child create 'label) flag)
                (set-visible? circle-view flag)
                (set-enabled? (locate circle-view 'text) loaded?)
                (set-visible? (child create 'invalid) flag)
                (set-visible? (child create 'create) flag)
                (let ((enabled? (circle-create-enabled? self)))
                  (set-enabled? (child create 'create) enabled?)
                  (set-visible? (child create 'allow-audio-only?) (and flag enabled?))))))
          
          (if loaded?
              (set-title (child root 'selected-label) "")
            (set-color (child root 'selected-label) (get-selected-color together))
            (set-title (child root 'selected-label) (get-selected-message together)))
          (set-title (child root 'circle-join) (if circling? "Enter" "Join"))
          (cond ((get-central-menu world)
                 (enter-visible #f)
                 (join-visible #f)
                 (create-visible #f))
                (active-group
                 (set-title (child root 'circle) active-group)
                 (enter-visible #f)
                 (join-visible #t)
                 (create-visible #f)
                 (layout-view root))
                ((eq? active-zone 'start)
                 (enter-visible #f)
                 (join-visible #f)
                 (create-visible #t)
                 (layout-view root))
                (else
                 (set-title (child root 'zone) (last active-zone))
                 (enter-visible #t)
                 (join-visible #f)
                 (create-visible #f)
                 (layout-view root)))))))
  
  
  (method (on-enter self evt)
    (let ((together (current-together)))
      (enter-zone together)))
  
  
  (method (on-join self evt)
    (let ((together (current-together)))
      (if (circling? together)
          (enter-circle together)
        (join-circle together (get-active-group together) (get-active-allow-audio-only? together)))))
  
  
  (method (on-create&join self evt)
    (let ((together (current-together)))
      (create&join-circle together)))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (define (closer frame)
        (set-visible? (child root 'selected-label) #t)
        (set-visible? (child root 'circle) #t)
        (set-visible? (child root 'circle-join) #t)
        (set-visible? (child root 'circle-create) #t)
        (set-visible? (child interface 'people-label) #t)
        (set-visible? (child interface 'people) #t)
        (set-visible? (child interface 'chat-label) #t)
        (set-visible? (child interface 'chat) #t)
        (set-visible? (child interface 'command-to) #t)
        (set-visible? (child interface 'command) #t)
        (update-center-interface self)
        (when view-focused
          (inhibit-focus-selects-all view-focused
            (lambda ()
              (acquire-focus view-focused)))))
      
      (let ((frame (top-frame)))
        (if (is? frame World-Document)
            (begin
              (close frame)
              (closer frame))
          (show-about self closer: closer)))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (set! view-focused (active-focus))
      (set-visible? (child root 'selected-label) #f)
      (set-visible? (child root 'circle) #f)
      (set-visible? (child root 'circle-join) #f)
      (set-visible? (child interface 'people-label) #f)
      (set-visible? (child interface 'people) #f)
      (set-visible? (child interface 'streams-label) #f)
      (set-visible? (child interface 'streams) #f)
      (set-visible? (child interface 'chat-label) #f)
      (set-visible? (child interface 'chat) #f)
      (set-visible? (child interface 'command-to) #f)
      (set-visible? (child interface 'command) #f)
      (when (admin?)
        (set-visible? (child interface 'admin-label) #f)
        (set-visible? (child interface 'admin) #f))
      (set-visible? (child root 'zone) #f)
      (set-visible? (child root 'zone-enter) #f)
      (set-visible? (child root 'circle) #f)
      (set-visible? (child root 'circle-join) #f)
      (set-visible? (child root 'circle-create) #f)
      (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250}))))


;;;
;;;; Zone-Space
;;;


(define-trait zone-bindings Bindings
  (<Trait>                   name: zone
    (<install>
      (<world-main!>
        (<!>                 name: graphics-options           active?: #t)
        (<!>                 name: sound-options              active?: #t)
        (<!>                 name: interface-options          active?: #t)
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: open-welcome               active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-interface           active?: #t)
        (<!>                 name: toggle-windowed-mode       active?: #t)
        (<!>                 name: toggle-user                active?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              active?: #t)
        (<!>                 name: who-panel                  active?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                active?: #t)
        (<!>                 name: command-message            active?: #t)
        (<!>                 name: command-slash              active?: #t)
        (<!>                 name: repeat-previous            active?: #t))
      (<world-showcase!>
        (<!>                 name: showcase-menu              active?: #t)
        (<!>                 name: no-showcase                active?: #t)
        (<!>                 name: blocks-showcase            active?: #t)
        (<!>                 name: models-showcase            active?: #t)
        (<!>                 name: gadgets-showcase           active?: #t)
        (<!>                 name: avatars-showcase           active?: #t)
        (<!>                 name: tiles-showcase             active?: #t)
        (<!>                 name: shaders-showcase           active?: #t)
        (<!>                 name: animations-showcase        active?: #t)
        (<!>                 name: meshes-showcase            active?: #t)
        (<!>                 name: textures-showcase          active?: #t)
        (<!>                 name: skyboxes-showcase          active?: #t))
      (<world-build!>
        (<!>                 name: add-element                active?: #t)
        (<!>                 name: remove-element             active?: #t)
        (<!>                 name: change-element             active?: #t)
        (<!>                 name: select-target              active?: #t)
        (<!>                 name: delete-target              active?: #t)
        (<!>                 name: toggle-grid                active?: #t)
        (<!>                 name: toggle-grid-z              active?: #t)
        (<!>                 name: toggle-grid-y              active?: #t)
        (<!>                 name: toggle-grid-x              active?: #t)
        (<!>                 name: move-grid                  active?: #t)
        (<!>                 name: decrease-grid              active?: #t)
        (<!>                 name: increase-grid              active?: #t)
        (<!>                 name: reset-textures             active?: #t)
        (<!>                 name: change-editor-mode         active?: #t))
      (<world-target!>
        (<!>                 name: select-target-mode         active?: #t)
        (<!>                 name: move-target-mode           active?: #t)
        (<!>                 name: rotate-target-mode         active?: #t)
        (<!>                 name: scale-target-mode          active?: #t)
        (<!>                 name: skeleton-target-mode       active?: #t))
      (<world-history!>
        (<!>                 name: toggle-paused              active?: #t)
        (<!>                 name: backward-history           active?: #t)
        (<!>                 name: forward-history            active?: #t)
        (<!>                 name: step-backward              active?: #t)
        (<!>                 name: step-forward               active?: #t)
        (<!>                 name: step-over                  active?: #t)
        (<!>                 name: toggle-evaluate-future     active?: #t))
      (<world-script!>
        (<!>                 name: test1                      active?: #t)
        (<!>                 name: test2                      active?: #t)
        (<!>                 name: test3                      active?: #t)
        (<!>                 name: test4                      active?: #t)
        (<!>                 name: test5                      active?: #t)
        (<!>                 name: test6                      active?: #t)
        (<!>                 name: test7                      active?: #t)
        (<!>                 name: test8                      active?: #t)
        (<!>                 name: test9                      active?: #t)
        (<!>                 name: test0                      active?: #t)
        (<!>                 name: run-script                 active?: #t)
        (<!>                 name: run-last-script            active?: #t)
        (<!>                 name: view-script                active?: #t)
        (<!>                 name: view-workspace             active?: #t)
        (<!>                 name: view-console               active?: #t)
        (<!>                 name: view-debugger              active?: #t)
        (<!>                 name: view-toolbox               active?: #t)
        (<!>                 name: target-script              active?: #t)
        (<!>                 name: cycle-panes                active?: #t)
        (<!>                 name: zoom-horizontally          active?: #t)
        (<!>                 name: zoom-vertically            active?: #t)
        (<!>                 name: zoom-fullscreen            active?: #t)
        (<!>                 name: run-selected-script        active?: #t)
        (<!>                 name: clear-console              active?: #t)
        (<!>                 name: clear-terminal             active?: #t))
      (<world-debug!>
        (<!>                 name: toggle-info                active?: #t)
        (<!>                 name: toggle-profiler            active?: #t)
        (<!>                 name: toggle-history             active?: #t)
        (<!>                 name: toggle-target              active?: #t)
        (<!>                 name: reset-profiler             active?: #t)
        (<!>                 name: all-chronology             active?: #t)
        (<!>                 name: toggle-gc-sound            active?: #t)
        (<!>                 name: explore-interface          active?: #t)
        (<!>                 name: toggle-axes                active?: #t)
        (<!>                 name: toggle-orientation         active?: #t)
        (<!>                 name: toggle-debug-sections      active?: #t)
        (<!>                 name: toggle-debug-sectors       active?: #t)
        (<!>                 name: toggle-debug-areas         active?: #t)
        (<!>                 name: garbage-collect            active?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               active?: #t))
      (<together-zone!>
        (<!>                 name: command-message            active?: #t)
        (<!>                 name: command-slash              active?: #t))
      (<together-share!>
        (<!>                 name: capture-screen             active?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            active?: #t)
        (<!>                 name: edit-definition            active?: #t)
        (<!>                 name: edit-script1               active?: #t)
        (<!>                 name: edit-script2               active?: #t)
        (<!>                 name: edit-script3               active?: #t)
        (<!>                 name: edit-script4               active?: #t)
        (<!>                 name: edit-script5               active?: #t)
        (<!>                 name: edit-script6               active?: #t)
        (<!>                 name: edit-script7               active?: #t)
        (<!>                 name: edit-script8               active?: #t)
        (<!>                 name: edit-script9               active?: #t)
        (<!>                 name: edit-script0               active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-mode                active?: #t)
        (<!>                 name: toggle-hide                active?: #t)
        (<!>                 name: toggle-debug               active?: #t)
        (<!>                 name: toggle-debug-energy        active?: #t)
        (<!>                 name: toggle-debug-audio         active?: #t)
        (<!>                 name: toggle-debug-video         active?: #t)
        (<!>                 name: toggle-debug-media         active?: #t)
        (<!>                 name: toggle-debug-flow          active?: #t)
        (<!>                 name: toggle-debug-live          active?: #t)
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: toggle-visualizer          active?: #t)
        (<!>                 name: request-replays            active?: #t)
        (<!>                 name: add-bookmark               active?: #t)
        (<!>                 name: test                       active?: #t)))))


(define-trait zone-group-bindings Bindings
  (<Trait>                   name: avatar
    (<install>
      (<together-menu!>
        (<!>                 name: leave-group                active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: video-options              active?: #t)))))


(define-trait zone-not-circling-bindings Bindings
  (<Trait>                   name: zone
    (<install>
      @bazoo
      (<together-menu!>
        (<!>                 name: create-circle              active?: #t)))))


(define-trait zone-circling-bindings Bindings
  (<Trait>                   name: gathering
    (<install>
      (<together-menu!>
        (<!>                 name: leave-circle               active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: video-options              active?: #t)))))


@bazoo
(define-trait zone-circling-bindings Bindings
  (<Trait>                   name: avatar
    (<install>
      (<together-circle!>
        (<!>                 name: avatar-mode                active?: #t)))))


(define-trait zone-free-bindings Bindings
  (<Trait>                   name: free
    (<install>
      (<world-graphics!>
        (<!>                 name: toggle-occlusion           active?: #t)
        (<!>                 name: toggle-wireframe           active?: #t)
        (<!>                 name: toggle-fog                 active?: #t)
        (<!>                 name: toggle-gadgets             active?: #t)
        (<!>                 name: toggle-normals             active?: #t)
        (<!>                 name: toggle-x-rays              active?: #t)
        (<!>                 name: toggle-redstone-x-rays     active?: #t)
        (<!>                 name: toggle-draw-me             active?: #t)
        (<!>                 name: toggle-blocks              active?: #t)
        (<!>                 name: toggle-models              active?: #t)
        (<!>                 name: toggle-post-processing     active?: #t))
      (<world-sound!>
        (<!>                 name: toggle-music               active?: #t)
        (<!>                 name: change-music               active?: #t)
        (<!>                 name: display-music              active?: #t)
        (<!>                 name: toggle-ambience            active?: #t)
        (<!>                 name: toggle-sound               active?: #t))
      (<world-zone!>
        (<!>                 name: zone-reload                active?: #t)
        (<!>                 name: zone-regenerate            active?: #t))
      (<world-movement!>
        (<!>                 name: rotate-player              active?: #t)
        (<!>                 name: move-forward               active?: #t)
        (<!>                 name: move-backward              active?: #t)
        (<!>                 name: move-left                  active?: #t)
        (<!>                 name: move-right                 active?: #t)
        (<!>                 name: rotate-left                active?: #t)
        (<!>                 name: rotate-right               active?: #t)
        (<!>                 name: toggle-run                 active?: #t))
      (<world-camera!>
        (<!>                 name: rotate-camera              active?: #t)
        (<!>                 name: zoom-in/out                active?: #t)
        (<!>                 name: move-up                    active?: #t)
        (<!>                 name: move-down                  active?: #t)
        (<!>                 name: person-motion              active?: #t)
        (<!>                 name: orbit-motion               active?: #t)
        (<!>                 name: free-motion                active?: #t)
        (<!>                 name: toggle-camera-smoothing    active?: #t)
        (<!>                 name: toggle-camera-follow       active?: #t)
        (<!>                 name: toggle-cursor-track        active?: #t))
      (<world-game!>
        (<!>                 name: jump                       active?: #t)
        (<!>                 name: mind-control               active?: #t)
        (<!>                 name: toggle-aim                 active?: #t)
        (<!>                 name: toggle-free-aim            active?: #t)
        (<!>                 name: toggle-ride                active?: #t)
        (<!>                 name: toggle-fly                 active?: #t)
        (<!>                 name: toggle-vehicle             active?: #t)
        (<!>                 name: toggle-glow                active?: #t)
        (<!>                 name: compass-panel              active?: #t)
        (<!>                 name: map-panel                  active?: #t)
        (<!>                 name: combat-panel               active?: #t)
        (<!>                 name: character-panel            active?: #t)
        (<!>                 name: bag-panel                  active?: #t)
        (<!>                 name: belt-panel                 active?: #t))
      (<world-spell!>
        (<!>                 name: bullet                     active?: #t)
        (<!>                 name: arrow                      active?: #t)
        @wait
        (<!>                 name: rapid-fire                 active?: #t)
        (<!>                 name: sprint                     active?: #t)
        (<!>                 name: warp                       active?: #t)
        (<!>                 name: dash                       active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-mode                active?: #t)
        (<!>                 name: toggle-hide                active?: #t)
        (<!>                 name: toggle-debug               active?: #t)
        (<!>                 name: toggle-debug-energy        active?: #t)
        (<!>                 name: toggle-debug-audio         active?: #t)
        (<!>                 name: toggle-debug-video         active?: #t)
        (<!>                 name: toggle-debug-media         active?: #t)
        (<!>                 name: toggle-debug-flow          active?: #t)
        (<!>                 name: toggle-debug-live          active?: #t)
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: toggle-visualizer          active?: #t)
        (<!>                 name: request-replays            active?: #t)
        (<!>                 name: add-bookmark               active?: #t)
        (<!>                 name: test                       active?: #t)))))


(class Zone-Space extends Sphere-Space
  
  
  (method override (space-name self)
    'zone)
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world))
          (video (current-video)))
      
      (set-unbind-camera? #t)
      (person-motion world @wait-buggy-eye-center?: #f feedback?: #f)
      (show-mainbar self)
      (show-compass world)
      (set-visible? (child interface 'people-label) #f)
      (set-visible? (child interface 'people) #f)
      (set-visible? (child interface 'chat-label) #f)
      (set-layouter (child interface 'chat) (lambda (panel) (chat-panel-layouter panel)))
      (set-layouter (child interface 'command) (lambda (panel) (command-bar-layouter panel)))
      (set-proportion (child interface 'chat) '(400 150))
      (set-proportion (child interface 'command) '(400 19))
      (set-visible? (child interface 'command-to) #f)
      (set-visible? (child interface 'chat) #t)
      (set-visible? (child interface 'belt) #t)
      (set-visible? (child mainbar 'profile) #f)
      (layout-interface)))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (layout-message world)
      (layout-working world)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (close-main-menu world)
      (hide-mainbar self)
      (hide-history world)
      (hide-compass world)
      (hide-interface)
      (reset-panel-stack)))

  
  (method override (space-bindings self)
    (let ((together (current-together)))
      (let ((grouped? (grouped? together))
            (circling? (circling? together))
            (avatar? (avatar-mode? together)))
        (let ((free? (or (not circling?) avatar?)))
          `(,zone-bindings
            ,@(cond (grouped? (list zone-group-bindings))
                    (circling? (list @bazoo circling-bindings zone-circling-bindings))
                    (else (list zone-not-circling-bindings)))
            ,@(if (and circling? (eq? (get-circle-mode together) 'circle)) (list circle-bindings) '())
            ,@(if free? (list zone-free-bindings) '()))))))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-interface)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-people)
                  (find-actions 'world-chat)
                  (find-actions 'world-showcase)
                  (find-actions 'world-build)
                  (find-actions 'world-target)
                  (find-actions 'world-history)
                  (find-actions 'world-tile)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-menu)
                  (find-actions 'together-audio)
                  (find-actions 'together-video)
                  (find-actions 'together-circle)
                  (find-actions 'together-zone)
                  (find-actions 'together-share)
                  (find-actions 'together-profile)
                  (find-actions 'together-experiment)
                  (find-actions 'together-script)
                  (find-actions 'together-debug))
            (nextmethod self)))
  
  
  (method override (fade-mainbar? self)
    (not (get-fade-thread (current-together))))
  
  
  (method override (draw-message-offset self)
    80)
  
  
  (method override (draw-working-offset self)
    80)
  
  
  (method override (mouse-moved self x y)
    (nextmethod self x y)
    (let ((world (current-world)))
      (unless (get-fade-thread (current-together))
        (unless (get-central-menu world)
          (fade-mainbar (new Point$fl$ x y))))))
  
  
  (method (on-command-message self evt)
    (chat-message (together:current-together)))
  
  
  (method (on-command-slash self evt)
    (chat-slash (together:current-together)))
  
  
  (method override (toggle-chat self)
    (let ((interface (current-interface))
          (world (current-world)))
      (cond ((get-visible? (child interface 'chat))
             (set-visible? (child interface 'chat) #f)
             (set-visible? (child interface 'command-to) #f)
             (set-visible? (child interface 'command) #f))
            (else
             (set-visible? (child interface 'chat) #t)
             (set-visible? (child interface 'command-to) #f)
             (set-visible? (child interface 'command) #f)))
      (update-parameter world 'chat))))


;;;
;;;; Void-Space
;;;


(define-trait void-bindings Bindings
  (<Trait>                   name: void
    (<install>
      (<world-main!>
        (<!>                 name: bindings-viewer            active?: #t)
        @roaming
        (<!>                 name: open-welcome               active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-interface           active?: #t)
        (<!>                 name: toggle-windowed-mode       active?: #t)
        (<!>                 name: toggle-user                active?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              active?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                active?: #t)
        (<!>                 name: command-message            active?: #t)
        (<!>                 name: command-slash              active?: #t)
        (<!>                 name: repeat-previous            active?: #t))
      (<world-script!>
        (<!>                 name: test1                      active?: #t)
        (<!>                 name: test2                      active?: #t)
        (<!>                 name: test3                      active?: #t)
        (<!>                 name: test4                      active?: #t)
        (<!>                 name: test5                      active?: #t)
        (<!>                 name: test6                      active?: #t)
        (<!>                 name: test7                      active?: #t)
        (<!>                 name: test8                      active?: #t)
        (<!>                 name: test9                      active?: #t)
        (<!>                 name: test0                      active?: #t)
        (<!>                 name: run-script                 active?: #t)
        (<!>                 name: run-last-script            active?: #t)
        (<!>                 name: view-script                active?: #t)
        (<!>                 name: view-workspace             active?: #t)
        (<!>                 name: target-script              active?: #t)
        (<!>                 name: clear-console              active?: #t)
        (<!>                 name: clear-terminal             active?: #t))
      (<world-debug!>
        (<!>                 name: toggle-profiler            active?: #t)
        (<!>                 name: toggle-gc-sound            active?: #t)
        (<!>                 name: explore-interface          active?: #t)
        (<!>                 name: garbage-collect            active?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               active?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            active?: #t)
        (<!>                 name: edit-definition            active?: #t)
        (<!>                 name: edit-script1               active?: #t)
        (<!>                 name: edit-script2               active?: #t)
        (<!>                 name: edit-script3               active?: #t)
        (<!>                 name: edit-script4               active?: #t)
        (<!>                 name: edit-script5               active?: #t)
        (<!>                 name: edit-script6               active?: #t)
        (<!>                 name: edit-script7               active?: #t)
        (<!>                 name: edit-script8               active?: #t)
        (<!>                 name: edit-script9               active?: #t)
        (<!>                 name: edit-script0               active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-mode                active?: #t)
        (<!>                 name: toggle-hide                active?: #t)
        (<!>                 name: toggle-debug               active?: #t)
        (<!>                 name: toggle-debug-energy        active?: #t)
        (<!>                 name: toggle-debug-audio         active?: #t)
        (<!>                 name: toggle-debug-video         active?: #t)
        (<!>                 name: toggle-debug-media         active?: #t)
        (<!>                 name: toggle-debug-flow          active?: #t)
        (<!>                 name: toggle-debug-live          active?: #t)
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: toggle-evolution           active?: #t)
        (<!>                 name: toggle-visualizer          active?: #t)
        (<!>                 name: request-replays            active?: #t)
        (<!>                 name: add-bookmark               active?: #t)
        (<!>                 name: test                       active?: #t)))))


(class Void-Space extends Sphere-Space
  
  
  (slot hide-ring      initialize #f getter generate)
  (slot hide-thread    initialize #f getter generate)
  (slot buttons-shown? initialize #t getter generate)
  
  
  (method override (space-setup self)
    (nextmethod self)
    (let ((together (current-together))
          (interface (current-interface)))
      (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify visible?: #f)))
        (set! self.root root))))
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((together (current-together))
          (interface (current-interface))
          (world (current-world)))
      (show-mainbar self)
      (free-motion world feedback?: #f)
      (set-unbind-camera? #f)
      (set-visible? (child mainbar 'circle-name) #t)
      (set-title (child mainbar 'circle-name) (get-circle-name together))
      (set-visible? (child mainbar 'profile) #t)
      (set-visible? (child interface 'people-label) #f)
      (set-visible? (child interface 'people) #f)
      (set-layouter (child interface 'chat) #f)
      (set-layouter (child interface 'command) #f)
      (set-location (child interface 'chat) '(-10 100))
      (set-proportion (child interface 'chat) (chat-proportion together))
      (set-proportion (child interface 'command) #f)
      (set-size (child interface 'command) (command-size together))
      (set-location (child interface 'command) (command-location together))
      (set-location (child interface 'command-to) (command-to-location together))
      (set-visible? (child interface 'command-to) #f)
      (update-message-recipient together (list 'group (get-circle-name together)))
      (layout-view interface)
      (layout-view root)
      (no-showcase world)
      (when auto-hide?
        (install-hider self)
        (delay-hide-interface self #t))
      (show root)
      (send-to-back root)
      (if (admin?)
          (unless (eq? (active-focus) (locate (child interface 'admin) '(console text)))
            (focus-world))
        (focus-world))))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (layout-message world)
      (layout-working world)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (close-main-menu world)
      (hide-mainbar self)
      (hide-evolution world)
      (hide-interface)
      (reset-panel-stack)
      (restore-fov)
      (uninstall-push-to-talk)
      (circle-uninstall-camera)
      (hide root)
      (when auto-hide?
        (uninstall-hider self))))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-interface)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-people)
                  (find-actions 'world-chat)
                  (find-actions 'world-showcase)
                  (find-actions 'world-build)
                  (find-actions 'world-target)
                  (find-actions 'world-history)
                  (find-actions 'world-tile)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-menu)
                  (find-actions 'together-audio)
                  (find-actions 'together-video)
                  (find-actions 'together-circle)
                  (find-actions 'together-view)
                  (find-actions 'together-share)
                  (find-actions 'together-profile)
                  (find-actions 'together-experiment)
                  (find-actions 'together-script)
                  (find-actions 'together-debug))
            (nextmethod self)))
  
  
  (method override (space-bindings self)
    (let ((together (current-together)))
      (if (eq? (get-circle-mode together) 'circle)
          (list void-bindings circling-bindings circle-bindings)
        (list void-bindings circling-bindings))))
  
  
  (method override (draw-world? self)
    #f)
  
  
  (method override (draw-message-offset self)
    80)
  
  
  (method override (draw-working-offset self)
    80)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (toggle-hide self)
    (let ((world (current-world)))
      (set! auto-hide? (not auto-hide?))
      (if auto-hide?
          (begin
            (install-hider self)
            (show-interface self #t))
        (show-interface self #f))
      (display-on/off world "Auto hide" auto-hide?)))
  
  
  (method override (toggle-chat self)
    (let ((interface (current-interface))
          (world (current-world)))
      (toggle-visible? (child interface 'chat-label))
      (toggle-visible? (child interface 'chat))
      (toggle-visible? (child interface 'command-to))
      (toggle-visible? (child interface 'command))
      (update-parameter world 'chat)))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-moved self x y)
    (nextmethod self x y)
    (unless (script-visible? self)
      (cond-expand
        (windows
         (let ((together (current-together)))
           (let ((point (new Point$fl$ x y)))
             ;; quick hack around windows sending
             ;; mouse-moved every second even with
             ;; the mouse not moving at all
             (when (or (not (get-hide-last-mouse together))
                       (nu/=? (get-hide-last-mouse together) point))
               (show-interface self #t)
               (set-hide-last-mouse together point)))))
        (else
         (show-interface self #t)))))
  
  
  (method override (mouse-down self h v)
    (nextmethod self h v)
    (mouse-activity self #f))
  
  
  (method override (mouse-up self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method override (mouse-action self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method override (double-click self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method override (multiple-click self h v)
    (nextmethod self h v)
    (mouse-activity self))
  
  
  (method (mouse-activity self (hide-interface? #t))
    (unless (script-visible? self)
      (show-interface self hide-interface?)))
  
  
  (method (script-visible? self)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (get-visible? panel))))
  
  
  (method (install-hider self)
    (unless hide-thread
      (let ((thread (new-thread
                      (lambda ()
                        (declare (proper-tail-calls))
                        (let (loop)
                          (let ((proc (wait hide-ring)))
                            (when proc
                              (delay-event
                                (lambda ()
                                  (proc)))
                              (loop)))))
                      'hider)))
        (set! hide-ring (new Time-Ring 1))
        (set! hide-thread thread)
        (thread-base-priority-set! thread event-priority)
        (thread-start! thread))))
  
  
  (method (uninstall-hider self)
    (when hide-thread
      (terminate hide-ring)
      (thread-join! hide-thread)
      (set! hide-ring #f)
      (set! hide-thread #f)))
  
  
  ;; we probably need a tolerance so moving
  ;; only 1 pixel doesn't show the interface
  (method override (show-interface self hide-interface?)
    (let ((together (current-together))
          (window (current-window))
          (interface (current-interface))
          (video (current-video)))
      ;; YOWNU
      (unless buttons-shown?
        (show-cursor window)
        (show-mainbar self)
        (for-each (lambda (child)
                    (when (and (is? child World-Actionbar)
                               (get-auto-show/hide? child))
                      (set-visible? child #t)))
                  (get-children interface))
        (set-video-interface? #t)
        (set! buttons-shown? #t))
      (delay-hide-interface self hide-interface?)))
  
  
  (method (delay-hide-interface self hide-interface?)
    (when auto-hide?
      (let ((hide-time (+ (current-seconds) 2.)))
        (empty hide-ring)
        (when hide-interface?
          (insert hide-ring hide-time (lambda ()
                                        (with-task-mutex
                                          (lambda ()
                                            (when (and (is? (current-space) Void-Space)
                                                       auto-hide?
                                                       buttons-shown?
                                                       (not (current-tooltip-context)))
                                              (let ((window (current-window))
                                                    (interface (current-interface))
                                                    (video (current-video)))
                                                (hide-cursor window)
                                                (hide-mainbar self)
                                                (for-each (lambda (child)
                                                            (when (and (is? child World-Actionbar)
                                                                       (get-auto-show/hide? child))
                                                              (set-visible? child #f)))
                                                          (get-children interface))
                                                (set-video-interface? #f)
                                                (set! buttons-shown? #f))))))))))))


;;;
;;;; Circle
;;;


(define-trait circling-bindings Bindings
  (<Trait>                   name: circling
    (<install>
      (<together-menu!>
        (<!>                 name: leave-circle               active?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          active?: #t)
        (<!>                 name: toggle-push-to-talk        active?: #t)
        (<!>                 name: talk                       active?: #t)
        @wait-live-change (<!>                 name: toggle-echo-cancel         active?: #t)
        @wait-live-change (<!>                 name: toggle-gain-control        active?: #t)
        @wait-live-change (<!>                 name: toggle-noise-suppress      active?: #t)
        (<!>                 name: toggle-rndenoise           active?: #t)
        (<!>                 name: audio-options              active?: #t))
      (<together-video!>
        (<!>                 name: toggle-camera              active?: #t)
        (<!>                 name: change-quality             active?: #t)
        (<!>                 name: video-options              active?: #t))
      (<together-circle!>
        (<!>                 name: circle-mode                active?: #t)
        (<!>                 name: focus-mode                 active?: #t)
        (<!>                 name: gallery-mode               active?: #t))
      (<together-view!>
        (<!>                 name: toggle-paused              active?: #t)
        (<!>                 name: seek-backward              active?: #t)
        (<!>                 name: seek-forward               active?: #t))
      (<together-share!>
        (<!>                 name: preprocess-streams         active?: #t)
        (<!>                 name: toggle-streams             active?: #t)
        (<!>                 name: add-image                  active?: #t)
        (<!>                 name: add-video                  active?: #t)
        (<!>                 name: add-music                  active?: #t)
        (<!>                 name: remove-stream              active?: #t)
        (<!>                 name: toggle-screen-share        active?: #t)
        (<!>                 name: capture-screen             active?: #t)))))


(define-trait circle-bindings Bindings
  (<Trait>                   name: circle
    (<install>
      (<together-circle!>
        (<!>                 name: bring-to-front             active?: #t)
        (<!>                 name: backspace-press            active?: #t)
        (<!>                 name: enter-press                active?: #t)
        (<!>                 name: left-press                 active?: #t)
        (<!>                 name: right-press                active?: #t)
        (<!>                 name: up-press                   active?: #t)
        (<!>                 name: down-press                 active?: #t)
        (<!>                 name: tab-press                  active?: #t)
        (<!>                 name: number-press               active?: #t)))))


;;;
;;;; Together
;;;


(class Together extends Object
  
  
  (slot spaces                     initialize #f getter generate)
  (slot space                      initialize #f getter generate)
  (slot configuration              initialize #f getter generate)
  (slot active-zone                initialize #f getter generate)
  (slot active-group               initialize #f getter generate)
  (slot active-allow-audio-only?   initialize #f getter generate)
  (slot active-data                initialize #f getter generate)
  (slot selected-zone              initialize #f getter generate)
  (slot selected-group             initialize #f getter generate)
  (slot selected-allow-audio-only? initialize #f getter generate)
  (slot selected-data              initialize #f getter generate)
  (slot selected-message           initialize #f getter generate)
  (slot selected-color             initialize #f getter generate)
  (slot zone-loading               initialize #f getter generate)
  (slot in-group?                  initialize #f getter generate)
  (slot circle-name                initialize #f getter generate)
  (slot circle-no                  initialize #f getter generate)
  (slot circle-allow-audio-only?   initialize #f getter generate)
  (slot circle-started             initialize #f getter generate)
  (slot circle-joined              initialize #f getter generate)
  (slot circle-mode                initialize #f getter generate)
  (slot preserved-eye              initialize #f getter generate)
  (slot message-recipient          initialize #f getter generate)
  (slot draw-hook                  initialize #f getter generate)
  (slot sleep-disconnected         initialize #f getter generate)
  (slot chat-wide?                 initialize #f getter generate)
  (slot previous-command           initialize #f getter generate)
  (slot fade-thread                initialize #f getter generate)
  (slot fade-no                    initialize 0  getter generate)
  
  (cond-expand
    (windows
     (slot hide-last-mouse initialize #f accessors generate))
    (else))
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! spaces (make-table test: eq?))
    (set! active-zone 'start)
    (set! selected-zone 'start)
    (set! selected-color {Color World-Orange})
    (set! selected-message "")
    (set! preserved-eye (make-camera)))
  
  
  (method (need-space self what)
    (or (table-ref spaces what #f)
        (let ((space (case what
                       ((gathering) (new Gathering-Space))
                       ((void) (new Void-Space))
                       ((zone) (new Zone-Space))
                       ((script) (new Script-Space))
                       ((replay) (new Replay-Space))
                       ((simulate) (new Simulate-Space)))))
          (space-setup space)
          (table-set! spaces what space)
          space)))
  
  
  (method (together-enter self auto-enter)
    (let ((client (current-client)))
      (define (enter-gathering)
        (set! space (need-space self 'gathering))
        (space-install space)
        (set-current-space space)
        (add-snapshot-property 'live.space (space-name space))
        (space-activate space))  
      
      (define (handle-reconnection mode zone group allow-audio-only?)
        (unless (eq? zone 'start)
          (restore-zone zone))
        (reconnection client zone group)
        (if (string? group)
            (check-error (rejoin-circle self group allow-audio-only?))
          (if (or (eq? mode 'observer)
                  (eq? zone 'start))
              (enter-gathering)
            (check-error (reenter-zone self zone)))
          (when (integer? group)
            (check-error (rejoin-group self group)))))
      
      (define (restore-zone zone)
        (let ((tree (people-tree self)))
          (let ((row (user-data-row tree zone test: equal?)))
            (when row
              (set-single-selection tree (row->line tree row) generate-event?: #f)
              (set! active-zone zone)
              (set! active-data zone)
              (set! selected-zone zone)
              (set! selected-data zone)
              (set! message-recipient zone)
              (set-path (current-zone) zone)))))
      
      (define (check-error err)
        (when err
          (enter-gathering)
          (display-error (current-world) err)))
      
      (when (current-space+)
        (space-deactivate (current-space))
        (space-uninstall (current-space)))
      (together-ready self)
      (when auto-create
        (for-each (lambda (name)
                    (create-group client name #t #f #t #t))
                  (listify auto-create)))
      (cond ((get-reconnect-info client)
             =>
             (lambda (reconnect-info)
               (bind (mode zone group allow-audio-only?) reconnect-info
                 (handle-reconnection mode zone group allow-audio-only?))))
            (auto-join
             (check-error (autojoin-circle self auto-join #f)))
            (auto-enter
             (check-error (enter-zone self)))
            (else
             (enter-gathering)))))
  
  
  (method (together-exit self)
    (together-destroy self))
  
  
  (method (together-ready self)
    (when (window?)
      (let ((world (current-world)))
        (setup-configuration self)
        (start-gc-monitor)
        (start-log-listener)
        (prepare-skybox self)
        (install-zone self)
        (install-hooks self)
        (set-escape-hook world (~ escape-press self))
        (view-people self))))
  
  
  (method (together-destroy self)
    (when (window?)
      (let ((world (current-world))
            (client (current-client)))
        (stop-gc-monitor)
        (stop-log-listener)
        (let ((udp-client (get-udp-client client)))
          (stop udp-client)
          (close-live-stream client)
          (close-send-streams udp-client)
          (close-receive-streams udp-client))
        (uninstall-hooks self)
        (space-deactivate space)
        (space-uninstall space)
        (uninstall-zone self)
        (set-unbind-camera? #t)
        (set! space (new Space))
        (set-current-space space)
        (set-current-together #f)
        (clear-snapshot-property 'live.space))))
  
  
  (method (setup-configuration self)
    (let ((file (user-client-file)))
      (set! configuration (instantiate (read-form file)))))
  
  
  (method (install-zone self)
    (let ((interface (current-interface)))
      ;; common
      (new People-Label name: 'people-label parent: interface title: "People" location: '(10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (new People-Panel name: 'people parent: interface location: '(10 100) proportion: '(220 (bounds -300)) layout-type: 'border visible?: #f)
      (new Streams-Label name: 'streams-label parent: interface title: "Streams" location: '(10 64) size: {Dimension 300 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (new Streams-Panel name: 'streams parent: interface location: '(10 100) proportion: '(300 (bounds -300)) layout-type: 'border visible?: #f)
      (new Chat-Label name: 'chat-label parent: interface title: "Chat" location: '(-10 64) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (let ((chat (child interface 'chat)))
        (set-border-type (child chat 'border) 'solid)
        (set-border-color (child chat 'border) {Color Dark-Gray})
        (set-location chat '(-10 100))
        (set-proportion chat '(220 (bounds -354)))
        (set-visible? chat #f))
      (let ((to (new View name: 'command-to parent: interface size: {Dimension 226 40} visible?: #f)))
        (new Kind-Label name: 'to-label parent: to title: "To" position: {Point 0 0} size: {Dimension 22 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'head)
        (new Kind-Label name: 'to parent: to title: "The gathering" position: {Point 23 0} size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'head)
        (new Invite-Tool name: 'invite parent: to position: {Point 202 9} resource: {Image-Resource "Workbench"} action-handler: (~ on-invite self)))
      (let ((command (child interface 'command)))
        (set-border-type (child command 'border) 'solid)
        (set-border-color (child command 'border) {Color Dark-Gray})
        (set-location command '(-10 -200))
        (set-size command (new Dimension 220 19))
        (set-visible? command #f))
      (new Kind-Label name: 'experiment-label parent: interface title: "Experiment" location: '(center 144) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
      (new Experiment-Panel name: 'experiment parent: interface location: '(center 180) proportion: '((bounds -500) (bounds -380)) layout-type: 'fill visible?: #f)
      (when (admin?)
        (new Kind-Label name: 'admin-label parent: interface title: "Admin" location: '(center 144) size: {Dimension 220 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center visible?: #f)
        (new Admin-Panel name: 'admin parent: interface location: '(center 180) proportion: '((bounds -500) (bounds -380)) layout-type: 'fill visible?: #f)
        (initial-banner (locate (child interface 'admin) '(console text)) "Together server"))
      (update-profile (child mainbar 'profile))))
  
  
  (method (uninstall-zone self)
    (let ((interface (current-interface)))
      (close (child interface 'people-label))
      (close (child interface 'people))
      (close (child interface 'streams-label))
      (close (child interface 'streams))
      (close (child interface 'chat-label))
      (close (child interface 'command-to))
      (close (child interface 'experiment-label))
      (close (child interface 'experiment))
      (when (admin?)
        (close (child interface 'admin-label))
        (close (child interface 'admin)))))
  
  
  (method (prepare-skybox self)
    (let ((zone (current-zone)))
      (unless (get-skybox zone)
        (set-skybox zone (let ((skybox (find-skybox together-skybox)))
                           (prepare skybox)
                           skybox)))))
  
  
  (method protected (sleep-process self)
    (assert-task-mutex)
    (when (client?)
      (let ((client (current-client)))
        (cond ((circling? self)
               (leave-circle self)
               (set! sleep-disconnected 'circle))
              ((grouped? self)
               (leave-group self)
               (set! sleep-disconnected 'group)))
        (sleep-to-server client))))
  
  
  (method protected (wake-process self)
    (assert-task-mutex)
    ;; this can occur if some other part of the
    ;; system called bailout-client during wakeup
    (when (client?)
      (let ((client (current-client))
            (world (current-world)))
        (wake-to-server client)
        (when sleep-disconnected
          (display-message world (format "Disconnected from {a}" sleep-disconnected) duration: 5.)
          (set! sleep-disconnected #f)))))
  
  
  (method package (update-message-recipient self recipient)
    (define (effective-recipient)
      (if (not recipient)
          #f
        (bind (kind name) recipient
          (case kind
            ((player)
             recipient)
            ((group)
             (if (and (is? space Sphere-Space)
                      (equal? name circle-name))
                 recipient
               #f))
            (else
             #f)))))
    
    (set! message-recipient (effective-recipient))
    (update-recipient-interface self))
  
  
  (method package (update-recipient-interface self)
    (let ((interface (current-interface))
          (me (current-me)))
      (let ((to (child interface '(command-to to)))
            (invite (child interface '(command-to invite))))
        (if (not message-recipient)
            (begin
              (set-title to "The gathering")
              (set-color to {Color red: 32 green: 205 blue: 33})
              (set-visible? invite #f))
          (bind (kind name) message-recipient
            (case kind
              ((player)
               (let ((player-info (registered-player-info name)))
                 (cond (player-info
                        (let ((me? (equal? (get-name player-info) (get-name me)))
                              (mode (get-mode player-info))
                              (party (get-party player-info)))
                          (set-title to (if party (format "<{a}>" name) name))
                          (set-color to (if (eq? mode 'player) {Color World-Blue} {Color White}))
                          (cond ((not circle-name)
                                 (set-visible? invite (and (not me?) (not party))))
                                (else
                                 (set-visible? invite #f)))))
                       (else
                        (set-title to name)
                        (set-color to {Color White})
                        (set-visible? invite #f)))))
              ((group)
               (set-title to name)
               (set-color to group-color)
               (set-visible? invite #f))))))))
  
  
  (method package (selected-loaded? self)
    (equal? selected-zone active-zone))
  
  
  (method package (grouped? self)
    in-group?)
  
  
  (method package (circling? self)
    (boolean circle-name))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-central-menu self evt)
    (let ((world (current-world)))
      (toggle-radial-menu world)))
  
  
  (method (on-invite self evt)
    (let ((tier (current-client))
          (world (current-world)))
      (if (not (has-microphone?))
          (display-error world "No microphone found")
        (if (not (acquire-microphone-pipeline))
            (display-error world "Unable to acquire microphone")
          (let ((recipient (cadr message-recipient)))
            (let ((error (client-invite tier recipient)))
              (if error
                  (display-error world error)
                (chat-show world (format "Invite {a}" recipient)))))))))
  
  
  (method (on-leave self evt)
    (let ((tier (current-client))
          (world (current-world)))
      (let ((error (client-leave tier)))
        (if error
            (display-error world error)
          (chat-show world "Left group")))))
  
  
  (method (on-message self evt)
    (chat-message self))
  
  
  @wait-live-change
  (method (on-toggle-echo-cancel self evt)
    (let ((client (current-client))
          (world (current-world)))
      (when (is? space Void-Space)
        (set-audio-echo-cancel? (not audio-echo-cancel?))
        (when (microphone-on? client)
          (let ((microphone-channel (get-microphone-channel client)))
            (let ((src (get-src (get-pipeline microphone-channel))))
              (update-echo-cancel src audio-echo-cancel?))))
        (display-on/off world "Echo Cancellation" audio-echo-cancel?))))
  
  
  @wait-live-change
  (method (on-toggle-gain-control self evt)
    (let ((client (current-client))
          (world (current-world)))
      (when (is? space Void-Space)
        (set-audio-gain-control? (not audio-gain-control?))
        (when (microphone-on? client)
          (let ((microphone-channel (get-microphone-channel client)))
            (let ((src (get-src (get-pipeline microphone-channel))))
              (update-gain-control src audio-gain-control?))))
        (display-on/off world "Gain Controller" audio-gain-control?))))
  
  
  @wait-live-change
  (method (on-toggle-noise-suppress self evt)
    (let ((client (current-client))
          (world (current-world)))
      (when (is? space Void-Space)
        (set-audio-noise-suppress? (not audio-noise-suppress?))
        (when (microphone-on? client)
          (let ((microphone-channel (get-microphone-channel client)))
            (let ((src (get-src (get-pipeline microphone-channel))))
              (update-noise-suppress src audio-noise-suppress?))))
        (display-on/off world "Noise Suppression" audio-noise-suppress?))))
  
  
  (method (on-toggle-rndenoise self evt)
    (let ((client (current-client))
          (world (current-world)))
      (when (is? space Void-Space)
        (change-rndenoise client (not audio-rndenoise?))
        (display-on/off world "Aggressive Denoising" audio-rndenoise?))))
  
  
  (method (on-toggle-mic self evt)
    (let ((client (current-client))
          (world (current-world)))
      (if (and (not circle-name)
               (not (get-live-stream client)))
          (display-error world "You are not in a group")
        (let ((microphone-on? (microphone-on? client)))
          (if (and (not microphone-on?) (not (has-microphone?)))
              (display-error world "No microphone found")
            (if (and (not microphone-on?) (not (acquire-microphone-pipeline)))
                (display-error world "Unable to acquire microphone")
              (require-live-stream client)
              (toggle-microphone client)
              (update-parameter world 'microphone)))))))
  
  
  (method (on-audio-options self evt)
    (let ((interface (current-interface)))
      (let ((frame (find-type interface Audio-Options)))
        (if frame
            (close frame)
          (push-panel (open-frame (new Audio-Options size: {Dimension 466 288} location: 'center)))))))
  
  
  (method (on-video-options self evt)
    (let ((interface (current-interface)))
      (let ((frame (find-type interface Video-Options)))
        (if frame
            (close frame)
          (push-panel (open-frame (new Video-Options size: {Dimension 466 288} location: 'center)))))))
  
  
  (method (on-toggle-push-to-talk self evt)
    (toggle-push-to-talk))
  
  
  (method (on-toggle-camera self evt)
    (let ((client (current-client))
          (video (current-video))
          (world (current-world)))
      (if (and (not circle-name)
               (not (get-live-stream client)))
          (display-error world "You are not in a group")
        (if (not (has-camera?))
            (display-error world "No camera found")
          (require-live-stream client)
          (toggle-camera client)
          (update-layouts video)
          (update-parameter world 'camera)
          @version0
          (effective-base-profile-update)))))
  
  
  (method (escape-press self)
    (let ((world (current-world)))
      (toggle-radial-menu world)))
  
  
  @bazoo
  (method (on-create-circle self evt)
    (create-circle self (get-shift? evt)))
  
  
  @bazoo
  (method (create-circle self auto-name?)
    (let ((tier (current-client))
          (interface (current-interface))
          (world (current-world)))
      (if (not (has-microphone?))
          (display-error world "No microphone found")
        (if (not (acquire-microphone-pipeline))
            (display-error world "Unable to acquire microphone")
          ;; auto name is just silly code for me to be removed
          (if auto-name?
              (let ((allow-audio-only? #f)
                    (camera? (has-camera?)))
                (if (and (not camera?) (not allow-audio-only?))
                    (display-error world "No camera found")
                  (let ((name "My circle"))
                    (let ((no/exception (create-group tier name #f allow-audio-only? #f #f)))
                      (if (string? no/exception)
                          (display-error world no/exception)
                        (clear-message world)
                        (let ((universe (current-universe))
                              (me (current-me)))
                          (let ((position (get-position me))
                                (lookat (get-lookat me)))
                            (let ((class Circle-Stone)
                                  (position (vertex+ position (vertex-scalar* (get-sight lookat) 5.)))
                                  (lookat lookat)
                                  (scale (vertex .35 .35 .35))
                                  (color (make-dye))
                                  (model "warcraft/world/doodad/meetingstone01")
                                  (script-text #f))
                              ;(add-element universe #f element name position lookat scale color model script-text properties)
                              ;(apply-add-entity universe class #f name position lookat scale color model #f)
                              (set-circle-center position)
                              (join-circle self name allow-audio-only?)))))))))
            (let ((panel (or (find-type interface Create-Circle-Panel)
                             (let ((panel (new Create-Circle-Panel parent: interface location: 'center size: {Dimension 402 167})))
                               (define (create evt)
                                 (let ((allow-audio-only? (get-checked? (locate panel '(create allow-audio-only?))))
                                       (camera? (has-camera?)))
                                   (if (and (not camera?) (not allow-audio-only?))
                                       (display-error world "No camera found")
                                     (let ((text (locate panel '(create view text))))
                                       (let ((name (trim-whitespace (get-string-content text))))
                                         (let ((no/exception (create-group tier name #f allow-audio-only? #f #f)))
                                           (if (string? no/exception)
                                               (display-error world no/exception)
                                             (clear-message world)
                                             (close panel)
                                             (let ((universe (current-universe))
                                                   (me (current-me)))
                                               (let ((position (get-position me))
                                                     (lookat (get-lookat me)))
                                                 (let ((class Circle-Stone)
                                                       (position (vertex+ position (vertex-scalar* (get-sight lookat) 5.)))
                                                       (lookat lookat)
                                                       (scale (vertex .35 .35 .35))
                                                       (color (make-dye))
                                                       (model "warcraft/world/doodad/meetingstone01")
                                                       (script-text #f))
                                                   ;(add-element universe #f element name position lookat scale color model script-text properties)
                                                   ;(apply-add-entity universe class #f name position lookat scale color model #f)
                                                   (set-circle-center position)
                                                   (join-circle self name allow-audio-only?)))))))))))
                               
                               (define (escape evt)
                                 (close panel))
                               
                               (layout-view panel)
                               (layout-view interface)
                               (set-action-handler (locate panel '(create create)) create)
                               (set-escape-press-handler (locate panel '(create view text)) escape)
                               (set-visible? panel #t)
                               panel))))
              (acquire-focus (locate panel '(create view text)))))))))
  
  
  (method (on-leave-group self evt)
    (leave-group self))
  
  
  (method (leave-group self)
    (let ((tier (current-client)))
      (client-leave tier)))
  
  
  (method (on-leave-circle self evt)
    (leave-circle self))
  
  
  (method package (enter-zone self)
    (let ((client (current-client))
          (window (current-window))
          (interface (current-interface))
          (world (current-world))
          (me (current-me)))
      (let ((info (play-to-server client)))
        (if (string? info)
            (begin
              (display-error world (format "{a}" info))
              info)
          (retrieve-camera client)
          (reset-chronology)
          (uninstall-vista)
          (increase! fade-no)
          (let ((no fade-no))
            (define (fade?)
              (and (= no fade-no)
                   (is? (current-space) Zone-Space)
                   (not (get-central-menu world))))
            
            (let ((thread
                    (new-thread
                      (lambda ()
                        (sleep 1)
                        (when (fade?)
                          (loop (for n from 1 to 100)
                                (with-task-mutex
                                  (lambda ()
                                    (when (fade?)
                                      (set-fade mainbar-pane (- 1. (* (cast <fl> n) .01)))
                                      (invalidate-view mainbar))))
                                (sleep .01)))
                        (set! fade-thread #f)
                        (when (fade?)
                          (fade-mainbar (point->point$fl$ (mouse-position window)) #t)))
                      'fade)))
              (set! fade-thread thread)
              (thread-start! thread)))
          (goto-space self 'zone)
          (setup-visibility mainbar)
          (set-mode me 'player)
          (add-snapshot-property 'live.player-mode (get-mode me))
          (preload-animations me)
          (prepare-motion world)
          #f))))
  
  
  (method package (reenter-zone self zone)
    (let ((world (current-world))
          (me (current-me)))
      (reset-chronology)
      (uninstall-vista)
      (goto-space self 'zone)
      (setup-visibility mainbar)
      (set-mode me 'player)
      (add-snapshot-property 'live.player-mode (get-mode me))
      (prepare-motion world)
      #f))
  
  
  (method package (exit-zone self)
    (let ((client (current-client))
          (interface (current-interface))
          (world (current-world))
          (me (current-me)))
      (reset-selection world)
      (disable-autotrack world feedback?: #f)
      (save-to-processor client)
      (observe-to-server client)
      (install-vista)
      (goto-space self 'gathering)
      (set-mode me 'observer)
      (add-snapshot-property 'live.player-mode (get-mode me))
      (restore-active-zone self)
      (reset-history)))
  
  
  (method (goto-gathering self)
    (let ((client (current-client))
          (me (current-me)))
      (stop-camera client)
      (close-send-streams (get-udp-client client))
      (roam-to-server client)
      (observe-to-server client)
      (install-vista)
      (goto-space self 'gathering)
      (set-mode me 'observer)))
  
  
  (method package (create&join-circle self)
    (let ((tier (current-client))
          (world (current-world)))
      (let ((create (child (get-root space) 'circle-create)))
        (let ((allow-audio-only (child create 'allow-audio-only?))
              (view (child create 'view)))
          (let ((allow-audio-only? (get-checked? allow-audio-only)))
            (let ((err (acquire-circle self allow-audio-only?)))
              (if err
                  (display-error world err)
                (let ((text (locate view 'text)))
                  (let ((name (trim-whitespace (get-string-content text))))
                    (let ((no/exception (create-group tier name #f allow-audio-only? #f #f)))
                      (if (string? no/exception)
                          (display-error world no/exception)
                        (clear-message world)
                        (set-string-content text "")
                        (content-changed view)
                        (set-checked? allow-audio-only #f)
                        (join-circle self name allow-audio-only?))))))))))))
  
  
  (method package (join-circle self name allow-audio-only?)
    (let ((tier (current-client))
          (world (current-world)))
      (let ((err (acquire-circle self allow-audio-only?)))
        (if err
            (display-error world err)
          (let ((no/streams/exception (join-group tier name 'player)))
            (if (string? no/streams/exception)
                (display-error world no/streams/exception)
              (setup-circle self name no/streams/exception)))))))
  
  
  (method (autojoin-circle self name allow-audio-only?)
    (let ((tier (current-client)))
      (let ((err (acquire-circle self allow-audio-only?)))
        (if err
            err
          (let ((no/streams/exception (join-group tier name 'player)))
            (if (string? no/streams/exception)
                no/streams/exception
              (setup-circle self name no/streams/exception)
              #f))))))
  
  
  (method (rejoin-circle self name allow-audio-only?)
    (let ((tier (current-client)))
      (let ((err (acquire-circle self allow-audio-only?)))
        (if err
            err
          (let ((no/streams/exception (rejoin-group tier name)))
            (if (string? no/streams/exception)
                no/streams/exception
              (setup-circle self name no/streams/exception)
              #f))))))
  
  
  (method (acquire-circle self allow-audio-only?)
    (if (auto-live?)
        (cond ((and (auto-audio?) (not (has-microphone?)))
               "No microphone found")
              ((and (auto-audio?) (not (acquire-microphone-pipeline)))
               "Unable to acquire microphone")
              ((and (auto-video?) (not allow-audio-only?) (not (has-camera?)))
               "No camera found")
              (else
               #f))
      #f))
  
  
  (method (setup-circle self name no/streams/exception)
    (let ((tier (current-client))
          (udp (current-udp))
          (world (current-world)))
      (bind (no allow-audio-only? duration . streams) no/streams/exception
        (when (eq? active-zone 'start)
          (reset-chronology)
          (bind-camera))
        (when (auto-live?)
          (require-live-stream tier))
        (start udp)
        (when (auto-live?)
          (when (auto-audio?)
            (play-microphone tier))
          (when (and (auto-video?) (not allow-audio-only?))
            (play-camera tier)))
        (clear-message world)
        (camera-copy! preserved-eye (get-eye world))
        (uninstall-vista)
        (cond-expand
          (windows (set! hide-last-mouse #f))
          (else))
        (set! circle-name name)
        (set! circle-no no)
        (set! circle-allow-audio-only? allow-audio-only?)
        (set! circle-started (- (current-seconds) duration))
        (set! circle-joined (current-seconds))
        (add-snapshot-property 'live.circle-name circle-name)
        (streams-add tier no allow-audio-only? streams)
        (install-circle-hooks self)
        (cond ((eq? active-zone 'start)
               (goto-space self 'void)
               (change-circle-mode self 'circle 'circle feedback?: #f)
               (circle-home))
              (else
               (change-circle-mode self 'avatar 'circle feedback?: #f)))
        (space-refresh space)
        @admin-request
        (start-captures)
        @version0
        (effective-base-profile-update)
        (setup-visibility mainbar))))
  
  
  (method package (enter-circle self)
    (let ((client (current-client))
          (me (current-me)))
      (anchor-to-server client)
      (play-to-server client)
      (bind-camera)
      (uninstall-vista)
      (install-circle-hooks self)
      (goto-space self 'void)
      (change-circle-mode self 'circle 'circle feedback?: #f)
      (circle-home)
      (setup-visibility mainbar)
      (set-mode me 'player)))
  
  
  (method (leave-circle self)
    (let ((tier (current-client))
          (world (current-world))
          (zone (current-zone)))
      @admin-request
      (stop-captures)
      (uninstall-circle-hooks self)
      (let ((udp-client (get-udp-client tier)))
        (stop udp-client)
        (close-live-stream tier)
        (close-send-streams udp-client)
        (close-receive-streams udp-client))
      (leave-group tier circle-name 'observer)
      (when (eq? active-zone 'start)
        (uninstall-push-to-talk)
        (circle-uninstall-camera)
        (restore-fov)
        (install-vista))
      (camera-copy! (get-eye world) preserved-eye)
      (set! circle-name #f)
      (set! circle-no #f)
      (clear-snapshot-property 'live.circle-name)
      (cond ((eq? active-zone 'start)
             (goto-space self 'gathering)
             (restore-active-zone self)
             (reset-evolution))
            (else
             (space-refresh (current-space))))
      (setup-visibility mainbar)))
  
  
  (method (rejoin-group self group-no)
    (let ((tier (current-client)))
      (let ((no/streams/exception (rejoin-group tier group-no)))
        (if (string? no/streams/exception)
            no/streams/exception
          (bind (no allow-audio-only? duration . streams) no/streams/exception
            (let ((udp-client (get-udp-client tier)))
              (start udp-client)
              (require-live-stream tier)
              (streams-add tier no allow-audio-only? streams)
              (play-microphone tier)
              #f))))))
  
  
  (method (goto-space self what)
    (space-deactivate (current-space))
    (space-uninstall (current-space))
    (set! space (need-space self what))
    (space-install space)
    (set-current-space space)
    (add-snapshot-property 'live.space (space-name space))
    (space-activate space)
    space)
  
  
  (method (restore-active-zone self)
    (let ((tree (people-tree self)))
      (let ((row (user-data-row tree active-data test: equal?)))
        (if (not row)
            (set-selection tree '() generate-event?: #f)
          (set-single-selection tree (row->line tree row) generate-event?: #f)))))
  
  
  ;;;
  ;;;; Hooks
  ;;;
  
  
  (method (install-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-server-entered-hook tier (~ server-entered self))
      (set-server-exited-hook tier (~ server-exited self))
      (set-server-disconnected-hook tier (~ server-disconnected self))
      (set-server-reconnected-hook tier (~ server-reconnected self))
      (set-processor-entered-hook tier (~ processor-entered self))
      (set-processor-exited-hook tier (~ processor-exited self))
      (set-zone-loaded-hook tier (~ zone-loaded self))
      (set-hierarchy-update-hook tier (~ hierarchy-update self))
      (set-group-join-hook tier (~ group-join self))
      (set-group-leave-hook tier (~ group-leave self))
      (set-stream-addable-hook tier (~ stream-addable self))
      (set-message-received-hook tier (~ message-received self))
      (set-render-hook video (~ render-video self))
      (set-layout-circle-hook (~ layout-circle self))
      (set! draw-hook (~ draw-debug self))
      (register-draw-hook interface draw-hook)
      (set-refresh-interface-hook (~ refresh-hook self))
      (set-matrix-hook (get-eye world) (~ eye-matrix self))
      (set-displayed-hook (child interface 'chat) (~ chat-displayed self))
      (set-sender-hook (child interface 'chat) (~ chat-sender self))
      (set-return-handler (child interface 'command) (~ command-return self))
      (set-escape-handler (child interface 'command) (~ command-escape self))
      (set-view-replay-directory (~ open/view-replay self))))
  
  
  (method (uninstall-hooks self)
    (let ((interface (current-interface))
          (world (current-world))
          (tier (current-client))
          (audio (current-audio))
          (video (current-video)))
      (set-server-entered-hook tier #f)
      (set-server-exited-hook tier #f)
      (set-server-disconnected-hook tier #f)
      (set-server-reconnected-hook tier #f)
      (set-processor-entered-hook tier #f)
      (set-processor-exited-hook tier #f)
      (set-zone-loaded-hook tier #f)
      (set-hierarchy-update-hook tier #f)
      (set-stream-addable-hook tier #f)
      (set-render-hook video #f)
      (set-layout-circle-hook #f)
      (unregister-draw-hook interface draw-hook)
      (set-refresh-interface-hook #f)
      (set-matrix-hook (get-eye world) #f)
      (set-displayed-hook (child interface 'chat) #f)
      (set-sender-hook (child interface 'chat) #f)
      (set-return-handler (child interface 'command) #f)
      (set-escape-handler (child interface 'command) #f)
      (reset-view-replay-directory)))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method (server-entered self character-name)
    (let ((world (current-world)))
      (when (cond ((eqv? connect-sound #t) #t)
                  ((eqv? connect-sound 'gathering) (is? space Gathering-Space))
                  (else #f))
        (play-ambient-sound 'connect))
      (when (cond ((eqv? connect-attention #t) #t)
                  ((eqv? connect-attention 'gathering) (is? space Gathering-Space))
                  (else #f))
        (user-attention (current-toplevel)))
      (when (cond ((eqv? connect-message #t) #t)
                  ((eqv? connect-message 'gathering) (is? space Gathering-Space))
                  (else #f))
        (display-message world (format "{a} entered" character-name)))))
  
  
  (method (server-exited self character-name)
    (let ((world (current-world)))
      (when (cond ((eqv? connect-message #t) #t)
                  ((eqv? connect-message 'gathering) (is? space Gathering-Space))
                  (else #f))
        (display-message world (format "{a} exited" character-name)))))
  
  
  (method (server-disconnected self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} disconnected" character-name))))
  
  
  (method (server-reconnected self character-name)
    (let ((world (current-world)))
      (display-message world (format "{a} reconnected" character-name))))
  
  
  (method (processor-entered self character-name)
    )
  
  
  (method (processor-exited self character-name)
    )
  
  
  (method (zone-loaded self path info)
    (define (selected-error message)
      (set! selected-color {Color World-Red})
      (set! selected-message message))
    
    (if (not (equal? path zone-loading))
        (load-zone self zone-loading)
      (set! zone-loading #f)
      (when (equal? path selected-zone)
        (if (string? info)
            (selected-error info)
          (let ((info (change-zone self path)))
            (if (string? info)
                (selected-error info)
              (set! active-zone selected-zone)
              (set! active-group selected-group)
              (set! active-allow-audio-only? selected-allow-audio-only?)
              (set! active-data selected-data))))
        (when (is? space Gathering-Space)
          (update-center-interface space)))))
  
  
  (method (hierarchy-update self hierarchy)
    (let ((world (current-world)))
      (let ((tree (people-tree self)))
        (define (same-entity? x y)
          (define (entity info)
            (if (or (not info)
                    (eq? (car info) 'zone))
                info
              (bind (kind name) info
                (cons kind name))))
          
          (equal? (entity x)
                  (entity y)))
        
        (with-preserved-selection tree
          (lambda ()
            (view-hierarchy self hierarchy))
          use: 'data
          test: same-entity?
          selection-position?: #f)
        (people-selection-change self)
        (update-recipient-interface self)
        (refresh-compass world))))
  
  
  ;; this rare case can happen if the server had just sent
  ;; a stream-add moments before receiving our leave circle
  (method (stream-addable self group-no)
    (or (not group-no)
        ;; quick hack for test
        (not circle-no)
        (eqv? group-no circle-no)))
  
  
  ;;;
  ;;;; Media
  ;;;
  
  
  (method (render-video self video)
    (if (eq? world.video:video-layout 'circle)
        #f
      (is-not? space Sphere-Space)))
  
  
  (method (draw-debug self surface)
    ;; YOWNU quick hack
    (when (client?)
    (let ((client (current-client)))
      (let ((udp-client (get-udp-client client)))
        (define (outgoing-dropped)
          (let ((dropped (get-outgoing-dropped (get-statistics udp-client))))
            (format "{a} (outgoing)" dropped)))
        
        (define (outgoing-drop)
          (let ((drop (get-outgoing-drop (get-statistics udp-client))))
            (if drop
                (format "{r precision: 1}% (outgoing)" drop)
              "N/A")))
        
        (define (incoming-dropped)
          (let ((dropped (get-incoming-dropped (get-statistics udp-client))))
            (format "{a} (incoming)" dropped)))
        
        (define (incoming-drop)
          (let ((drop (get-incoming-drop (get-statistics udp-client))))
            (if drop
                (format "{r precision: 1}% (incoming)" drop)
              "N/A")))
        
        (define (send-rate)
          (let ((rate (get-last-send-rate (get-statistics udp-client))))
            (if (and rate (/= rate -1.))
                (format "{r precision: 1}Mbps (upload)" (bytes->mbps rate))
              "N/A")))
        
        (define (receive-rate)
          (let ((rate (get-last-receive-rate (get-statistics udp-client))))
            (if (and rate (/= rate -1.))
                (format "{r precision: 1}Mbps (download)" (bytes->mbps rate))
              "N/A")))
        
        (define (present-chronology-duration)
          (let ((chronology (current-chronology)))
            (let ((duration (chronology-duration chronology)))
              (if (not duration)
                  "N/A"
                (format "{r precision: 1}s (chronology)" duration)))))
        
        (define (present-evolution-duration)
          (let ((evolution (current-evolution)))
            (let ((duration (evolution-duration evolution)))
              (if (not duration)
                  "N/A"
                (format "{r precision: 1}s (evolution)" duration)))))
        
        (define (udp-receive-count)
          (let ((channels (table-values (get-receive-channels udp-client))))
            ;; quick solution use first audio channel
            (let ((audio-channels (collect-if (lambda (channel) (= (get-media-kind channel) udp-audio)) channels)))
              (if (null? audio-channels)
                  0
                (let ((channel (car audio-channels)))
                  (get-count (get-process-ring channel)))))))
        
        (define (udp-send-count)
          (let ((channels (table-values (get-send-channels udp-client))))
            (let ((audio-channels (collect-if (lambda (channel) (= (get-media-kind channel) udp-audio)) channels)))
              (if (null? audio-channels)
                  0
                (let ((channel (car audio-channels)))
                  (get-count (get-retain-ring channel)))))))
        
        (define (cpu-percentage threads)
          (cond-expand
            (mac
             (bind (main . others) threads
               (let ((main (second main))
                     (gstreamer 0.)
                     (other 0.))
                 (for-each (lambda (thread)
                             (bind (fullname percentage) thread
                               (let ((fullname (or fullname "")))
                                 (if (find fullname #\:)
                                     (increase! gstreamer percentage)
                                   (increase! other percentage)))))
                           others)
                 (values main gstreamer other))))
            (else)))
        
        (let ((rank 0))
          (define (draw text color)
            (let ((h 20)
                  (v (+ 80 (* rank 28))))
              (draw-text surface h v text color))
            (increase! rank))
          
          (when (is? space Void-Space)
            (when show-debug?
              (set-font surface {Font font-name: tahoma point-size: 18 hint-style: slight hint-metrics: on})
              (draw (format "{a}" (present-duration (- (current-seconds) circle-started))) {Color World-Ochre})
              (unless (eq? show-media 'energy)
                ;; to debug camera jamming
                (let ((info (camera-probe client)))
                  (when info
                    (bind (allowed dropped) info
                      (draw (format "Probe: {a} allowed, {a} dropped" allowed dropped) {Color World-Red}))))
                (let ((throttle (get-throttle udp-client))
                      (bitrate (camera-bitrate client)))
                  (if (not bitrate)
                      (draw (format "Upload: ({r precision: 1}%)" (* (get-multiplier throttle) 100.)) {Color World-Red})
                    (draw (format "Upload: {r precision: 1}Mbps ({r precision: 1}%)" (/ bitrate 1024.) (* (get-multiplier throttle) 100.)) {Color World-Red})))
                (draw (format "Drop: {a} {a}" (if show-dropped? (outgoing-dropped) (outgoing-drop)) (if show-dropped? (incoming-dropped) (incoming-drop))) {Color World-Red})
                (draw (format "Traffic: {a} {a}" (send-rate) (receive-rate)) {Color World-Red})
                (draw (format "Replay: {a} {a}" (present-chronology-duration) (present-evolution-duration)) {Color World-Red})
                (draw (format "UDP: {a} (send) {a} (receive)" (udp-send-count) (udp-receive-count)) {Color World-Red}))
              (with-bin-mutex
                (lambda ()
                  (let ((threads (collect-process-threads)))
                    (cond-expand
                      (mac
                       (when threads
                         (receive (main gstreamer other) (cpu-percentage threads)
                           (let ((total (+ main gstreamer other)))
                             (draw (format "CPU%: {r precision: 1} (total) {r precision: 1} (main) {r precision: 1} (gstreamer) {r precision: 1} (other)" (* total 100.) (* main 100.) (* gstreamer 100.) (* other 100.)) {Color World-Red})))))
                      (else))
                    (case show-media
                      ((energy)
                       (cond-expand
                         (mac
                          (set-font surface {Font font-name: tahoma point-size: 14 hint-style: slight hint-metrics: on shadow: thin})
                          (draw-energy self surface 'horizontal (or threads '()) 20 (+ 80 (* rank 28))))
                         (else)))
                      ((audio video)
                       (set-font surface {Font font-name: tahoma point-size: 14 hint-style: slight hint-metrics: on shadow: thin})
                       (draw-streams self surface 'horizontal (or threads '()) 20 (+ 80 (* rank 28)) #f))))))
              @wait
              (let ((leaks (leaks)))
                (when (not-null? leaks)
                  (draw (format "Leaks: {a}" (length leaks)) {Color World-Red}))))))))))
  
  
  (method protected (draw-energy self surface direction threads start-h start-v)
    (let ((base-h start-h)
          (base-v start-v)
          (other-h (+ start-h 330))
          (other-v start-v))
      (define (draw text color (padding 0))
        (let ((h (+ base-h padding))
              (v (+ base-v 17)))
          (draw-text surface h v text color))
        (increase! base-v 20))
      
      (define (draw-other text color (padding 0))
        (let ((h (+ other-h padding))
              (v (+ other-v 17)))
          (draw-text surface h v text color))
        (increase! other-v 20))
      
      (define (streaming-name fullname)
        (bind (name pad) (split-string fullname #\:)
          (let ((split (split-string name #\%)))
            (if (= (length split) 1)
                (format :terminal "streaming thread {a} is missing an explicit name{%}" name)
              (bind (element id) split
                (let ((bin (id->bin (string->number id))))
                  (if (not bin)
                      "unknown"
                    (let ((bin-name (gst_object_get_name bin)))
                      (format "<{a}> {a}:{a}" bin-name element pad)))))))))
      
      (define (present name percentage)
        (format "{a} {r precision: 1}%" name (* percentage 100.)))
      
      (bind (main . rest) threads
        (let ((percentage (second main)))
          (draw (present "main" percentage) {Color World-Orange})
          (increase! base-v 20))
        (for-each (lambda (thread)
                    (bind (fullname percentage) thread
                      (let ((fullname (or fullname "")))
                        (let ((gstreamer? (find fullname #\:)))
                          (let ((name (cond (gstreamer?
                                             (streaming-name fullname))
                                            ((empty-string? fullname)
                                             "unknown")
                                            (else
                                             fullname)))
                                (color (cond (gstreamer?
                                              {Color World-Blue})
                                             (else
                                              {Color White}))))
                            (let ((text (present name percentage)))
                              (if gstreamer?
                                  (draw text color)
                                (draw-other text color))))))))
                  (sort > rest key: second)))))
  
  
  (method protected (draw-streams self surface direction threads start-h start-v type?)
    (let ((base-h start-h)
          (base-v start-v))
      (define (draw text color (padding 0))
        (let ((h (+ base-h padding))
              (v (+ base-v 17)))
          (draw-text surface h v text color))
        (increase! base-v 20))
      
      (define (draw-property name value)
        (draw (format "{a}: {a}" name value) {Color World-Orange} 20))
      
      (let ((threads
              (collect (lambda (thread)
                         (bind (fullname percentage) thread
                           (and (and fullname (find fullname #\:))
                                (bind (name pad) (split-string fullname #\:)
                                  (let ((split (split-string name #\%)))
                                    (if (= (length split) 1)
                                        (begin
                                          (format :terminal "Streaming thread {a} is missing an explicit name{%}" name)
                                          #f)
                                      (bind (element id) split
                                        (let ((bin (id->bin (string->number id))))
                                          (and bin
                                               (let ((bin-name (gst_object_get_name bin)))
                                                 (list bin bin-name element pad percentage)))))))))))
                       threads))
            (bins (sort nu<? (collect-bins) key: gst_object_get_name))
            (pipeline-color {Color World-Green})
            (thread-color {Color World-Blue})
            (info-color {Color White})
            (element-color {Color White}))
        (for-each (lambda (bin)
                    (let ((bin-name (gst_object_get_name bin)))
                      (when (case show-media
                              ((audio) (starts-with? bin-name "audio"))
                              ((video) (starts-with? bin-name "video")))
                        (draw (format "<{a}>" bin-name) pipeline-color)
                        (with-unref ((elements (gst_bin_elements_sorted bin)))
                          (for-each (lambda (elem)
                                      (define (parse-name name)
                                        (let ((parts (split-string name #\%)))
                                          (if (= (length parts) 1)
                                              (list name #f)
                                            parts)))
                                      
                                      (let ((name (gst_object_get_name elem))
                                            (class (g_object_class_name elem)))
                                        (let ((type (if type? (format "{a} " class) ""))
                                              (color element-color))
                                          (bind (element id) (parse-name name)
                                            (let ((element (if (starts-with? element "capsfilter")
                                                               "caps"
                                                             element)))
                                              (if (not id)
                                                  (draw (format "{a}{a}" type element) color)
                                                (let ((thread (find-if (lambda (thread)
                                                                         (and (eq? (first thread) bin)
                                                                              (equal? (third thread) element)))
                                                                       threads)))
                                                  (if (not thread)
                                                      (draw (format "{a}{a}" type element) color)
                                                    (bind (bin bin-name element pad percentage) thread
                                                      (draw (format "{a}{a}:{a} {r precision: 1}%"
                                                                    type
                                                                    element
                                                                    pad
                                                                    (* percentage 100.))
                                                            thread-color))))))))
                                        (cond ((equal? class "GstQueue")
                                               (draw-property "current-level-buffers" (format "{a}" (g_object_get_uint elem "current-level-buffers")))
                                               (draw-property "current-level-bytes" (format "{r precision: 1}k" (/ (cast <fl> (g_object_get_uint elem "current-level-bytes")) 1024.)))
                                               (draw-property "current-level-time" (format "{r precision: 2}s" (timestamp->flonum (g_object_get_uint64 elem "current-level-time")))))
                                              ((equal? class "GstAudioRate")
                                               (draw-property "add" (g_object_get_uint64 elem "add"))
                                               (draw-property "drop" (g_object_get_uint64 elem "drop")))
                                              ((gst_is_base_sink elem)
                                               (let ((stats (gst_base_sink_get_stats elem)))
                                                 (draw-property "rate" (gst_structure_get_double stats "average-rate"))
                                                 (draw-property "dropped" (gst_structure_get_uint64 stats "dropped"))
                                                 (draw-property "rendered" (gst_structure_get_uint64 stats "rendered"))
                                                 (gst_structure_free stats))))))
                                    (reverse elements)))
                        (case direction
                          ((horizontal)
                           (increase! base-h (if type? 300 200))
                           (set! base-v start-v))
                          ((vertical)
                           (increase! base-v 20))))))
                  bins))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method (eye-matrix self camera stable?)
    (when (circling-mode? self)
      (update-interface-matrices (current-video))
      @wait
      (let ((position (get-position camera))
            (sight (get-sight camera)))
        (updating-3d-audio position sight
          (lambda ()
            (let ((udp-client (get-udp-client (current-client))))
              (iterate-table (get-receive-streams udp-client)
                (lambda (stream-no stream)
                  (let ((audio-channel (locate-stream-audio-channel stream)))
                    (when audio-channel
                      (let ((video-channel (locate-stream-video-channel stream)))
                        (when video-channel
                          (let ((audio-output (find-output (current-audio) (get-no audio-channel)))
                                (video-output (find-output (current-video) (get-no video-channel))))
                            (when (and audio-output video-output)
                              (when (is? video-output Circle-Video-Sink)
                                (let ((position (matrix-translation (get-matrix (get-pane video-output)))))
                                  (update-3d-output audio-output position)))))))))))))))))
  
  
  ;;;
  ;;;; People
  ;;;
  
  
  (method (people-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'people) '(people people))))
  
  
  (method (view-people self)
    (let ((tier (current-tier)))
      (view-hierarchy self (list-hierarchy tier))))
  
  
  (definition gathering-color   {Color red: 32 green: 205 blue: 33})
  (definition observer-color    {Color red: .942 green: .942 blue: .942})
  (definition player-color      {Color World-Blue})
  (definition group-color       {Color red: .938 green: .428 blue: .066})
  (definition zone-color        {Color red: .547 green: .287 blue: .995})
  (definition directory-color   {Color red: .804 green: .128 blue: .139})
  
  
  ;; could be done only once on server
  (method package (unify-hierarchy self hierarchy available-zones)
    (let ((client (current-client)))
      (bind (groupless . groups) hierarchy
        (let ((observers '())
              (voiders '())
              (zones (make-table test: equal?))
              (circlers #f)
              (party #f)
              (character-name (get-character-name client)))
          (define (add zone member)
            (let ((path (cdr zone)))
              (table-add zones path member)))
          
          (define (add-players zone players)
            (for-each add-player players))
          
          (define (add-player player)
            (bind (name id no asleep? disconnected? roaming? zone mode) player
              (if (eq? zone 'start)
                  (set! observers (cons player observers))
                (add zone (cons 'player player)))))
          
          (for-each (lambda (info)
                      (bind (zone . title) info
                        (unless (eq? zone 'start)
                          (table-set! zones (cdr zone) '()))))
                    available-zones)
          (bind (group allow-audio-only? zone . players) groupless
            (add-players zone players))
          (for-each (lambda (group)
                      (bind (name allow-audio-only? zone . players) group
                        (cond ((integer? name)
                               (when (member? character-name players key: car)
                                 (set! party players))
                               (add-players zone players))
                              (else
                               (when (member? character-name players key: car)
                                 (set! circlers players))
                               (if (eq? zone 'start)
                                   (set! voiders (cons group voiders))
                                 (add zone (cons 'group group)))
                               (let ((group-zone zone))
                                 (for-each (lambda (player)
                                             (bind (name id no asleep? disconnected? roaming? zone mode) player
                                               (when (or (eq? mode 'observer)
                                                         (not (equal? zone group-zone)))
                                                 (add-player player))))
                                           players))))))
                    groups)
          (if (not circlers)
              (clear-snapshot-property 'live.circle-members)
            (add-snapshot-property 'live.circle-members (map car circlers)))
          (add-snapshot-property 'live.player-party (and party (map car party)))
          (values observers voiders (table->list zones) party)))))
  
  
  (method (view-hierarchy self hierarchy)
    (let ((tier (current-tier))
          (me (current-me)))
      (let ((tree (people-tree self))
            (separator? #f))
        (receive (observers voiders zones party) (unify-hierarchy self hierarchy (cache-available-zones))
          (empty-player-infos)
          (remove-every-row tree)
          (with-update-locked tree
            (lambda ()
              (define (add-player father info group)
                (bind (player id no asleep? disconnected? roaming? zone mode) info
                  (register-player-info player mode (and party (map car party)) asleep? disconnected? roaming?)
                  (let ((group? (and party (memq? info party))))
                    (let ((player-title (if group? (format "<{a}>" player) player)))
                      (let ((title (cond (disconnected? (format "{a} (disconnected)" player-title))
                                         (asleep? (format "{a} (offline)" player-title))
                                         (else player-title)))
                            (font {Font Label-User})
                            (color (cond ((or disconnected? asleep? (and roaming? group))
                                          {Color Medium-Gray})
                                         ((eq? mode 'player)
                                          player-color)
                                         (else
                                          observer-color))))
                        (add-row tree
                                 father: father
                                 children: (list (new Tree-Node title: title font: font color: color))
                                 user-data: (list 'player player group zone))
                        (added father))))
                  (let ((player (find-player (current-zone) player)))
                    (when player
                      (set-disconnected? player disconnected?)))))
              
              (define (add-group father info)
                (bind (group allow-audio-only? zone . players) info
                  (let ((title group))
                    (let ((row (add-row tree
                                        father: father
                                        state: 'expanded
                                        children: (list (new Tree-Node title: title font: {Font Label-User} color: group-color))
                                        user-data: (list 'group group allow-audio-only? zone))))
                      (added father)
                      (for-each (lambda (info)
                                  (add-player row info group))
                                players)))))
              
              (define (add-zones father spine zones)
                (for-each (lambda (partition)
                            (bind (title . children) partition
                              (if (empty-string? title)
                                  (add-children father spine children)
                                (when (not father)
                                  (add-separator title))
                                (let ((row (add-directory father title))
                                      (spine (append spine (list title))))
                                  (add-zones row spine (map (lambda (info)
                                                              (cons (cdar info) (cdr info)))
                                                            children))))))
                          (sort di<? (partition zones key: (lambda (info)
                                                             (let ((path (car info)))
                                                               (if (> (length path) 1)
                                                                   (car path)
                                                                 "")))
                                       test: filename=?)
                            key: car)))
              
              (define (add-children father spine children)
                (for-each (lambda (info)
                            (bind (zone . members) info
                              (let ((title (last zone)))
                                (let ((row (add-row tree
                                                    father: father
                                                    state: 'expanded
                                                    children: (list (new Tree-Node
                                                                      title: title
                                                                      font: {Font Label-User}
                                                                      color: zone-color))
                                                    user-data: (cons 'zone (append spine zone)))))
                                  (added father)
                                  (for-each (lambda (info)
                                              (bind (kind . info) info
                                                (case kind
                                                  ((player) (add-player row info #f))
                                                  ((group) (add-group row info)))))
                                            members)))))
                          (sort di<? children key: (lambda (info)
                                                     (last (car info))))))
              
              (define (add-directory father title)
                (prog1 (add-row tree
                                father: father
                                state: 'expanded
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: directory-color))
                                user-data: (list 'directory title))
                  (added father)))
              
              (define (add-separator identifier)
                (unless separator?
                  (add-row tree
                           children: (list (new Tree-Node title: "" font: {Font Label-User}))
                           user-data: (list 'separator identifier))
                  (set! separator? #t)))
              
              (define (added father)
                (when (not father)
                  (set! separator? #f)))
              
              (let ((row (add-row tree
                                  state: 'expanded
                                  children: (list (new Tree-Node
                                                    title: "The gathering"
                                                    font: {Font Label-User}
                                                    color: gathering-color)))))
                (added #f)
                (for-each (lambda (info)
                            (add-player row info #f))
                          (let ((me (get-name me)))
                            (sort di<? observers key: (lambda (player)
                                                        (if (equal? player me)
                                                            (cons 0 player)
                                                          (cons 1 player)))))))
              (when (not-null? voiders)
                (add-separator 'voiders)
                (for-each (lambda (info)
                            (add-group #f info))
                          (sort di<? voiders key: car)))
              (when (not-null? zones)
                (add-separator 'zones)
                (add-zones #f '() zones))))))))
  
  
  (method package (people-selection-change self)
    (when (is? space Gathering-Space)
      (let ((tree (people-tree self)))
        (let ((data (or (get-single-selected-data tree) (list 'group #f #f 'start))))
          (bind (kind . rest) data
            (define (select zone group allow-audio-only? player)
              (set! selected-message "")
              (unless (equal? zone selected-zone)
                (unless zone-loading
                  (load-zone self zone))
                (set! zone-loading zone)
                (unless (eq? zone 'start)
                  (set! selected-color {Color World-Orange})
                  (set! selected-message (format "{a} is loading..." (last zone)))))
              (set! selected-zone zone)
              (set! selected-group group)
              (set! selected-allow-audio-only? allow-audio-only?)
              (set! selected-data data)
              (when (selected-loaded? self)
                (set! active-zone zone)
                (set! active-group group)
                (set! active-allow-audio-only? allow-audio-only?)
                (set! active-data data))
              (update-center-interface space))
            
            (case kind
              ((group)
               (bind (group allow-audio-only? zone) rest
                 (select zone group allow-audio-only? #f)))
              ((zone)
               (select data #f #f #f))))))))
  
  
  (method package (people-double-click self)
    (people-action-selected self))
  
  
  (method package (people-return-press self)
    (people-action-selected self))
  
  
  (method (people-action-selected self)
    (when (is? space Gathering-Space)
      (when (selected-loaded? self)
        (let ((data (get-single-selected-data (people-tree self))))
          (when data
            (let ((kind (car data)))
              (cond (active-group
                     (when (eq? kind 'group)
                       (if (circling? self)
                           (enter-circle self)
                         (join-circle self active-group active-allow-audio-only?))))
                    ((and active-zone (neq? active-zone 'start))
                     (when (eq? kind 'zone)
                       (enter-zone self))))))))))
  
  
  (method package (focus-command-text self)
    (let ((interface (current-interface)))
      (let ((text (locate (child interface 'command) 'text)))
        (when (view-visible? text)
          (acquire-focus text)))))
  
  
  (method package (people-label-action self)
    )
  
  
  ;;;
  ;;;; Experiment
  ;;;
  
  
  (method (experiment-tree self)
    (let ((interface (current-interface)))
      (locate (child interface 'experiment) 'experiment)))
  
  
  (method (experiment-text self)
    (let ((interface (current-interface)))
      (locate (child interface 'experiment) '(console text))))
  
  
  (method (view-experiment self)
    (let ((tree (experiment-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (for-each (lambda (experiment)
                      (let ((title (experiment-title self experiment))
                            (color (experiment-color self experiment)))
                        (add-row tree
                                 children: (list (new Tree-Node title: title font: {Font Label-User} color: color))
                                 user-data: experiment)))
                    experiments)))))
  
  
  (method (experiment-title self experiment)
    (get-title experiment))
  
  
  (method (experiment-color self experiment)
    (if (get-running? experiment)
        {Color World-Blue}
      {Color White}))
  
  
  (method package (experiment-action self clear?)
    (experiment-action-selected self clear?))
  
  
  (method (experiment-action-selected self clear?)
    (let ((tree (experiment-tree self))
          (text (experiment-text self)))
      (let ((row (get-selected-row tree)))
        (when row
          (let ((experiment (get-user-data row)))
            (define (update-cell)
              (let ((title (experiment-title self experiment))
                    (color (experiment-color self experiment))
                    (line (row->line tree row))
                    (col 0))
                (let ((cell (new Cell line col)))
                  (let ((data (get-cell-data tree cell)))
                    (set-title data title)
                    (set-color data color))
                  (invalidate-cell tree cell))))
            
            (when experiment
              (let ((action (get-action experiment)))
                (define (feedback message)
                  (with-reentrant-task-mutex
                    (lambda ()
                      (let ((end (text-ending text)))
                        (let ((range (new Range$Cell$ end end)))
                          (replace (get-model text) range (list message ""))
                          (ensure-range-displayed text range))))))
                
                (when (or clear? (get-clear? experiment))
                  (empty-text text))
                (delay-event
                  (lambda ()
                    (set-running? experiment #t)
                    (update-cell)
                    (action feedback)
                    (set-running? experiment #f)
                    (update-cell))))))))))
  
  
  ;;;
  ;;;; Message
  ;;;
  
  
  (method (message-received self sender kind message)
    (let ((client (current-client)))
      (unless (eq? kind 'activity)
        (unless (equal? sender (get-character-name client))
          (when message-sound
            (play-ambient-sound 'message volume: .25))
          (when message-attention
            (user-attention (current-toplevel)))))))
  
  
  ;;;
  ;;;; Chat
  ;;;
  
  
  (method (chat-displayed self chat)
    (show-chat self)
    #f)
  
  
  (method (chat-sender self sender (user? #t))
    (update-message-recipient self (if (not sender)
                                       #f
                                     (list 'player sender)))
    (when user?
      (focus-command-text self)))
  
  
  (method package (chat-message self)
    (let ((interface (current-interface)))
      (show-chat self)
      (show-command self)
      (acquire-focus (locate (child interface 'command) 'text))))
  
  
  (method package (chat-slash self)
    (let ((interface (current-interface)))
      (show-chat self)
      (show-command self)
      (let ((text (locate (child interface 'command) 'text)))
        (acquire-focus text)
        (set-string-content text "")
        (insert-char text #\/))))
  
  
  (method package (chat-previous self)
    (let ((interface (current-interface)))
      (let ((focus (active-focus)))
        (when (is? focus Command-Bar-Text-View)
          (if (not previous-command)
              (bell)
            (let ((command (child interface 'command)))
              (let ((text (locate command 'text))
                    (previous previous-command))
                (set! previous-command (get-string-content text))
                (set-string-content text previous)
                (set-caret text (text-ending text)))))))))
  
  
  (method (show-chat/command self)
    (let ((interface (current-interface))
          (space (current-space)))
      (typecase space
        ((Void-Space)
         (set-visible? (child interface 'chat-label) #t)
         (set-visible? (child interface 'chat) #t)
         (set-visible? (child interface 'command-to) #t)
         (set-visible? (child interface 'command) #t))
        ((Zone-Space)
         (set-visible? (child interface 'chat) #t)))))
  
  
  (method (show-chat self)
    (let ((together (current-together))
          (interface (current-interface)))
      (let ((circling? (circling? together)))
        (when circling?
          (set-visible? (child interface 'chat-label) #t))
        (set-visible? (child interface 'chat) #t)
        (when circling?
          (set-visible? (child interface 'command-to) #t))
        (set-visible? (child interface 'command) #t))))
  
  
  (method (show-command self)
    (let ((together (current-together))
          (interface (current-interface)))
      (let ((circling? (circling? together)))
        (when circling?
          (set-visible? (child interface 'command-to) #t))
        (set-visible? (child interface 'command) #t))))
  
  
  (method (command-return self command)
    (let ((tier (current-client))
          (interface (current-interface))
          (world (current-world))
          (space (current-space)))
      (define (parse-content content)
        (cond ((starts-with? content "/s ")
               (if (admin?)
                   (values 'server #f (substring content 3 (string-length content)) #f)
                 (selected-recipient content)))
              ((starts-with? content "/g ")
               (values 'group (group-recipient) (substring content 3 (string-length content)) #f))
              ((starts-with? content "/w ")
               (let ((str (substring content 3 (string-length content))))
                 (let ((pos (find (trim-leading-whitespace str) #\space)))
                   (if (not pos)
                       (values 'whisper (get-name (current-me)) str #f)
                     (let ((str (trim-leading-whitespace str)))
                       (let ((recipient (trim-whitespace (substring str 0 pos)))
                             (message (substring str (+ pos 1) (string-length str))))
                         (values 'whisper recipient message (lambda () (show-panel-whisper recipient message)))))))))
              ((starts-with? content "/r ")
               (let ((last-whisperer (get-last-whisperer world))
                     (message (substring content 3 (string-length content))))
                 (if (not last-whisperer)
                     (values 'group (group-recipient) message #f)
                   (values 'whisper last-whisperer message (lambda () (show-panel-whisper last-whisperer message))))))
              ((starts-with? content "/invite ")
               (if (not (has-microphone?))
                   (show-panel-message (get-character-name tier) 'show "No microphone found")
                 (if (not (acquire-microphone-pipeline))
                     (show-panel-message (get-character-name tier) 'show "Unable to acquire microphone")
                   (let ((recipient (trim-whitespace (substring content 8 (string-length content)))))
                     (let ((error (client-invite tier recipient)))
                       (if error
                           (show-panel-message (get-character-name tier) 'show error)
                         (show-panel-message (get-character-name tier) 'show (format "Invite {a}" recipient)))))))
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/leave")
               (let ((error (client-leave tier)))
                 (if error
                     (show-panel-message (get-character-name tier) 'show error)
                   (show-panel-message (get-character-name tier) 'show "Left group")))
               (values #f #f #f #f))
              ((equal? (trim-trailing-whitespace content) "/clear")
               (let ((panel (child interface 'chat)))
                 (clear panel)
                 (values #f #f #f #f)))
              (else
               (selected-recipient content))))
      
      (define (group-recipient)
        (if (is? space Void-Space)
            circle-name
          #f))
      
      (define (selected-recipient message)
        (if (not message-recipient)
            (begin
              (when (is-not? space Gathering-Space)
                (show-panel-say "The gathering" message))
              (values 'gathering #f message #f))
          (bind (what name) message-recipient
            (case what
              ((player)
               (show-panel-whisper name message)
               (values 'whisper name message #f))
              (else
               (values 'group name message #f))))))
      
      (define (show-panel-say recipient message)
        (let ((panel (child interface 'chat))
              (sender #f))
          (show-say panel recipient message sender)))
      
      (define (show-panel-whisper recipient message)
        (let ((panel (child interface 'chat))
              (sender recipient))
          (show-whisper panel recipient message sender)))
      
      (define (show-panel-message sender kind message)
        (let ((panel (child interface 'chat)))
          (show-message panel sender kind message)))
      
      (let ((text (locate command 'text)))
        (let ((content (get-string-content text)))
          (if (and (is? space Zone-Space) (empty-string? content))
              (hide-command world)
            (unless (whitespace? content)
              (set! previous-command content)
              (receive (kind recipient message cont) (parse-content content)
                (when kind
                  (let ((error (client-message tier kind recipient message)))
                    (if error
                        (show-panel-message (get-character-name tier) 'show error)
                      (when cont
                        (cont)))))
                (set-string-content text "")
                (when (is? space Zone-Space)
                  (hide-command world)))))))))
  
  
  (method (command-escape self command)
    (let ((world (current-world))
          (space (current-space)))
      (when (is? space Zone-Space)
        (hide-command world))))
  
  
  (method package (chat-label-action self)
    (let ((interface (current-interface)))
      (let ((chat-label (child interface 'chat-label))
            (chat (child interface 'chat))
            (command-to (child interface 'command-to))
            (command (child interface 'command)))
        (set! chat-wide? (not chat-wide?))
        (set-size chat-label (chat-label-size self))
        (set-proportion chat (chat-proportion self))
        (set-size command-to (command-to-size self))
        (set-location command-to (command-to-location self))
        (set-size command (command-size self))
        (set-location command (command-location self)))
      (layout-view interface)))
  
  
  (method protected (chat-label-size self)
    (if chat-wide?
        {Dimension 420 40}
      {Dimension 220 40}))
  
  
  (method protected (chat-proportion self)
    `(,(if chat-wide? 420 220)
      (bounds ,(if (is? space Gathering-Space) -300 -354))))
  
  
  (method protected (command-to-size self)
    (if chat-wide?
        {Dimension 426 40}
      {Dimension 226 40}))
  
  
  (method protected (command-to-location self)
    (if (is? space Gathering-Space)
        '(-4 -158)
      '(-4 -212)))
  
  
  (method protected (command-size self)
    (if chat-wide?
        {Dimension 420 19}
      {Dimension 220 19}))
  
  
  (method protected (command-location self)
    (if (is? space Gathering-Space)
        '(-10 -146)
      '(-10 -200)))
  
  
  ;;;
  ;;;; Mode
  ;;;
  
  
  (method (on-avatar-mode self evt)
    (let ((world (current-world)))
      (unless (eq? circle-mode 'avatar)
        (change-circle-mode self 'avatar 'circle)
        (camera-copy! (get-eye world) preserved-eye)
        (set-unbind-camera? #t)
        (person-motion world @wait-buggy-eye-center?: #f feedback?: #f))))
  
  
  (method (on-circle-mode self evt)
    (let ((world (current-world)))
      (unless (eq? circle-mode 'circle)
        (let ((from-avatar? (eq? circle-mode 'avatar)))
          (change-circle-mode self 'circle 'circle)
          (when from-avatar?
            (camera-copy! preserved-eye (get-eye world))
            (circle-home))))))
  
  
  (method (on-focus-mode self evt)
    (let ((world (current-world)))
      (unless (eq? circle-mode 'focus)
        (let ((from-avatar? (eq? circle-mode 'avatar)))
          (change-circle-mode self 'focus 'focus)
          (when from-avatar?
            (camera-copy! preserved-eye (get-eye world)))))))
  
  
  (method (on-gallery-mode self evt)
    (let ((world (current-world)))
      (unless (eq? circle-mode 'gallery)
        (let ((from-avatar? (eq? circle-mode 'avatar)))
          (change-circle-mode self 'gallery 'gallery)
          (when from-avatar?
            (camera-copy! preserved-eye (get-eye world)))))))
  
  
  (method (change-circle-mode self mode layout (feedback?: feedback? #t))
    (let ((space (current-space))
          (world (current-world))
          (video (current-video)))
      (set! circle-mode mode)
      (goto-layout video layout)
      (when (eq? video-layout 'focus)
        (goto-focused self)
        (when (not bound-camera?)
          (circle-update-camera (video-count))
          (bind-camera)
          (unbind-output)))
      (space-refresh space)
      (show-interface (current-space) #t)
      (update-parameter world 'avatar-mode)
      (update-parameter world 'circle-mode)
      (update-parameter world 'focus-mode)
      (update-parameter world 'gallery-mode)
      (when feedback?
        (display-message world (capitalize (symbol->string mode))))))
  
  
  (method (goto-focused self)
    (let ((video (current-video)))
      (let ((focused-output (effective-focused-output video)))
        (when focused-output
          (circle-goto-focus focused-output)))))
  
  
  (method package (avatar-mode? self)
    (and circle-name (eq? circle-mode 'avatar)))
  
  
  (method package (circle-mode? self)
    (and circle-name (eq? circle-mode 'circle)))
  
  
  (method package (focus-mode? self)
    (and circle-name (eq? circle-mode 'focus)))
  
  
  (method package (gallery-mode? self)
    (and circle-name (eq? circle-mode 'gallery)))
  
  
  (method package (circling-mode? self)
    (or (circle-mode? self)
        (avatar-mode? self)))
  
  
  ;;;
  ;;;; Zone
  ;;;
  
  
  (method (load-zone self path)
    (let ((client (current-client)))
      (load-zone client path)))
  
  
  (method (change-zone self path)
    (let ((client (current-client))
          (world (current-world))
          (zone (current-zone)))
      (unless (equal? path (get-path zone))
        (let ((info (change-zone client path)))
          (if (string? info)
              (display-error world (format "{a}" info))
            (uninstall-vista)
            (install-vista))))))
  
  
  ;;;
  ;;;; Group
  ;;;
  
  
  (method (group-join self)
    (let ((space (current-space)))
      (set! in-group? #t)
      (space-refresh space)
      (setup-visibility mainbar)))
  
  
  (method (group-leave self)
    (let ((space (current-space)))
      (set! in-group? #f)
      (space-refresh space)
      (setup-visibility mainbar)))
  
  
  ;;;
  ;;;; Circle
  ;;;
  
  
  (method (install-circle-hooks self)
    (let ((tier (current-tier)))
      (set-stream-add-hook tier (~ stream-add self))
      (set-stream-remove-hook tier (~ stream-remove self))))
  
  
  (method (uninstall-circle-hooks self)
    (let ((tier (current-tier)))
      (set-stream-add-hook tier #f)
      (set-stream-remove-hook tier #f)))
  
  
  (method (stream-add self stream)
    (let ((world (current-world)))
      (when (eq? (get-source-kind stream) 'live)
        (unless (is? space Void-Space)
          (display-message world (format "{a} joined" (get-sender stream)))))))
  
  
  (method (stream-remove self stream)
    (let ((world (current-world)))
      (when (eq? (get-source-kind stream) 'live)
        (unless (is? space Void-Space)
          (display-message world (format "{a} left" (get-sender stream)))))))
  
  
  (method (layout-circle self ordered-outputs)
    (let ((count (length ordered-outputs)))
      (when bound-camera?
        (circle-update-camera count))
      (when (and (is? space Void-Space)
                 (eq? video-layout 'focus))
        (goto-focused self)
        (show-interface (current-space) #t))
      (circle-placements count)))
  
  
  (method package (shortcut-press-circle self shortcut)
    (define (focus-no no)
      (let ((video (current-video)))
        ;; useful to compare profiles
        (define (find-by-level level)
          (find-if (lambda (output)
                     (eqv? (get-level output) level))
                   (get-ordered-outputs video)))
        
        (define (find-nth rank)
          (let ((outputs (get-ordered-outputs video)))
            (and (< rank (length outputs))
                 (element outputs rank))))
        
        (let ((output (find-nth (- no 1))))
          (when output
            (circle-switch-focus output)
            (when focus-unmute?
              (let ((circle-view (circle-view output)))
                (let ((mute-view (child circle-view 'mute)))
                  (when (and (get-visible? mute-view)
                             (get-muted? mute-view))
                    (adjust-muted? mute-view #f)))))))))
    
    (define (cycle-focus reversed?)
      (let ((video (current-video)))
        (let ((focused (get-focused-output video))
              (outputs (get-ordered-outputs video)))
          (when focused
            (let ((next (cycle-element outputs focused reversed?: reversed?)))
              (circle-switch-focus next))))))
    
    (define (world/circle-focus? focus)
      (or (world-focus? focus)
          (circle-focus? focus)))
    
    (define (circle-focus? focus)
      (is? focus Circle-View))
    
    (let ((focus (active-focus)))
      (nucase shortcut
        (({Shortcut Space})
         (if (and (circle-focus? focus)
                  (not (push-to-talk?)))
             (begin
               (toggle-paused focus)
               #t)
           #f))
        (({Shortcut Left})
         (if (circle-focus? focus)
             (begin
               (seek-backward focus)
               #t)
           (and (circle-mode? self)
                (world-focus? focus)
                (begin
                  (circle-left)
                  #t))))
        (({Shortcut Right})
         (if (circle-focus? focus)
             (begin
               (seek-forward focus)
               #t)
           (and (circle-mode? self)
                (world-focus? focus)
                (begin
                  (circle-right)
                  #t))))
        (({Shortcut Up})
         (and (circle-mode? self)
              (world/circle-focus? focus)
              (begin
                (circle-up)
                #t)))
        (({Shortcut Down})
         (and (circle-mode? self)
              (world/circle-focus? focus)
              (begin
                (circle-down)
                #t)))
        (({Shortcut Return})
         (and (circle-mode? self)
              (world/circle-focus? focus)
              (begin
                (circle-return)
                #t)))
        (({Shortcut Backspace})
         (and (circle-mode? self)
              (world/circle-focus? focus)
              (begin
                (circle-backspace)
                #t)))
        (({Shortcut #\1})
         (and (or (circle-mode? self)
                  (focus-mode? self))
              (begin
                (focus-no 1)
                #t)))
        (({Shortcut #\2})
         (and (or (circle-mode? self)
                  (focus-mode? self))
              (begin
                (focus-no 2)
                #t)))
        (({Shortcut #\3})
         (and (or (circle-mode? self)
                  (focus-mode? self))
              (begin
                (focus-no 3)
                #t)))
        (({Shortcut #\4})
         (and (or (circle-mode? self)
                  (focus-mode? self))
              (begin
                (focus-no 4)
                #t)))
        (({Shortcut #\5})
         (and (or (circle-mode? self)
                  (focus-mode? self))
              (begin
                (focus-no 5)
                #t)))
        (({Shortcut Tab})
         (and (or (circle-mode? self)
                  (focus-mode? self))
              (world/circle-focus? focus)
              (begin
                (cycle-focus #f)
                #t)))
        (({Shortcut :shift Tab})
         (and (or (circle-mode? self)
                  (focus-mode? self))
              (world/circle-focus? focus)
              (begin
                (cycle-focus #t)
                #t)))
        (else
         #f))))
  
  
  ;;;
  ;;;; Refresh
  ;;;
  
  
  (method (refresh-hook self)
    (cond (show-debug?
           #t)
          ((and debug-stream (not auto-hide?))
           (lambda ()
             (invalidate-outputs (current-video))))
          (else
           #f)))

  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (on-toggle-debug self evt)
    (when (is? space Void-Space)
      (set-show-debug? (not show-debug?))
      (invalidate-interface)))
  
  
  (method (on-toggle-debug-energy self evt)
    (when (is? space Void-Space)
      (cond ((eq? show-media 'energy)
             (set-show-media #f))
            (else
             (set-show-debug? #t)
             (set-show-media 'energy)))
      (invalidate-interface)))
  
  
  (method (on-toggle-debug-audio self evt)
    (when (is? space Void-Space)
      (cond ((eq? show-media 'audio)
             (set-show-media #f))
            (else
             (set-show-debug? #t)
             (set-show-media 'audio)))
      (invalidate-interface)))
  
  
  (method (on-toggle-debug-video self evt)
    (when (is? space Void-Space)
      (cond ((eq? show-media 'video)
             (set-show-media #f))
            (else
             (set-show-debug? #t)
             (set-show-media 'video)))
      (invalidate-interface)))
  
  
  (method (on-toggle-debug-media self evt)
    (when (is? space Void-Space)
      (let ((video (current-video)))
        (set-debug-stream (if (eq? debug-stream 'media)
                              #f
                            'media))
        (invalidate-outputs video)
        (when debug-stream
          (show-interface (current-space) #t)))))
  
  
  (method (on-toggle-debug-flow self evt)
    (when (is? space Void-Space)
      (let ((video (current-video)))
        (set-debug-stream (if (eq? debug-stream 'flow)
                              #f
                            'flow))
        (invalidate-outputs video)
        (when debug-stream
          (show-interface (current-space) #t)))))
  
  
  (method (on-toggle-debug-live self evt)
    (when (is? space Void-Space)
      (let ((video (current-video)))
        (set-debug-stream (if (eq? debug-stream 'live)
                              #f
                            'live))
        (invalidate-outputs video)
        (when debug-stream
          (show-interface (current-space) #t)))))
  
  
  (method (on-toggle-admin self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (if (and (get-visible? panel)
                   (eq? (active-focus) text))
              (begin
                (hide-admin self)
                ;; should not be necessary
                (focus-world))
            (show-admin self)
            (acquire-focus text))))))
  
  
  (method (show-admin self)
    (let ((interface (current-interface)))
      (when (admin?)
        (set-visible? (child interface 'admin-label) #t)
        (set-visible? (child interface 'admin) #t))
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (set-visible? (child root 'selected-label) #f)
          (set-visible? (child root 'zone) #f)
          (set-visible? (child root 'zone-enter) #f)
          (set-visible? (child root 'circle) #f)
          (set-visible? (child root 'circle-join) #f)
          (set-visible? (child root 'circle-create) #f)))
      (layout-view interface)))
  
  
  (method (hide-admin self)
    (let ((interface (current-interface)))
      (when (admin?)
        (set-visible? (child interface 'admin-label) #f)
        (set-visible? (child interface 'admin) #f))
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (update-center-interface space)))))
  
  
  (method (on-toggle-evolution self evt)
    (let ((interface (current-interface))
          (world (current-world))
          (client (current-client)))
      (toggle-evolution world)
      (let ((panel (child interface 'evolution)))
        (when (get-visible? panel)
          (let ((lite? (world-setting 'world.timeline-lite? #f)))
            (set-lite? panel lite?)
            (set-span panel (world-setting 'world.timeline-span (if lite? 10. 30.)))
            (set-events-mode panel 'all)
            (let ((udp-client (get-udp-client client)))
              (let ((channels (table-values (get-receive-channels udp-client))))
                ;; quick solution use first audio channel
                (let ((audio-channels (collect-if (lambda (channel) (= (get-media-kind channel) udp-audio)) channels)))
                  (when (not-null? audio-channels)
                    (let ((origin (get-origin (get-stream (car audio-channels)))))
                      (set-origin panel origin)
                      (invalidate-view panel)))))))))))
  
  
  (method (on-toggle-visualizer self evt)
    (if (is? space Replay-Space)
        (let ((interface (current-interface)))
          (let ((root (child interface 'replay)))
            (let ((visualizer (child root 'visualizer)))
              (set-visible? visualizer (not (get-visible? visualizer)))
              (together-visualizer-panel-layouter visualizer)
              (together-timeline-panel-layouter (child root 'timeline))
              (together-evolution-panel-layouter (child root 'evolution))
              (layout-view root)
              (layout-view interface)
              (invalidate-interface))))
      (bell)))
  
  
  (method (on-goto-gathering self evt)
    (let ((client (current-client)))
      (typecase space
        ((Gathering-Space))
        ((Sphere-Space)
         (exit-zone self)
         @roaming
         (if circle-name
             (goto-gathering self)
           (exit-zone self)))
        (else
         (goto-space self 'gathering)))))
  
  
  (method (on-goto-script self evt)
    (typecase space
      ((Script-Space))
      ((Void-Space)
       (bell))
      (else
       (goto-script/last self))))
  
  
  @convert!?
  (method (toggle-script self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((toplevel (current-toplevel))
            (panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (if (get-visible? panel)
              (begin
                (set-visible? panel #f)
                (set-caption toplevel #f)
                (focus-world))
            (require-cataloguer)
            (let ((text (locate manager '(script text))))
              (if edited-entity
                  (begin
                    (recolorize-syntax text)
                    (edited-update manager))
                (when edited-script
                  (let ((script (find-script world edited-script)))
                    (when script
                      (let ((entity (register-asset-script script)))
                        (set-edited-entity entity)
                        (set-edited manager entity)
                        (set-moniker text (get-file script)))))))
              (acquire-focus text))
            (set-visible? panel #t))))))
  
  
  (method (goto-script/last self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (let ((text (locate manager '(script text))))
            (when (not edited-entity)
              (when edited-script
                (let ((script (find-script world edited-script)))
                  (when script
                    (require-cataloguer)
                    (let ((entity (register-asset-script script)))
                      (set-edited-entity entity)
                      (set-edited manager entity)
                      (set-moniker text (get-file script)))))))
            (goto-script self))))))
  
  
  (method (goto-script self)
    (goto-space self 'script))
  
  
  (method (on-goto-replay self evt)
    (typecase space
      ((Replay-Space))
      ((Void-Space)
       (view-last-replay self))
      (else
       (goto-replay/last self))))
  
  
  (method (view-last-replay self)
    (let ((last-replay (world-setting 'world.last-replay #f)))
      (if last-replay
          (bind (name from to now) last-replay
            (let ((dir (new-directory {Directory Documents "replays"} name)))
              (if (exists? dir)
                  (open/view-replay self dir from to now)
                (bell))))
        (bell))))
  
  
  (method (goto-replay/last self)
    (let ((interface (current-interface)))
      (if (get-replay (child interface 'replay))
          (goto-replay self)
        (let ((last-replay (world-setting 'world.last-replay #f)))
          (if last-replay
              (bind (name from to now) last-replay
                (let ((dir (new-directory {Directory Documents "replays"} name)))
                  (if (exists? dir)
                      (open/view-replay self dir from to now)
                    (goto-replay self))))
            (goto-replay self))))))
  
  
  (method (goto-replay self)
    (goto-space self 'replay))
  
  
  (method (open/view-replay self dir (from #f) (to #f) (now #f))
    (let ((replay (open-replay dir)))
      (view-replay self replay from to now)
      (set-setting options-settings 'world.last-replay (list (get-name dir) (get-from replay) (get-to replay) (get-now replay)))
      (save-content options-settings)))
  
  
  (method protected (view-replay self replay (from #f) (to #f) (now #f))
    (let ((title (get-title replay))
          (tier (get-tier replay))
          (names (get-names replay))
          (metadatas (get-metadatas replay))
          (chronologies (get-chronologies replay))
          (evolutions (get-evolutions replay))
          (channels (get-channels replay))
          (log-indexes (get-log-indexes replay))
          (base-time (get-base-time replay)))
      (let ((sites (metadata-sites (table-ref metadatas tier)))
            (chronology (table-ref chronologies tier))
            (evolution (table-ref evolutions tier)))
        (define (setup-replay-panel panel)
          (set-replay panel replay))
        
        (define (setup-visualizer-panel panel)
          (set-replay panel replay)
          (set-tier panel tier)
          (setup-visualizer panel)
          (invalidate-view panel))
        
        (define (setup-timeline-panel panel)
          (set-tier panel (table-ref names tier))
          (set-title panel title)
          (set-highlighted-values panel '())
          (setup-sites panel sites)
          (set-chronology panel chronology)
          (set-evolution panel evolution)
          (set-evolutions panel evolutions)
          (reset-start/end panel)
          (setup-replay panel base-time)
          (when (and from to)
            (set-bounds panel from to)
            (update-span panel))
          (when now
            (set-now panel now))
          (set-from replay from)
          (set-to replay to)
          (set-now replay now))
        
        (define (setup-evolution-panel panel)
          (set-names panel names)
          (set-channels panel channels)
          (set-evolutions panel evolutions)
          (set-log-indexes panel log-indexes)
          (set-base-time panel base-time))
        
        (if (is? space Void-Space)
            (let ((world (current-world))
                  (udp (current-udp)))
              (define (stream-replay name)
                (let ((channels (list (make-replay-channel))))
                  (make-stream "Replay" 'replay #f channels)))
              
              (define (make-replay-channel)
                (let ((media-kind udp-video)
                      (source-kind 'replay)
                      (level #f)
                      (resolution draw-resolution)
                      (framerate #f)
                      (bitrate draw-bitrate)
                      (codec #f)
                      (caps #f)
                      (metadata '()))
                  (new Channel-Creator
                    (list media-kind source-kind level resolution framerate bitrate codec caps metadata)
                    (lambda (stream-no channel-no)
                      (let ((client (current-client)))
                        (let ((channel (register-send-channel (get-udp-client client) stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata)))
                          (channel-output (current-video) channel root-view: (make-replay-view))
                          (let ((src (new Video-Src))
                                (sink (new Stream-Frame-Consumer
                                        consumer: (client-video-consumer client channel-no))))
                            (let ((pipeline (pipeline (list src sink))))
                              (set-pipeline channel pipeline)))))))))
              
              (define (make-replay-view)
                (let ((root (new Together-Replay-Panel position: {Point 0 0} size: {Dimension 1280 720} in-circle?: #t)))
                  (let ((visualizer (new Together-Visualizer-Panel parent: root name: 'visualizer position: {Point 64  20} size: {Dimension 1152 150}))
                        (timeline   (new Together-Timeline-Panel   parent: root name: 'timeline   position: {Point 64 168} size: {Dimension 1152 220}))
                        (evolution  (new Together-Evolution-Panel  parent: root name: 'evolution  position: {Point 64 387} size: {Dimension 1152 333})))
                    ;(set-background root {Color red: 30 green: 30 blue: 30 alpha: .7})
                    ;(set-border-sides (child visualizer 'border) 'bottom)
                    ;(set-border-color timeline #f)
                    ;(set-border-sides (child evolution 'border) 'top)
                    (setup-replay-panel root)
                    (setup-visualizer-panel visualizer)
                    (setup-timeline-panel timeline)
                    (setup-evolution-panel evolution)
                    (display-evolutions root now)
                    (update-visualizer root)
                    root)))
              
              (hide-admin self)
              (play (stream-replay "Replay")))
        (hide-admin self)
        (goto-replay self)
        (let ((root (get-root space)))
          (setup-replay-panel root)
          (setup-visualizer-panel (child root 'visualizer))
          (setup-timeline-panel (child root 'timeline))
          (setup-evolution-panel (child root 'evolution))
          (display-evolutions root now)
          (update-visualizer root))))))
  
  
  (method (on-profile-pulse self evt)
    (when (is? space Gathering-Space)
      (if running-profile
          (cancel-profile)
        (profile-pulse))))
  
  
  (method (on-profile-bandwidth self evt)
    (when (is? space Gathering-Space)
      (if running-profile
          (cancel-profile)
        (profile-bandwidth))))
  
  
  (method (on-profile-network self evt)
    (when (is? space Gathering-Space)
      (if running-profile
          (cancel-profile)
        (profile-network))))
  
  
  (method (on-request-replays self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'admin)))
        (let ((text (locate panel '(console text))))
          (show-admin self)
          (acquire-focus text)
          (insert-string text "request replay all")
          (console-return text
            (lambda ()
              (console-evaluate text)))))))
  
  
  (method (on-goto-simulate self evt)
    (typecase space
      ((Simulate-Space))
      ((Void-Space)
       (bell))
      (else
       (goto-simulate self))))
  
  
  (method (goto-simulate self)
    (goto-space self 'simulate))
  
  
  (method (on-preprocess-streams self evt)
    (let ((thread
            (new-thread
              (lambda ()
                (with-task-mutex
                  (lambda ()
                    (let ((world (current-world)))
                      (working world
                        (lambda ()
                          (define (feedback stage file suffix)
                            (when (eq? stage 'start)
                              (working-progress world (format "Preprocessing {a} ({a})" (get-name file) suffix) #f)))
                          
                          (catch (Preprocess-Unsupported-Error err
                                   (display-error world (get-message err)))
                            (iterate-stream-directories
                              (lambda (stream-directory)
                                (let ((dir (if (admin?)
                                               (let ((dir (new-directory stream-directory '("convert"))))
                                                 (if (exists? dir)
                                                     dir
                                                   stream-directory))
                                             stream-directory)))
                                  (preprocess-directory dir prime?: preprocess-prime? feedback: feedback)))))))))))
              'preprocess)))
      (thread-base-priority-set! thread background-priority)
      (thread-start! thread)))
  
  
  (method (on-toggle-screen-share self evt)
    (toggle-screen-share self))
  
  
  (method (toggle-screen-share self)
    (let ((world (current-world))
          (client (current-client))
          (udp (current-udp)))
      (let ((stream (locate-screen-stream)))
        (cond ((not stream)
               (let ((stream (stream-screen "Screen")))
                 (play stream)
                 (let ((channel (locate-screen-channel stream)))
                   (receive (caps resolution) (require-caps channel)
                     (channel-init client (get-no channel) caps resolution)
                     (set-state channel 'on)
                     (set-caps channel caps)
                     (set-resolution channel resolution))))
               (display-on/off world "Screen sharing" #t))
              (else
               (close-send-stream udp stream)
               (display-on/off world "Screen sharing" #f))))))
  
  
  (method (on-capture-screen self evt)
    (capture-screen self))
  
  
  (method (capture-screen self)
    (let ((world (current-world)))
      (let ((file (timestamped-file {Directory Documents "screenshots"} "together" "png")))
        (create-directories file)
        (capture-screen-to-file file)
        (display-message world "Screenshot captured"))))
  
  
  (method (on-toggle-mode self evt)
    (let ((world (current-world)))
      (set-video-mode
        (if (eq? video-mode 'fit)
            'fill
          'fit))
      (display-message world (case video-mode
                               ((fit) "Fit")
                               ((fill) "Fill")))))
  
  
  (method (on-toggle-hide self evt)
    (let ((space (current-space)))
      (when (is? space Void-Space)
        (toggle-hide space))))
  
  
  (method (on-toggle-experiment self evt)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'experiment)))
        (if (get-visible? panel)
            (hide-experiment self)
          (show-experiment self)))))
  
  
  (method (on-run-experiment7 self evt)
    )
  
  
  (method (on-run-experiment8 self evt)
    )
  
  
  (method (on-run-experiment9 self evt)
    )
  
  
  (method (on-run-experiment0 self evt)
    )
  
  
  (method (show-experiment self)
    (install-experiments)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'experiment-label) #t)
      (set-visible? (child interface 'experiment) #t)
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (set-visible? (child root 'circle-join) #f)
          (set-visible? (child root 'circle) #f)))
      (view-experiment self)
      (layout-view interface)))
  
  
  (method (hide-experiment self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'experiment-label) #f)
      (set-visible? (child interface 'experiment) #f)
      (when (is? space Gathering-Space)
        (let ((root (get-root space)))
          (set-visible? (child root 'circle-join) #t)
          (set-visible? (child root 'circle) #t)))))
  
  
  (method (on-add-image self evt)
    (add-image))
  
  
  (method (on-add-video self evt)
    (add-video))
  
  
  (method (on-add-music self evt)
    (add-music))
  
  
  (method (on-remove-stream self evt)
    (remove-random-stream))
  
  
  (method (on-edit-script1 self evt)
    (edit-asset-script (world-setting 'world.test1-script "test/test1")))
  
  
  (method (on-edit-script2 self evt)
    (edit-asset-script (world-setting 'world.test2-script "test/test2")))
  
  
  (method (on-edit-script3 self evt)
    (edit-asset-script (world-setting 'world.test3-script "test/test3")))
  
  
  (method (on-edit-script4 self evt)
    (edit-asset-script (world-setting 'world.test4-script "test/test4")))
  
  
  (method (on-edit-script5 self evt)
    (edit-asset-script (world-setting 'world.test5-script "test/test5")))
  
  
  (method (on-edit-script6 self evt)
    (edit-asset-script (world-setting 'world.test6-script "test/test6")))
  
  
  (method (on-edit-script7 self evt)
    (edit-asset-script (world-setting 'world.test7-script "test/test7")))
  
  
  (method (on-edit-script8 self evt)
    (edit-asset-script (world-setting 'world.test8-script "test/test8")))
  
  
  (method (on-edit-script9 self evt)
    (edit-asset-script (world-setting 'world.test9-script "test/test9")))
  
  
  (method (on-edit-script0 self evt)
    (edit-asset-script (world-setting 'world.test0-script "test/test0"))))


;;;
;;;; Player-Info
;;;


(definition player-infos
  (make-table test: equal?))

(definition package (register-player-info name mode party asleep? disconnected? roaming?)
  (table-set! player-infos name (new Player-Info name mode party asleep? disconnected? roaming?)))

(definition package (registered-player-info name)
  (table-ref player-infos name #f))

(definition package (empty-player-infos)
  (empty-table player-infos))


(class Player-Info extends Object
  
  
  (slot name          getter generate)
  (slot mode          getter generate)
  (slot party         getter generate)
  (slot asleep?       getter generate)
  (slot disconnected? getter generate)
  (slot roaming?      getter generate)
  
  
  (method override (initialize self name mode party asleep? disconnected? roaming?)
    (nextmethod self)
    (set! self.name name)
    (set! self.mode mode)
    (set! self.party party)
    (set! self.asleep? asleep?)
    (set! self.disconnected? disconnected?)
    (set! self.roaming? roaming?))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (open-login-zone)))


;;;
;;;; Circle-Label
;;;


(class Circle-Label extends Kind-Label
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (update-message-recipient together (list 'group (get-circle-name together))))))


;;;
;;;; Profile-Label
;;;


(definition change-profile-reversed?
  #t)


(class Profile-Label extends Label-View
  
  
  (method override (mouse-up self evt)
    (let ((client (current-client)))
      (cond ((and change-profile-reversed? (eq? user-base-profile upper-base-profile))
             (set! change-profile-reversed? #f))
            ((and (not change-profile-reversed?) (eq? user-base-profile 'low))
             (set! change-profile-reversed? #t)))
      (let ((profile-list (case upper-base-profile
                            ((full) '(full high standard medium low))
                            ((high) '(high standard medium low))
                            ((standard) '(standard medium low))
                            ((medium) '(medium low))
                            ((low) '(low)))))
        (set-user-base-profile (or (cycle-element profile-list user-base-profile cycle?: #f reversed?: change-profile-reversed?) user-base-profile))
        (effective-base-profile-update)
        (update-profile self)))))


(definition protected (update-profile label)
  (define (update-label title color)
    (set-title label title)
    (set-color label color))
  
  (case user-base-profile
    ((full)     (update-label "Full"     {Color Pastel-Purple}))
    ((high)     (update-label "High"     {Color Pastel-Blue}))
    ((standard) (update-label "Standard" {Color Pastel-Green}))
    ((medium)   (update-label "Medium"   {Color Pastel-Yellow}))
    ((low)      (update-label "Low"      {Color Pastel-Orange}))))


;;;
;;;; Create-Circle
;;;


(class Create-Circle-View extends Layout-View
  
  
  (form
    (<install>                                layout-type: justify
      (<Kind-Label>   name: label             title: "New circle name" location: (center 0) size: {Dimension 200 40} auto-size?: #t font: {Font Label-User point-size: 17.5 antialias: default} justification: tail)
      (<Name-View>    name: view              location: (center 30) size: {Dimension 300 24} border-type: solid border-color: {Color Dark-Gray} action-view: create invalid-view: invalid option-view: allow-audio-only? name-label: "Circle name" max-length: 40)
      (<Name-Invalid> name: invalid           location: (center 56) size: {Dimension 400 16} font: {Font Label-User point-size: 12.5 antialias: default})
      (<Push-Button>  name: create            title: "Create & Join" enabled?: #f location: (center 89) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default})
      (<Check-Box>    name: allow-audio-only? title: "Allow audio-only" location: (center 134) size: {Dimension 106 16} visible?: #f))))


(class Create-Circle-Close extends View
  
  
  (method override (draw self surface context)
    (let ((width (get-width self))
          (height (get-height self)))
      (set-color surface {Color World-Caption})
      (set-line-width surface 1.5)
      (line surface 0 0 8 8)
      (line surface 8 0 0 8)))
  
  
  (method override (mouse-up self evt)
    (let ((panel (find-ascendant self Create-Circle-Panel)))
      (close panel))))


(class Create-Circle-Panel extends World-Panel
  
  
  (form
    (<install>                                           layout-type: fill
      (<Border-View>             name: content           location: center border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .450}
        (<Create-Circle-View>    name: create
          (<!>                   name: label             location: (center 10))
          (<!>                   name: view              location: (center 40))
          (<!>                   name: invalid           location: (center 66))
          (<!>                   name: create            location: (center 99))
          (<!>                   name: allow-audio-only? location: (center 142))
          (<Create-Circle-Close> name: close             location: (-6 6) size: {Dimension 8 8})))))
  
  
  (method override (escape-close? self)
    #t))


;;;
;;;; People-Label
;;;


(class People-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (people-label-action together))))


;;;
;;;; People-Panel
;;;


(class People-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>   name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<People-View> name: people  location: center)))))


;;;
;;;; People-View
;;;


(class People-View extends Scroller-View
  
  
  (form
    (<install>                                 style: document hscroll?: #f vscroll?: #f
      (<content~>                              layout-type: fill
        (<Tree-Header>                         style: document shown?: #f
          (<content~>
            (<People-Tree>        name: people portfolio: :images filled-column: person always-select?: #t background: #f action-handler: {Event-Handler :form on-action} selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
              (<Tree-Node-Column> name: person title: "Person" width: 235 controls?: #f toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-action self evt)
    (let ((together (current-together)))
      (let ((tree (get-sender evt)))
        (let ((recipient (get-single-selected-data tree))
              (previous-focus (get-previous-focus tree)))
          (update-message-recipient together recipient)
          (when (is? previous-focus Command-Bar-Text-View)
            (focus-command-text together))))))
  
  
  (method package (on-selection-change self evt)
    (let ((together (current-together)))
      (people-selection-change together)))
  
  
  (method package (on-double-click self evt)
    (let ((together (current-together)))
      (people-double-click together)))
  
  
  (method override (on-return-press self evt)
    (let ((together (current-together)))
      (people-return-press together))))


;;;
;;;; People-Tree
;;;


(class People-Tree extends Tree-View
  
  
  (slot previous-focus initialize #f getter generate)
  
  
  (method override (mouse-down self evt)
    (set! previous-focus (active-focus))
    (nextmethod self evt)))


;;;
;;;; Streams-Label
;;;


(class Streams-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((space (current-space)))
      (streams-label-action space))))


;;;
;;;; Streams-Panel
;;;


(class Streams-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Streams-View> name: streams location: center)))))


;;;
;;;; Streams-View
;;;


(class Streams-View extends Scroller-View
  
  
  (form
    (<install>                                style: document hscroll?: #f vscroll?: #f
      (<content~>                             layout-type: fill
        (<Tree-Header>                        style: document shown?: #f
          (<content~>
            (<Streams-Tree>     name: streams portfolio: :images filled-column: stream background: #f action-handler: {Event-Handler :form on-action}
              (<Streams-Column> name: stream  title: "Stream" width: 235 toplevel-controls?: #f controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (on-action self evt)
    (let ((space (current-space)))
      (streams-action space))))


;;;
;;;; Streams-Tree
;;;


(class Streams-Tree extends Tree-View)


;;;
;;;; Streams-Column
;;;


(class Streams-Column extends Tree-Node-Column
  
  
  (method override (draw-background self surface context row data width height)
    )
  
  
  (method override (cell-color self color context)
    color))


;;;
;;;; Chat-Label
;;;


(class Chat-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((together (current-together)))
      (chat-label-action together))))


;;;
;;;; To-Tool
;;;


(class To-Tool extends Push-Tool
  
  
  (form
    (<install> size: {Dimension 22 22} portfolio: :images tooltip?: #t))
  
  
  (method override (get-tooltip-context self pos)
    (let ((text (get-tooltip-text self))
          (bounds (get-tooltip-bounds self pos)))
      (tooltip-context self text bounds))))


;;;
;;;; Invite-Tool
;;;


(class Invite-Tool extends To-Tool
  
  
  (method override (get-tooltip-text self)
    `(<span>
       (<paragraph> "Invite to group")
       ""
       (<paragraph> (<text> color: World-Green "Invite person to join an audio group")))))


;;;
;;;; Leave-Tool
;;;


(class Leave-Tool extends To-Tool
  
  
  (method override (get-tooltip-text self)
    `(<span>
       (<paragraph> "Leave group")
       ""
       (<paragraph> (<text> color: World-Green "Leave your current group")))))


;;;
;;;; Experiment-Panel
;;;


(class Experiment-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>                 name: content    location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Splitter-View>             name: splitter   separator: none orientation: vert mode: relative division: 40.
          (<Scroller-View>                                location: first style: document hscroll?: #t vscroll?: #t
            (<content~>                                   layout-type: fill
              (<Tree-Header>             name: header     style: document shown?: #f
                (<content~>                               layout-type: fill
                  (<Experiment-Tree>     name: experiment portfolio: :images filled-column: title background: #f action-handler: {Event-Handler :form on-action}
                    (<Experiment-Column> name: title      title: "Experiment" toplevel-controls?: #f controls?: #f display-images?: #f display-levels?: #f))))))
          (<Experiment-View>         name: console    location: second)))))
  
  
  (method override (draw self surface context)
    (let ((v (- (get-height (locate self 'header)) 1)))
      (set-color surface {Color Medium-Gray alpha: .7})
      (set-line-width surface 1)
      (move-to surface 1 v)
      (line-to surface (- (get-width self) 1) v)))
  
  
  (method package (on-action self evt)
    (let ((together (current-together)))
      (let ((clear? (get-shift? evt)))
        (experiment-action together clear?)))))


;;;
;;;; Experiment-Tree
;;;


(class Experiment-Tree extends Tree-View)


;;;
;;;; Experiment-Column
;;;


(class Experiment-Column extends Tree-Node-Column
  
  
  (method override (draw-background self surface context row data width height)
    )
  
  
  (method override (cell-color self color context)
    color))


;;;
;;;; Experiment-View
;;;


(class Experiment-View extends Scroller-View
  
  
  (form
    (<install>
      (<!>                      name: content
        (<Experiment-Text-View> name: text    background: #f)))))


;;;
;;;; Experiment-Text-View
;;;


(class Experiment-Text-View extends World-Text-View
  
  
  (form
    (<install> editable?: #f selectable?: #t))
  
  
  (method override (new-model self)
    (new Text-Model wrap?: #t left-padding: 2 top-padding: 1)))


;;;
;;;; Admin-Panel
;;;


(class Admin-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>  name: content location: center border-type: solid border-color: {Color Dark-Gray} style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Admin-View> name: console location: center)))))


;;;
;;;; Admin-View
;;;


(class Admin-View extends Scroller-View
  
  
  (form
    (<install>
      (<!>                 name: content
        (<Admin-Text-View> name: text    background: #f))))))
