;;;============
;;;  Together
;;;============
;;;
;;;; Together Validations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.validate jazz


(import (jazz.component)
        (jazz.math)
        (jazz.stream)
        (world)
        (world.chronology)
        (world.client.udp)
        (world.context)
        (world.event)
        (world.evolution)
        (world.interface.timeline)
        (world.settings)
        (world.simulation)
        (world.udp)
        (together.community)
        (together.replay))


(definition public (test-ring media-kind suite)
  (declare (proper-tail-calls))
  (let ((world (current-world)))
    (let ((inserts suite))
      (let ((origin 1)
            (server server-no)
            (receiver 2))
        (let ((receiver-client (simulate-udp-client receiver)))
          (let ((receiver-channel (require-receive-channel receiver-client origin media-kind)))
            (let ((receiver-ring (get-process-ring receiver-channel))
                  (average (new Average .05 1.))
                  (datas (make-table test: eqv?))
                  (base (current-seconds))
                  (origin-evolution (new Evolution 10000))
                  (server-evolution (new Evolution 10000))
                  (receiver-evolution (new Evolution 10000))
                  (expected (new Evolution 10000)))
              (define (need-data kind origin sequence frame part total timestamp header?)
                (or (table-ref datas sequence #f)
                    (let ((header-size (+ 8 4 4 4 4 4 4 8 8 4)))
                      (let ((data (make-u8vector header-size))
                            (nanostamp (if (not timestamp)
                                           -1.
                                         (flonum->timestamp timestamp))))
                        (write-udp-kind data kind)
                        (write-udp-origin data origin)
                        (write-udp-sequence data sequence)
                        (write-udp-frame data frame)
                        (write-udp-part data part)
                        (write-udp-total data total)
                        (write-udp-media-timestamp data nanostamp)
                        (write-udp-media-header? data header?)
                        (table-set! datas sequence data)
                        (parameterize ((simulation-evolution origin-evolution))
                          (record-event udp-id-create-packet
                                        (fixnum->flonum origin)
                                        (fixnum->flonum kind)
                                        (fixnum->flonum sequence)
                                        (fixnum->flonum frame)
                                        (barbara-header-hack header?)
                                        timestamp)
                          (record-event udp-id-create-info
                                        (fixnum->flonum origin)
                                        (fixnum->flonum kind)
                                        (fixnum->flonum sequence)
                                        (fixnum->flonum frame)
                                        (fixnum->flonum part)
                                        (fixnum->flonum total)))
                        data))))
              
              @wait
              (define (compare-events)
                (for-each (lambda (info)
                            (bind (time abbrev data1 data2 data3 data4) info
                              (parameterize ((simulation-time (+ base time))
                                             (simulation-evolution expected))
                                (let ((id (evolution-abbrev->id abbrev)))
                                  (record-event id
                                                (fixnum->flonum origin)
                                                (fixnum->flonum media-kind)
                                                data1
                                                data2
                                                data3
                                                data4)))))
                          events))
              
              (let ((insert (new-thread
                              (lambda ()
                                (parameterize ((simulation? #t)
                                               (simulation-evolution receiver-evolution))
                                  (for-each (lambda (info)
                                              (bind (header? timestamp seconds sequence frame part total) info
                                                (let ((time (+ base seconds)))
                                                  (sleep (- time (current-seconds)))
                                                  (let ((data (need-data media-kind origin sequence frame part total timestamp header?)))
                                                    (receive-media receiver-client media-kind data)))))
                                            inserts))
                                ;; quicky give some time for process to finish
                                (sleep .8)
                                (terminate receiver-ring))
                              'insert))
                    (process (new-thread
                               (lambda ()
                                 (parameterize ((simulation? #t)
                                                (simulation-evolution receiver-evolution))
                                   (let (looping)
                                     (let ((info (process-wait receiver-ring udp-process-window average)))
                                       (when (neq? info 'terminate)
                                         (present-frame receiver-channel info)
                                         (looping))))))
                               'process)))
                (display-message world "Validating..." duration: +inf.0)
                (thread-start! insert)
                (thread-start! process)
                (thread-join! insert)
                (thread-join! process)
                @wait
                (compare-events)
                (clear-message world)
                (view-evolution origin server receiver origin-evolution server-evolution receiver-evolution base)))))))))


(definition public (view-evolution origin server receiver origin-evolution server-evolution receiver-evolution base-time)
  (let ((zone (current-zone)))
    (let ((names (list->table (list (cons origin "Origin")
                                    (cons server "<server>")
                                    (cons receiver "Receiver"))))
          (metadatas (list->table (list (cons origin (list origin "Origin" (list udp-video) (list)))
                                        (cons server (list server "<server>"))
                                        (cons receiver (list receiver "Receiver" (list) (list (cons origin udp-video)))))))
          (chronologies (list->table (list (cons origin (new Chronology 10))
                                           (cons server (new Chronology 10))
                                           (cons receiver (new Chronology 10)))))
          (evolutions (list->table (list (cons origin origin-evolution)
                                         (cons server server-evolution)
                                         (cons receiver receiver-evolution)))))
      (let ((replay (new Replay "validate" #f receiver names metadatas chronologies evolutions base-time)))
        (view-replay zone replay)
        (let ((root (get-root zone)))
          (let ((panel (child root 'timeline)))
            (set-now panel (get-from panel))
            (now-update panel))))))))
