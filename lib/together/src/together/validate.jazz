;;;============
;;;  Together
;;;============
;;;
;;;; Together Validations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.validate jazz


(import (jazz.component)
        (jazz.math)
        (jazz.stream)
        (world)
        (world.chronology)
        (world.client.udp)
        (world.context)
        (world.event)
        (world.evolution)
        (world.interface.timeline)
        (world.record (phase syntax))
        (world.settings)
        (world.simulation)
        (world.udp)
        (together.gathering)
        (together.replay))


(definition public (test-ring media-kind suite (time-base: time-base #f))
  (declare (proper-tail-calls))
  (let ((world (current-world)))
    (let ((origin 1)
          (server server-no)
          (receiver 2))
      (let ((names (list->table (list (cons origin "Origin")
                                      (cons server "_server")
                                      (cons receiver "Receiver")))))
        (let ((call (simulate-udp-call names)))
          (let ((receiver-client (require-tier call receiver)))
            (let ((receiver-channel #f @w (require-receive-channel receiver-client origin media-kind)))
              (let ((receiver-ring (get-process-ring receiver-channel))
                    (datas (make-table test: eqv?))
                    (origin-evolution (new Evolution 10000))
                    (server-evolution (new Evolution 10000))
                    (receiver-evolution (new Evolution 10000))
                    (expected (new Evolution 10000))
                    (base #f)
                    (start-time #f)
                    (inserts suite))
                (define (need-data kind origin sequence frame part total dts pts keyframe?)
                  (or (table-ref datas sequence #f)
                      (with-record media
                        (let ((header-size (calculate-media-size)))
                          (let ((data (make-u8vector header-size))
                                (nanodts (flonum->timestamp dts))
                                (nanopts (flonum->timestamp pts))
                                (flags (frame-flags keyframe? #f)))
                            (write-header-kind data kind)
                            (write-header-sender data origin)
                            (write-media-sequence data sequence)
                            (write-media-frame data frame)
                            (write-media-part data part)
                            (write-media-total data total)
                            (write-media-dts data nanodts)
                            (write-media-pts data nanopts)
                            (write-media-flags data flags)
                            (table-set! datas sequence data)
                            (parameterize ((simulation-evolution origin-evolution))
                              (when record-events?
                                (record-event udp-id-create-packet
                                              -1.
                                              (fixnum->flonum origin)
                                              (fixnum->flonum kind)
                                              (fixnum->flonum sequence)
                                              (fixnum->flonum frame)
                                              (fixnum->flonum flags)
                                              dts
                                              pts))
                              (when record-events?
                                (record-event udp-id-create-info
                                              -1.
                                              (fixnum->flonum origin)
                                              (fixnum->flonum kind)
                                              (fixnum->flonum sequence)
                                              (fixnum->flonum part)
                                              (fixnum->flonum total)
                                              -1.)))
                            data)))))
                
                @wait
                (define (compare-events)
                  (for-each (lambda (info)
                              (bind (time abbrev data1 data2 data3 data4) info
                                (parameterize ((simulation-time (+ base time))
                                               (simulation-evolution expected))
                                  (let ((id (evolution-abbrev->id abbrev)))
                                    (when record-events?
                                      (record-event id
                                                    -1.
                                                    (fixnum->flonum origin)
                                                    (fixnum->flonum media-kind)
                                                    data1
                                                    data2
                                                    data3
                                                    data4))))))
                            events))
                
                (when time-base
                  (visualizer-update-time receiver-ring time-base 0.))
                (let ((insert (new-thread
                                (lambda ()
                                  (parameterize ((simulation? #t)
                                                 (simulation-evolution receiver-evolution))
                                    (define (simulate keyframe? dts pts seconds sequence frame part total)
                                      (let ((now (current-seconds)))
                                        (when (not start-time)
                                          (set! base now)
                                          (set! start-time seconds))
                                        (let ((time (+ base (- seconds start-time))))
                                          (sleep (- time now))
                                          (let ((data (need-data media-kind origin sequence frame part total dts pts keyframe?)))
                                            (receive-media receiver-client media-kind data)))))
                                    
                                    (for-each (lambda (info)
                                                (if (= media-kind udp-audio)
                                                    (bind (dts pts seconds sequence) info
                                                      (let ((keyframe? #f)
                                                            (frame (- sequence 2))
                                                            (part 0)
                                                            (total 1))
                                                        (simulate keyframe? dts pts seconds sequence frame part total)))
                                                  (bind (keyframe? dts pts seconds sequence frame part total) info
                                                    (simulate keyframe? dts pts seconds sequence frame part total))))
                                              inserts))
                                  ;; quicky give some time for process to finish
                                  (sleep .8)
                                  (terminate receiver-ring))
                                'insert))
                      (process (new-thread
                                 (lambda ()
                                   (parameterize ((simulation? #t)
                                                  (simulation-evolution receiver-evolution))
                                     (let (looping)
                                       (let ((info (process-audio receiver-ring)))
                                         (when (neq? info 'terminate)
                                           (give-audio receiver-channel info)
                                           (looping))))))
                                 'process)))
                  (display-message world "Validating..." duration: +inf.0)
                  (thread-start! insert)
                  (thread-start! process)
                  (thread-join! insert)
                  (thread-join! process)
                  @wait
                  (compare-events)
                  (clear-message world)
                  (view-evolution origin server receiver names origin-evolution server-evolution receiver-evolution base))))))))))


(definition public (view-evolution origin server receiver names origin-evolution server-evolution receiver-evolution base-time)
  (let ((zone (current-zone)))
    (let ((metadatas (list->table (list (cons origin (list origin "Origin" (list udp-video) (list)))
                                        (cons server (list server "_server"))
                                        (cons receiver (list receiver "Receiver" (list) (list (cons origin udp-video)))))))
          (chronologies (list->table (list (cons origin (new Chronology 10))
                                           (cons server (new Chronology 10))
                                           (cons receiver (new Chronology 10)))))
          (evolutions (list->table (list (cons origin origin-evolution)
                                         (cons server server-evolution)
                                         (cons receiver receiver-evolution))))
          (audios #f)
          (videos #f))
      (let ((replay (new Replay "validate" #f receiver names metadatas chronologies evolutions audios videos base-time)))
        (view-replay zone replay)
        (let ((root (get-root zone)))
          (let ((panel (child root 'timeline)))
            (let ((start (timeline-start panel))
                  (end (timeline-end panel)))
              (set-bounds panel start end)
              (update-span panel)
              (set-now panel start)
              (now-update panel)))))))))
