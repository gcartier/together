;;;============
;;;  Together
;;;============
;;;
;;;; Together Validations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.validate jazz


(import (jazz.component)
        (jazz.math)
        (jazz.stream)
        (world)
        (world.chronology)
        (world.context)
        (world.event)
        (world.evolution)
        (world.interface.timeline)
        (world.udp)
        (together.community)
        (together.replay))


(definition public (test-ring media-kind suite)
  (declare (proper-tail-calls))
  (let ((origin 1))
    (let ((ring (new UDP-Ring origin media-kind udp-process-size max-size: udp-process-max-size time-base?: #t invalid-proc: (udp-ring-invalid origin media-kind) overflow-proc: (udp-ring-overflow 'process udp-ring-kind-process)))
          (count (length suite))
          (average (new Average .05 1.))
          (datas (make-table test: eqv?))
          (base (current-seconds))
          (evolution (new Evolution 10000)))
      (define (need-data sequence frame part total timestamp header?)
        (or (table-ref datas sequence #f)
            (let ((header-size (+ 8 4 4 4 4 4 4 8 8 4)))
              (let ((data (make-u8vector header-size)))
                (write-udp-sequence data sequence)
                (write-udp-frame data frame)
                (write-udp-part data part)
                (write-udp-total data total)
                (write-udp-media-timestamp data timestamp)
                (write-udp-media-header? data header?)
                (table-set! datas sequence data)
                data))))
      
      (define (read-timestamp timestamp)
        (if (= timestamp -1)
            #f
          (/ timestamp nanosecond)))
      
      (define (insert-media time sequence frame part total timestamp header?)
        (let ((data (need-data sequence frame part total timestamp header?)))
          (let ((ring-size (get-count ring))
                (timestamp (read-timestamp timestamp)))
            (record-event udp-id-insert-packet
                          (fixnum->flonum origin)
                          (fixnum->flonum media-kind)
                          (fixnum->flonum sequence)
                          (fixnum->flonum ring-size)
                          (if (not timestamp) -1. time)
                          (if (not timestamp) -1. timestamp)))
          (insert ring time data)))
      
      (define (present-frame now time datas)
        (let ((first (car datas)))
          (let ((frame (read-udp-frame first))
                (header? (read-udp-media-header? first))
                (timestamp (read-udp-media-timestamp first)))
            (record-event udp-id-play-frame
                          (fixnum->flonum origin)
                          (fixnum->flonum media-kind)
                          -1.
                          (fixnum->flonum frame)
                          (barbara-header-hack header?)
                          (if (= timestamp -1)
                              -1.
                            (timestamp->flonum timestamp))))))
      
      (define (process-timeout)
        (process-waiting))
      
      (define (process-waiting)
        (record-event udp-id-state-waiting
                      (fixnum->flonum origin)
                      (fixnum->flonum media-kind)
                      -1.
                      -1.
                      -1. ;; (if last-processed-header (fixnum->flonum last-processed-header) -1.)
                      -1.))
      
      (let ((insert (new-thread
                      (lambda ()
                        (parameterize ((simulation? #t)
                                       (simulation-evolution evolution))
                          (for-each (lambda (info)
                                      (bind (header? timestamp seconds sequence frame part total) info
                                        (let ((time (+ base seconds)))
                                          (sleep (- time (current-seconds)))
                                          (insert-media time sequence frame part total timestamp header?))))
                                    suite)))
                      'insert))
            (process (new-thread
                       (lambda ()
                         (parameterize ((simulation? #t)
                                        (simulation-evolution evolution))
                           (let (looping (n 0))
                             (when (< n count)
                               (let ((info (process-wait ring udp-process-window average)))
                                 (cond ((not info)
                                        (when (= media-kind udp-video)
                                          (process-timeout)))
                                       ((eq? info 'waiting)
                                        (when (= media-kind udp-video)
                                          (process-waiting)))
                                       (else
                                        (receive (now time datas) info
                                          (present-frame now time datas)))))
                               (looping (+ n 1))))))
                       'process)))
        (thread-start! insert)
        (thread-start! process)
        (thread-join! insert)
        (thread-join! process)
        (view-evolution evolution base)))))


(definition public (present-evolution evolution)
  (loop (for n from (first-position evolution) to (last-position evolution))
        (terminal (evolutionary-udp-time evolution n)
                  (evolution-id->abbrev (evolutionary-udp-id evolution n))
                  (evolutionary-udp-origin evolution n)
                  (evolutionary-udp-kind evolution n)
                  (evolutionary-udp-data1 evolution n)
                  (evolutionary-udp-data2 evolution n)
                  (evolutionary-udp-data3 evolution n)
                  (evolutionary-udp-data4 evolution n))))


(definition public (view-evolution evolution base-time)
  (let ((zone (current-zone)))
    (let ((tier 1))
      (let ((names (list->table (list (cons tier "Receiver"))))
            (metadatas (list->table '()))
            (chronologies (list->table (list (cons tier (new Chronology 10)))))
            (evolutions (list->table (list (cons tier evolution)))))
        (let ((replay (new Replay "validate" #f tier names metadatas chronologies evolutions base-time)))
          (view-replay zone replay)
          (let ((root (get-root zone)))
            (let ((panel (child root 'timeline)))
              (set-now panel (get-from panel))
              (now-update panel)))))))))
