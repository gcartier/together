;;;============
;;;  Together
;;;============
;;;
;;;; Login Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.login jazz


(import (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.time)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.build)
        (world.client)
        (world.context)
        (world.geometry)
        (world.interface)
        (world.interface.clients)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.exception)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.servers)
        (world.interface.text)
        (world.interface.tiers)
        (world.io)
        (world.settings)
        (world.skybox)
        (world.space)
        (world.task)
        (world.window)
        (together.settings)
        (together.space)
        (together.zone))


(definition together-host
  (world-setting 'together.default-host "togethersphere.com"))

(definition together-port
  (world-setting 'together.default-port default-server-service))


(definition use-sphere?
  (world-setting 'together.use-sphere? #f))


(class Login-Space extends Together-Space
  
  
  (slot zone                         getter generate)
  (slot view-focused   initialize #f getter generate)
  (slot changing-name? initialize #f getter generate)
  
  
  (method override (initialize self zone)
    (nextmethod self)
    (set! self.zone zone))
  
  
  (method override (show-me? self)
    #f)
  
  
  (method override (space-setup self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((configuration (get-configuration zone)))
        (let ((version (process-version (current-process)))
              (date (build-short-date))
              (name (and configuration (get-character-name configuration))))
          (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
            (new Label-View name: 'welcome parent: root title: "Together" location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
            (new Version-Label name: 'version parent: root title: (format "v{a}{a}" (present version) environment-suffix) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
            (new Version-Label name: 'date parent: root title: date location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
            (new Toggle-Button name: 'about parent: root title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-about self))
            (new Push-Button name: 'quit parent: root title: "Quit" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-quit self))
            (new Kind-Label name: 'new-label parent: root title: "Please enter your name" location: '(center (center -88)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'tail)
            (new Name-View name: 'new-name parent: root location: '(center (center -58)) action-view: 'new-enter invalid-view: 'new-invalid name-label: "Name" max-length: 30)
            (new Name-Invalid name: 'new-invalid parent: root location: '(center (center -36)) size: {Dimension 400 16} font: {Font Label-User point-size: 12.5 antialias: default})
            (new Push-Button name: 'new-enter parent: root title: "Enter" enabled?: #f location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-enter-press self))
            (new Name-Label name: 'name parent: root title: name location: '(center (center -40)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'center)
            (new Push-Button name: 'enter parent: root title: "Enter" location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-enter-press self))
            (when name
              (new Push-Button name: 'customize parent: root title: "Customize" location: '(center -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-customize self)))
            (set! self.root root)
            (update-name-views self)
            (add-exception-view))))))
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((configuration (get-configuration zone)))
        (when (not configuration)
          (delay-event
            (lambda ()
              (acquire-focus (locate (child root 'new-name) 'text)))))
        (layout-view interface)
        (layout-view root)
        (no-showcase world)
        (show root)
        (send-to-back root)
        (focus-world))))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (close root)
    (let ((interface (current-interface)))
      (for-each hide (get-children interface))))
  
  
  (method (on-enter-press self evt)
    (enter-press self))
  
  
  (method (on-customize self evt)
    (if changing-name?
        (end-change-name self)
      (change-name self)))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
    
  
  (method override (enter-press self)
    (let ((configuration (get-configuration zone)))
      (cond ((not configuration)
             (create-default-remote self))
            (changing-name?
             (change-remote-name self #t))
            (else
             (remote-open zone (together-file))
             @customize
             (let ((file (together-file)))
               (if (exists? file)
                   (remote-open zone file)
                 (goto-stage self 'customize)
                 (text-content-set self (info-text self 'server-port) (port->string together-port))))))))
  
  
  (method override (tab-press self)
    )

  
  (method (update-name-views self)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not configuration) changing-name?)))
          (set-visible? (child root 'new-label) new?)
          (set-visible? (child root 'new-name) new?)
          (set-visible? (child root 'new-invalid) new?)
          (set-visible? (child root 'new-enter) new?)
          (set-visible? (child root 'name) (not new?))
          (set-visible? (child root 'enter) (not new?))
          (when configuration
            (let ((name (and configuration (get-character-name configuration))))
              (set-title (child root 'name) name)
              (layout-view root)))))))
  
  
  (method package (change-name self)
    (let ((configuration (get-configuration zone)))
      (let ((actual-name (get-character-name configuration)))
        (set! changing-name? #t)
        (set-title (child root 'new-label) "Please enter your new name")
        (set-string-content (locate (child root 'new-name) 'text) actual-name)
        (set-enabled? (child root 'new-enter) (not (whitespace? actual-name)))
        (update-name-views self)
        (layout-view root)
        (acquire-focus (locate (child root 'new-name) 'text)))))
  
  
  (method package (end-change-name self)
    (when changing-name?
      (set! changing-name? #f)
      (set-title (child root 'new-label) "Please enter your name")
      (set-title (child root 'new-invalid) "")
      (update-name-views self)
      (layout-view root)
      (focus-world)))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not configuration) changing-name?)))
          (define (closer frame)
            (let ((customize (find-component root 'customize)))
              (cond (new?
                     (set-visible? (child root 'new-label) #t)
                     (set-visible? (child root 'new-name) #t)
                     (set-visible? (child root 'new-invalid) #t)
                     (set-visible? (child root 'new-enter) #t)
                     (when customize
                       (set-visible? customize #t))
                     (when view-focused
                       (inhibit-focus-selects-all view-focused
                         (lambda ()
                           (acquire-focus view-focused)))))
                    (else
                     (set-visible? (child root 'name) #t)
                     (set-visible? (child root 'enter) #t)
                     (when customize
                       (set-visible? customize #t))))))
          
          (let ((frame (top-frame)))
            (if (is? frame World-Document)
                (begin
                  (close frame)
                  (closer frame))
              (show-about self closer: closer)))))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not configuration) changing-name?)))
          (let ((customize (find-component root 'customize)))
            (cond (new?
                   (set! view-focused (active-focus))
                   (set-visible? (child root 'new-label) #f)
                   (set-visible? (child root 'new-name) #f)
                   (set-visible? (child root 'new-invalid) #f)
                   (set-visible? (child root 'new-enter) #f)
                   (when customize
                     (set-visible? customize #f)))
                  (else
                   (set-visible? (child root 'name) #f)
                   (set-visible? (child root 'enter) #f)
                   (when customize
                     (set-visible? customize #f)))))
          (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))))
  
  
  (method (create-default-remote self)
    (let ((interface (current-interface)))
      (let ((view (child root 'new-name)))
        (let ((text (locate view 'text)))
          (let ((name (trim-whitespace (get-string-content text))))
            (let ((client-name "Together")
                  (server-address (host->string together-host))
                  (server-port (port->string together-port))
                  (avatar #f)
                  (script #f)
                  (zone '(zone "Circle")))
              (let ((file (create-client-file client-name server-address server-port name avatar script zone)))
                (setup-configuration zone)
                (update-name-views self)
                (remote-open zone file))))))))
  
  
  (method (change-remote-name self (open? #f))
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone))
            (view (child root 'new-name)))
        (let ((text (locate view 'text)))
          (let ((name (trim-whitespace (get-string-content text))))
            (let ((file (get-origin (get-form configuration))))
              (let ((server-address (get-server-host configuration))
                    (server-port (get-server-service configuration))
                    (avatar (get-character-avatar configuration))
                    (script (get-character-script configuration))
                    (charzone (get-character-zone configuration)))
                (let ((file (save-client-file file server-address server-port name avatar script charzone)))
                  (setup-configuration zone)
                  (end-change-name self)
                  (when open?
                    (remote-open zone file))))))))))
  
  
  (method override (name-return self)
    (let ((configuration (get-configuration zone)))
      (if (not configuration)
          (create-default-remote self)
        (change-remote-name self))))
  
  
  (method override (name-escape self)
    (end-change-name self)))


@customize
(class Customize-Space extends Space
  
  
  (slot root initialize #f getter generate)
  
  
  (method override (show-me? self)
    #f)
  
  
  (method override (space-setup self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((root (new Layout-View parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
        (new Label-View name: 'welcome parent: root title: tier-title location: '(40 30) size: {Dimension 400 80} font: {Font font-name: tahoma point-size: 60 shadow: thin})
        (new Info-Label name: 'server-address-label parent: root title: "Server Address" location: '(-40 -240) color: {Color red: .892 green: .773 blue: .290})
        (new Info-View name: 'server-address parent: root location: '(-40 -220))
        (new Info-Label name: 'server-port-label parent: root title: "Server Port" location: '(-40 -200) color: {Color red: .892 green: .773 blue: .290})
        (new Info-View name: 'server-port parent: root location: '(-40 -180))
        (new Info-Label name: 'name-label parent: root title: "Name" location: '(-40 -140) color: {Color red: .892 green: .773 blue: .290})
        (new Info-View name: 'name parent: root location: '(-40 -120))
        (new Push-Button name: 'back parent: root title: "Back" location: '(40 -40) size: {Dimension 100 24} action-handler: (~ on-back self))
        (new Push-Button name: 'create parent: root title: "Enter" location: '(-40 -40) size: {Dimension 100 24} action-handler: (~ on-create-remote self))
        (text-content-set self (info-text self 'server-address) (host->string together-host))
        (text-content-set self (info-text self 'server-port) (port->string together-port))
        (add-exception-view)
        (set! self.root root)))))


(class Login-Zone extends Zone
  
  
  (slot space          initialize #f getter generate)
  (slot configuration  initialize #f getter generate)
  
  
  (form
    (<install> sun-cycle?: #f start-grid?: #t))
  
  
  (method override (setup-space self)
    (setup-configuration self)
    (when (current-space+)
      (space-uninstall (current-space)))
    (set! space (new Login-Space self))
    (space-setup space)
    (space-install space)
    (set-current-space space))
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (let ((world (current-world)))
      (set-escape-hook world (~ escape-press self))))
  
  
  (method override (destroy self)
    (let ((world (current-world)))
      (no-showcase world)
      (set-enter-hook world #f)
      (set-escape-hook world #f)
      (uninstall-camera))
    (nextmethod self))
  
  
  (method override (prepare-skybox self)
    (set! skybox (let ((skybox (find-skybox together-skybox)))
                   (prepare skybox)
                   skybox)))
  
  
  (method override (camera-update self)
    (nextmethod self)
    (when (window?)
      (install-camera)))
  
  
  (method package (setup-configuration self)
    (let ((file (together-file)))
      (set! configuration (and (exists? file) (instantiate (read-form file))))))
    
  
  (method override (welcome? self)
    #t)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  @customize
  (method override (mouse-track self elapse dx dy)
    (when (memq? stage '(customize))
      (let ((world (current-world)))
        (let ((entity (get-selection-entity (get-showcase world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat entity))
                (up (get-world-up world)))
            (set-lookat entity (rotate-lookat& lookat angle up))
            (update-matrix entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (escape-press self)
    (close-frame self)
    #t)
  
  
  (method (close-frame self)
    (let ((frame (top-frame)))
      (when frame
        (close frame))))
  
  
  @customize
  (method (on-customize self evt)
    (change-remote self (together-file)
      (if configuration (get-server-host configuration) together-host)
      (if configuration (get-server-service configuration) together-port)))
  
  
  @customize
  (method (change-remote self file server-address server-port)
    (let ((world (current-world)))
      (when (exists? file)
        (let ((configuration (instantiate (read-form file))))
          (let ((name (get-character-name configuration))
                (avatar (and use-sphere? (get-character-avatar configuration))))
            (goto-stage self 'customize)
            (text-content-set self (info-text self 'server-address) (host->string server-address))
            (text-content-set self (info-text self 'server-port) (port->string server-port))
            (text-content-set self (info-text self 'name) name)
            (when use-sphere?
              (let ((showcase (get-showcase world)))
                (let ((avatar (find-avatar showcase avatar)))
                  (when avatar
                    (set-selection showcase avatar)
                    (selection-update showcase avatar)))))
            (delay-event
              (lambda ()
                (acquire-focus (info-text self 'name)))))))))
  
  
  @customize
  (method (on-back self evt)
    (goto-stage self (case stage
                       ((customize) 'login))))
  
  
  @customize
  (method (goto-stage self what)
    (uninstall-stage self)
    (set! stage what)
    (install-stage self))
  
  
  @customize
  (method (selected-avatar self)
    (let ((world (current-world)))
      (get-model (get-selection-entity (find-showcase world 'avatars)))))
  
  
  @customize
  (method (on-create-remote self evt)
    (create-remote self))
  
  
  @customize
  (method (info-return self)
    (case stage
      ((customize) (create-remote self))))
  
  
  @customize
  (method package (create-remote self)
    (let ((fields (remote-fields self)))
      (let ((client-name "Together")
            (contents (map (lambda (field)
                             (bind (label view) field
                               (text-content self (info-text self view))))
                           fields))
            (avatar (and use-sphere? (selected-avatar self)))
            (script #f)
            (zone (if use-sphere?
                      '(zone "Sphere")
                    '(zone "Circle"))))
        (bind (server-address server-port name) contents
          (let ((file (create-client-file client-name server-address server-port name avatar script zone)))
            (setup-configuration self)
            (update-name-views self)
            (remote-open self file))))))
  
  
  @customize
  (method (remote-fields self)
    '((server-address-label server-address #t)
      (server-port-label server-port #f)
      (name-label name #t)))
  
  
  @customize
  (method (remote-stops self)
    (map (~ info-text self) (map second (remote-fields self))))
  
  
  (method (remote-open self remote-file)
    (with-window-cursor :wait
      (lambda ()
        (clear-exception)
        (open-circle-zone remote-file))))
  
  
  @customize
  (method (info-text self view)
    (let ((interface (current-interface)))
      (locate (child root view) 'text)))
  
  
  @customize
  (method (text-content self text)
    (let ((content (get-string-content text)))
      (if (empty-string? content)
          #f
        content)))
  
  
  @customize
  (method (text-content-set self text content)
    (set-string-content text (->string content)))
  
  
  @customize
  (method package (tab-stops self)
    (case stage
      ((customize) (remote-stops self))
      (else #f))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((space (current-space)))
      (change-name space))))


;;;
;;;; Info-Label
;;;


@customize
(class Info-Label extends Label-View
  
  
  (form
    (<install> size: {Dimension 150 16} color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info-View
;;;


@customize
(class Info-View extends Border-View
  
  
  (form
    (<install>                          size: {Dimension 150 19} border-type: edge style: entry
      (<Scroller-View>                  hscroll?: #f vscroll?: #f
        (<content~>                     layout-type: fill
          (<World-Text-View> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method override (get-tab-stops self)
    (let ((zone (current-zone)))
      (tab-stops zone)))
  
  
  (method (on-return self evt)
    (let ((zone (current-zone)))
      (info-return zone)))))
