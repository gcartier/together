;;;============
;;;  Together
;;;============
;;;
;;;; Login Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.login jazz


(import (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.context)
        (world.geometry)
        (world.interface.clients)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.servers)
        (world.interface.text)
        (world.interface.tiers)
        (world.io)
        (world.settings)
        (world.skybox)
        (world.task)
        (world.window)
        (together.settings)
        (together.zone))


(definition together-host
  (world-setting 'together.default-host "togethersphere.com"))

(definition together-port
  (world-setting 'together.default-port 50000))


(definition use-sphere?
  (world-setting 'together.use-sphere? #f))


(class Login-Zone extends Together-Zone
  
  
  (slot stage         initialize #f getter generate)
  (slot configuration initialize #f getter generate)
  (slot view-focused  initialize #f getter generate)
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (let ((world (current-world)))
      (setup-stage self)
      (setup-configuration self)
      (install-stage self)
      (set-escape-hook world (lambda () (close-frame self)))
      (set-draw-me? self #f)))
  
  
  (method override (destroy self)
    (let ((world (current-world)))
      (uninstall-stage self)
      (no-showcase world)
      (set-enter-hook world #f)
      (set-escape-hook world #f)
      (set-draw-me? self #t)
      (uninstall-camera))
    (nextmethod self))
  
  
  (method (setup-stage self)
    (set! stage 'login))
  
  
  (method (setup-configuration self)
    (let ((file (together-file)))
      (set! configuration (and (exists? file) (instantiate (read-form file))))))
    
  
  (method override (welcome? self)
    #t)
  
  
  (method override (mute-audio? self)
    #t)
  
  
  (method (install-stage self)
    (let ((interface (current-interface))
          (world (current-world)))
      (for-each (lambda (child)
                  (set-visible? child #f))
                (get-children interface)))
    (case stage
      ((login)
       (install-login self))
      @customize
      ((customize)
       (install-customize self))))
  
  
  (method (install-login self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version (current-process)))
            (release (process-release (current-process)))
            (name (and configuration (get-character-name configuration))))
        (new Label-View name: 'welcome parent: interface title: "Together" location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present version)) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Toggle-Button name: 'about parent: interface title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} action-handler: (~ on-about self))
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(30 -30) size: {Dimension 100 24} action-handler: (~ on-quit self))
        (new Kind-Label name: 'new-label parent: interface title: "Please enter your name" location: '(center (center -90)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} background: {Color Black alpha: .2} justification: 'tail)
        (new Name-View name: 'new-name parent: interface location: '(center (center -60)) action-view: 'new-enter)
        (new Push-Button name: 'new-enter parent: interface title: "Enter" enabled?: #f location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 15.5} action-handler: (~ on-enter-press self))
        (new Name-Label name: 'name parent: interface title: name location: '(center (center -40)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
        (new Push-Button name: 'enter parent: interface title: "Enter" location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 15.5} action-handler: (~ on-enter-press self))
        (update-name-views self)
        (when (not configuration)
          (delay-event
            (lambda ()
              (acquire-focus (locate (child interface 'new-name) 'text)))))
        @customize
        (when name
          (new Push-Button name: 'customize parent: interface title: "Customize" location: '(center -40) size: {Dimension 140 24} action-handler: (~ on-customize self)))
        (add-exception-view self)
        (layout-view interface)
        (no-showcase world))))
  
  
  @customize
  (method (install-customize self)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Label-View name: 'welcome parent: interface title: tier-title location: '(40 30) size: {Dimension 400 80} font: {Font font-name: tahoma point-size: 60 shadow: thin})
      (new Info-Label name: 'server-address-label parent: interface title: "Server Address" location: '(-40 -240) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-address parent: interface location: '(-40 -220))
      (new Info-Label name: 'server-port-label parent: interface title: "Server Port" location: '(-40 -200) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-port parent: interface location: '(-40 -180))
      (new Info-Label name: 'name-label parent: interface title: "Name" location: '(-40 -140) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'name parent: interface location: '(-40 -120))
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) size: {Dimension 100 24} action-handler: (~ on-back self))
      (new Push-Button name: 'create parent: interface title: "Enter" location: '(-40 -40) size: {Dimension 100 24} action-handler: (~ on-create-remote self))
      (text-content-set self (info-text self 'server-address) (host->string together-host))
      (text-content-set self (info-text self 'server-port) (port->string together-port))
      (add-exception-view self)
      (layout-view interface)
      (when use-sphere?
        (goto-showcase world 'avatars))
      (delay-event
        (lambda ()
          (acquire-focus (locate (child interface 'name) 'text))))))
  
  
  (method (uninstall-stage self)
    (let ((interface (current-interface))
          (world (current-world)))
      (setup-interface world)))
  
  
  (method (update-name-views self)
    (let ((interface (current-interface)))
      (set-visible? (child interface 'new-label) (not configuration))
      (set-visible? (child interface 'new-name) (not configuration))
      (set-visible? (child interface 'new-enter) (not configuration))
      (set-visible? (child interface 'name) configuration)
      (set-visible? (child interface 'enter) configuration)
      (when configuration
        (let ((name (and configuration (get-character-name configuration))))
          (set-title (child interface 'name) name)
          (layout-view interface)))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  @customize
  (method override (mouse-track self elapse dx dy)
    (when (memq? stage '(customize))
      (let ((world (current-world)))
        (let ((entity (get-selection-entity (get-showcase world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat entity))
                (up (get-world-up world)))
            (set-lookat entity (rotate-lookat& lookat angle up))
            (update-matrix entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-enter-press self evt)
    (enter-press self))
  
  
  (method override (enter-press self)
    (cond ((not configuration)
           (create-default-remote self))
          (else
           (remote-open self (together-file))
           @customize
           (let ((file (together-file)))
             (if (exists? file)
                 (remote-open self file)
               (goto-stage self 'customize)
               (text-content-set self (info-text self 'server-port) (port->string together-port)))))))
  
  
  (method override (tab-press self)
    )
  
  
  @customize
  (method (on-customize self evt)
    (change-remote self (together-file)
      (if configuration (get-server-host configuration) together-host)
      (if configuration (get-server-service configuration) together-port)))
  
  
  @customize
  (method (change-remote self file server-address server-port)
    (let ((world (current-world)))
      (when (exists? file)
        (let ((configuration (instantiate (read-form file))))
          (let ((name (get-character-name configuration))
                (avatar (and use-sphere? (get-character-avatar configuration))))
            (goto-stage self 'customize)
            (text-content-set self (info-text self 'server-address) (host->string server-address))
            (text-content-set self (info-text self 'server-port) (port->string server-port))
            (text-content-set self (info-text self 'name) name)
            (when use-sphere?
              (let ((showcase (get-showcase world)))
                (let ((avatar (find-avatar showcase avatar)))
                  (when avatar
                    (set-selection showcase avatar)
                    (selection-update showcase avatar)))))
            (delay-event
              (lambda ()
                (acquire-focus (info-text self 'name)))))))))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (define (closer frame)
        (cond ((not configuration)
               (set-visible? (child interface 'new-label) #t)
               (set-visible? (child interface 'new-name) #t)
               (set-visible? (child interface 'new-enter) #t)
               (when view-focused
                 (inhibit-focus-selects-all self view-focused
                   (lambda ()
                     (acquire-focus view-focused)))))
              (else
               (set-visible? (child interface 'name) #t)
               (set-visible? (child interface 'enter) #t))))
      
      (let ((frame (top-frame)))
        (if (is? frame World-Document)
            (begin
              (close frame)
              (closer frame))
          (show-about self closer: closer)))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (cond ((not configuration)
             (set! view-focused (active-focus))
             (set-visible? (child interface 'new-label) #f)
             (set-visible? (child interface 'new-name) #f)
             (set-visible? (child interface 'new-enter) #f))
            (else
             (set-visible? (child interface 'name) #f)
             (set-visible? (child interface 'enter) #f)))
      (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  @customize
  (method (on-back self evt)
    (goto-stage self (case stage
                       ((customize) 'login))))
  
  
  (method (goto-stage self what)
    (uninstall-stage self)
    (set! stage what)
    (install-stage self))
  
  
  @customize
  (method (selected-avatar self)
    (let ((world (current-world)))
      (get-model (get-selection-entity (find-showcase world 'avatars)))))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  @customize
  (method (on-create-remote self evt)
    (create-remote self))
  
  
  (method override (name-return self)
    (create-default-remote self))
  
  
  @customize
  (method (info-return self)
    (case stage
      ((customize) (create-remote self))))
  
  
  @customize
  (method package (create-remote self)
    (let ((fields (remote-fields self)))
      (let ((client-name "Together")
            (contents (map (lambda (field)
                             (bind (label view) field
                               (text-content self (info-text self view))))
                           fields))
            (avatar (and use-sphere? (selected-avatar self)))
            (script #f)
            (zone (if use-sphere?
                      '(zone "Sphere")
                    '(zone "Circle"))))
        (bind (server-address server-port name) contents
          (let ((file (create-client-file client-name server-address server-port name avatar script zone)))
            (setup-configuration self)
            (update-name-views self)
            (remote-open self file))))))
  
  
  (method package (create-default-remote self)
    (let ((interface (current-interface)))
      (let ((view (child interface 'new-name)))
        (let ((text (locate view 'text)))
          (let ((name (get-string-content text)))
            (unless (empty-string? name)
              (let ((client-name "Together")
                    (server-address (host->string together-host))
                    (server-port (port->string together-port))
                    (avatar #f)
                    (script #f)
                    (zone '(zone "Circle")))
                (let ((file (create-client-file client-name server-address server-port name avatar script zone)))
                  (setup-configuration self)
                  (update-name-views self)
                  (remote-open self file)))))))))
  
  
  @customize
  (method (remote-fields self)
    '((server-address-label server-address #t)
      (server-port-label server-port #f)
      (name-label name #t)))
  
  
  @customize
  (method (remote-stops self)
    (map (~ info-text self) (map second (remote-fields self))))
  
  
  (method (remote-open self remote-file)
    (with-window-cursor :wait
      (lambda ()
        (clear-exception self)
        (let ((obj (open-client remote-file)))
          (if (is? obj Zone)
              obj
            (let ((title (if (string? obj) obj "Unable to connect to server")))
              (report-exception self title obj)))))))
  
  
  @customize
  (method (info-text self view)
    (let ((interface (current-interface)))
      (locate (child interface view) 'text)))
  
  
  @customize
  (method (text-content self text)
    (let ((content (get-string-content text)))
      (if (empty-string? content)
          #f
        content)))
  
  
  @customize
  (method (text-content-set self text content)
    (set-string-content text (->string content)))
  
  
  @customize
  (method package (tab-stops self)
    (case stage
      ((customize) (remote-stops self))
      (else #f))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


@change-display-alias
(class Name-Label extends Label-View
  
  
  (slot image initialize #f getter generate)
  
  
  (method (cache-image self)
    (or image
        (let ((img (new Image resource: {Image-Resource "Modified"} portfolio: (resolve-nickname :images))))
          (set! image img)
          img)))
  
  
  (method override (preferred-size self)
    (let ((size (nextmethod self)))
      (new Dimension (+ (get-width size) 42) (get-height size))))
  
  
  (method override (mouse-enter self)
    (invalidate-view self))
  
  (method override (mouse-leave self)
    (invalidate-view self))
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (draw self surface context)
    (nextmethod self surface context)
    (when (eq? (get-mouse-in) self)
      (let ((size (preferred-size self)))
        (draw-at (cache-image self) surface context (- (get-width size) 16) 4)))))


;;;
;;;; Info-Label
;;;


@customize
(class Info-Label extends Label-View
  
  
  (form
    (<install> size: {Dimension 150 16} color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info-View
;;;


@customize
(class Info-View extends Border-View
  
  
  (form
    (<install>                          size: {Dimension 150 19} border-type: edge style: entry
      (<Scroller-View>                  hscroll?: #f vscroll?: #f
        (<content~>                     layout-type: fill
          (<World-Text-View> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method override (get-tab-stops self)
    (let ((zone (current-zone)))
      (tab-stops zone)))
  
  
  (method (on-return self evt)
    (let ((zone (current-zone)))
      (info-return zone)))))
