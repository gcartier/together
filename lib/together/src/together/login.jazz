;;;============
;;;  Together
;;;============
;;;
;;;; Login Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.login jazz


(import (jazz.action)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.time)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.build)
        (world.camera)
        (world.client)
        (world.context)
        (world.geometry)
        (world.interface)
        (world.interface.avatars)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.exception)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.text)
        (world.io)
        (world.settings)
        (world.skybox)
        (world.space)
        (world.task)
        (world.window)
        (together.customize)
        (together.settings)
        (together.space)
        (together.zone))


(definition together-host
  (world-setting 'together.default-host "togethersphere.com"))

(definition together-port
  (world-setting 'together.default-port default-server-service))


(class Login-Space extends Together-Space
  
  
  (slot zone                         getter generate)
  (slot view-focused   initialize #f getter generate)
  (slot changing-name? initialize #f getter generate)
  
  
  (method override (initialize self zone)
    (nextmethod self)
    (set! self.zone zone))
  
  
  (method override (show-me? self)
    #f)
  
  
  (method override (showcase-avatar? self)
    (not (top-frame)))
  
  
  (method override (showcase-avatar-y self avatar)
    -3.8)
  
  
  (method override (showcase-avatar-scaling self avatar)
    (if orb-avatars?
        .8
      (cond ((equal? avatar "warcraft/character/draeneifemale")
             .75)
            ((equal? avatar "warcraft/character/nightelffemale")
             .75)
            ((equal? avatar "warcraft/creature/cat")
             .85)
            (else
             .8))))
  
  
  (method override (showcase-avatars? self)
    #f)
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((version (process-version (current-process)))
              (date (build-short-date))
              (name (get-character-name configuration)))
          (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
            (new Label-View name: 'welcome parent: root title: "Together" location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
            (new Version-Label name: 'version parent: root title: (format "v{a}{a}" (present version) environment-suffix) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
            (new Version-Label name: 'date parent: root title: date location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
            (new Toggle-Button name: 'about parent: root title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-about self))
            (new Push-Button name: 'quit parent: root title: "Quit" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-quit self))
            (new Kind-Label name: 'new-label parent: root title: "Please enter your name" location: '(center (center -188)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'tail)
            (new Name-View name: 'new-name parent: root location: '(center (center -158)) action-view: 'new-enter invalid-view: 'new-invalid name-label: "Name" max-length: 30)
            (new Name-Invalid name: 'new-invalid parent: root location: '(center (center -136)) size: {Dimension 400 16} font: {Font Label-User point-size: 12.5 antialias: default})
            (new Push-Button name: 'new-enter parent: root title: "Enter" enabled?: #f location: '(center (center -100)) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-enter-press self))
            (new Name-Label name: 'name parent: root title: name location: '(center (center -140)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'center)
            (new Push-Button name: 'enter parent: root title: "Enter" location: '(center (center -100)) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-enter-press self))
            (new Push-Button name: 'customize parent: root title: "Change Avatar" location: '(center -30) size: {Dimension 180 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-customize self))
            (set! self.root root)
            (update-name-views self)
            (add-exception-view))
          (when (not name)
            (delay-event
              (lambda ()
                (acquire-focus (locate (child root 'new-name) 'text)))))
          (layout-view interface)
          (layout-view root)
          (show root)
          (send-to-back root)
          (set-unbind-camera? #f)
          (focus-world)))))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (goto-showcase world 'avatars)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (let ((interface (current-interface)))
      (close root)
      (for-each hide (get-children interface))))
  
  
  (define-trait login-bindings Bindings
    (<Trait>                   name: login
      (<install>
        (<world-main!>
          (<!>                 name: bindings-viewer            active?: #t)
          (<!>                 name: quit-world                 active?: #t))
        (<world-interface!>
          (<!>                 name: toggle-windowed-mode       active?: #t)))))
  
  
  (method override (space-bindings self)
    (list login-bindings))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-interface))
            (nextmethod self)))
  
  
  (method override (mouse-track self elapse dx dy)
    (let ((world (current-world)))
      (track-avatar (get-showcase world) dx dy))
    #t)

  
  (method (on-enter-press self evt)
    (enter-press self))
  
  
  (method (on-customize self evt)
    (goto-space zone 'customize))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
    
  
  (method override (enter-press self)
    (let ((configuration (get-configuration zone)))
      (cond ((not (get-character-name configuration))
             (update-configuration-name self)
             (save-configuration zone)
             (update-name-views self)
             (open-configuration zone (user-client-file)))
            (changing-name?
             (update-configuration-name self)
             (save-configuration zone)
             (end-change-name self)
             (open-configuration zone (user-client-file)))
            (else
             (open-configuration zone (user-client-file))))))
  
  
  (method override (tab-press self)
    )
  
  
  (method override (escape-press self)
    (let ((frame (top-frame)))
      (when frame
        (close frame)))
    #t)

  
  (method (update-name-views self)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not (get-character-name configuration)) changing-name?)))
          (set-visible? (child root 'new-label) new?)
          (set-visible? (child root 'new-name) new?)
          (set-visible? (child root 'new-invalid) new?)
          (set-visible? (child root 'new-enter) new?)
          (set-visible? (child root 'name) (not new?))
          (set-visible? (child root 'enter) (not new?))
          (when configuration
            (let ((name (and configuration (get-character-name configuration))))
              (set-title (child root 'name) name)
              (layout-view root)))))))
  
  
  (method package (change-name self)
    (let ((configuration (get-configuration zone)))
      (let ((actual-name (get-character-name configuration)))
        (set! changing-name? #t)
        (set-title (child root 'new-label) "Please enter your new name")
        (set-string-content (locate (child root 'new-name) 'text) actual-name)
        (set-enabled? (child root 'new-enter) (not (whitespace? actual-name)))
        (update-name-views self)
        (layout-view root)
        (acquire-focus (locate (child root 'new-name) 'text)))))
  
  
  (method package (end-change-name self)
    (when changing-name?
      (set! changing-name? #f)
      (set-title (child root 'new-label) "Please enter your name")
      (set-title (child root 'new-invalid) "")
      (update-name-views self)
      (layout-view root)
      (focus-world)))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not (get-character-name configuration)) changing-name?)))
          (define (closer frame)
            (let ((customize (find-component root 'customize)))
              (cond (new?
                     (set-visible? (child root 'new-label) #t)
                     (set-visible? (child root 'new-name) #t)
                     (set-visible? (child root 'new-invalid) #t)
                     (set-visible? (child root 'new-enter) #t)
                     (when customize
                       (set-visible? customize #t))
                     (when view-focused
                       (inhibit-focus-selects-all view-focused
                         (lambda ()
                           (acquire-focus view-focused)))))
                    (else
                     (set-visible? (child root 'name) #t)
                     (set-visible? (child root 'enter) #t)
                     (when customize
                       (set-visible? customize #t))))))
          
          (let ((frame (top-frame)))
            (if (is? frame World-Document)
                (begin
                  (close frame)
                  (closer frame))
              (show-about self closer: closer)))))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not (get-character-name configuration)) changing-name?)))
          (let ((customize (find-component root 'customize)))
            (cond (new?
                   (set! view-focused (active-focus))
                   (set-visible? (child root 'new-label) #f)
                   (set-visible? (child root 'new-name) #f)
                   (set-visible? (child root 'new-invalid) #f)
                   (set-visible? (child root 'new-enter) #f)
                   (when customize
                     (set-visible? customize #f)))
                  (else
                   (set-visible? (child root 'name) #f)
                   (set-visible? (child root 'enter) #f)
                   (when customize
                     (set-visible? customize #f)))))
          (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))))
  
  
  (method (extract-new-name self)
    (let ((interface (current-interface)))
      (let ((view (child root 'new-name)))
        (let ((text (locate view 'text)))
          (trim-whitespace (get-string-content text))))))
    
  
  (method (update-configuration-name self)
    (let ((configuration (get-configuration zone))
          (name (extract-new-name self)))
      (set-character-name configuration name)))
  
  
  (method override (name-return self)
    (let ((configuration (get-configuration zone)))
      (if (not (get-character-name configuration))
          (begin
            (update-configuration-name self)
            (save-configuration zone)
            (update-name-views self))
        (update-configuration-name self)
        (save-configuration zone)
        (end-change-name self))))
  
  
  (method override (name-escape self)
    (end-change-name self)))


(class Login-Zone extends Zone
  
  
  (slot spaces         initialize #f getter generate)
  (slot space          initialize #f getter generate)
  (slot configuration  initialize #f getter generate)
  
  
  (form
    (<install> sun-cycle?: #f start-grid?: #f draw-grid?: #f))
  
  
  (method (need-space self what)
    (or (table-ref spaces what #f)
        (let ((space (case what
                       ((login) (new Login-Space self))
                       ((customize) (new Customize-Space self)))))
          (space-setup space)
          (table-set! spaces what space)
          space)))
  
  
  (method protected (goto-space self what)
    (space-deactivate (current-space))
    (space-uninstall (current-space))
    (set! space (need-space self what))
    (space-install space)
    (set-current-space space)
    (space-activate space)
    space)
  
  
  (method override (setup-space self)
    (setup-configuration self)
    (let ((avatar-change? (setup-avatar self)))
      (set! spaces (make-table test: eq?))
      (when (current-space+)
        (space-deactivate (current-space))
        (space-uninstall (current-space)))
      (set! space (need-space self 'login))
      (space-install space)
      (set-current-space space)
      (space-activate space)
      (when avatar-change?
        (save-configuration self))))
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (let ((world (current-world)))
      (set-escape-hook world (~ escape-press self))))
  
  
  (method override (destroy self)
    (let ((world (current-world)))
      (no-showcase world)
      (set-enter-hook world #f)
      (set-escape-hook world #f)
      (uninstall-vista))
    (nextmethod self))
  
  
  (method override (prepare-skybox self)
    (set! skybox (let ((skybox (find-skybox together-skybox)))
                   (prepare skybox)
                   skybox)))
  
  
  (method override (camera-update self)
    (nextmethod self)
    (when (window?)
      (install-vista)))
  
  
  (method package (setup-configuration self)
    (let ((file (user-client-file)))
      (set! configuration (if (exists? file)
                              (instantiate (read-form file))
                            (create-configuration self)))))
  
  
  (method (setup-avatar self)
    (let ((me (current-me)))
      (if (get-character-avatar configuration)
          (begin
            (set-avatar me (get-character-avatar configuration))
            #f)
        (let ((avatar (random-element (collect-avatar-models))))
          (set-character-avatar configuration avatar)
          (set-avatar me avatar)
          #t))))
    
  
  (method override (welcome? self)
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (escape-press self)
    (let ((space (current-space)))
      (escape-press space)))
  
  
  (method package (create-configuration self)
    (new Client
      server-host: (string->host "localhost") @w together-host
      server-service: (string->port "50000") @w together-port
      character-name: #f
      character-avatar: #f
      character-script: #f
      character-zone: 'start))

  
  (method package (save-configuration self)
    (let ((file (user-client-file)))
      (let ((server-address (get-server-host configuration))
            (server-port (get-server-service configuration))
            (name (get-character-name configuration))
            (avatar (get-character-avatar configuration))
            (script (get-character-script configuration))
            (zone (get-character-zone configuration)))
        (save-client-file file server-address server-port name avatar script zone))))

  
  (method package (open-configuration self file)
    (with-window-cursor :wait
      (lambda ()
        (clear-exception)
        (open-circle-zone file from-login?: #t)))))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((space (current-space)))
      (change-name space)))))
