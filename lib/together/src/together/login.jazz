;;;============
;;;  Together
;;;============
;;;
;;;; Login Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.login jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.time)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.build)
        (world.camera)
        (world.client)
        (world.client.tier)
        (world.context)
        (world.geometry)
        (world.interface)
        (world.interface.avatars)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.exception)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.text)
        (world.io)
        (world.settings)
        (world.skybox)
        (world.space)
        (world.task)
        (world.window)
        (together.customize)
        (together.settings)
        (together.space)
        (together.zone))


(define-trait login-bindings Bindings
  (<Trait>                   name: login
    (<install>
      (<world-main!>
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-windowed-mode       active?: #t)))))


(class Login-Space extends Together-Space
  
  
  (slot zone                        getter generate)
  (slot view-focused  initialize #f getter generate)
  (slot changing-key? initialize #f getter generate)
  (slot changing-key  initialize #f getter generate)
  
  
  (method override (initialize self zone)
    (nextmethod self)
    (set! self.zone zone))
  
  
  (method override (show-me? self)
    #f)
  
  
  (method override (draw-message-offset self)
    120)
  
  
  (method override (showcase-avatar? self)
    (not (top-frame)))
  
  
  (method override (showcase-avatar-y self avatar)
    -3.8)
  
  
  (method override (showcase-avatar-scaling self avatar)
    (if orb-avatars?
        .8
      (cond ((equal? avatar "warcraft/character/draeneifemale")
             .75)
            ((equal? avatar "warcraft/character/nightelffemale")
             .75)
            ((equal? avatar "warcraft/creature/cat")
             .85)
            (else
             .8))))
  
  
  (method override (showcase-avatars? self)
    #f)
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((version (process-version (current-process)))
              (date (build-short-date))
              (key (get-personal-key configuration)))
          (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
            (new Label-View name: 'welcome parent: root title: "Together" location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
            (new Version-Label name: 'version parent: root title: (format "v{a}{a}" (present version) environment-suffix) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
            (new Version-Label name: 'date parent: root title: date location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12.5 shadow: thin})
            (new Toggle-Button name: 'about parent: root title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-about self))
            (new Push-Button name: 'quit parent: root title: "Quit" location: '(30 -30) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-quit self))
            (new Kind-Label name: 'new-label parent: root title: "Please enter your personal key" location: '(center (center -188)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'tail)
            (new Key-View name: 'new-key parent: root location: '(center (center -158)) size: {Dimension 350 24} action-view: 'new-enter invalid-view: 'new-invalid)
            (new Key-Invalid name: 'new-invalid parent: root location: '(center (center -136)) size: {Dimension 410 16} font: {Font Label-User point-size: 12.5 antialias: default})
            (new Push-Button name: 'new-enter parent: root title: "Enter" enabled?: #f location: '(center (center -100)) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-enter-press self))
            (new Key-Label name: 'key parent: root title: key location: '(center (center -140)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 19.5 antialias: default} justification: 'center)
            (new Push-Button name: 'enter parent: root title: "Enter" location: '(center (center -100)) size: {Dimension 180 36} font: {Font Label-User point-size: 16.5 antialias: default} action-handler: (~ on-enter-press self))
            (new Push-Button name: 'customize parent: root title: "Change Avatar" location: '(center -30) size: {Dimension 180 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-customize self))
            (set! self.root root)
            (update-key-views self)
            (add-exception-view))
          (when (not key)
            (delay-event
              (lambda ()
                (acquire-focus (locate (child root 'new-key) 'text)))))
          (layout-view interface)
          (layout-view root)
          (show root)
          (send-to-back root)
          (set-unbind-camera? #f)
          (focus-world)))))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (goto-showcase world 'avatars)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (set! changing-key (and changing-key? (get-string-content (locate (child root 'new-key) 'text))))
    (close root)
    (hide-interface))
  
  
  (method override (space-bindings self)
    (list login-bindings))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-interface))
            (nextmethod self)))
  
  
  (method override (mouse-track self elapse dx dy)
    (let ((world (current-world)))
      (track-avatar (get-showcase world) dx dy))
    #t)

  
  (method (on-enter-press self evt)
    (enter-press self))
  
  
  (method (on-customize self evt)
    (goto-space zone 'customize))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
    
  
  (method override (enter-press self)
    (let ((configuration (get-configuration zone)))
      (cond ((not (get-personal-key configuration))
             (update-configuration-key self)
             (save-configuration zone)
             (update-key-views self)
             (open-configuration zone (user-client-file)))
            (changing-key?
             (update-configuration-key self)
             (save-configuration zone)
             (end-change-key self)
             (open-configuration zone (user-client-file)))
            (else
             (open-configuration zone (user-client-file))))))
  
  
  (method override (tab-press self)
    )
  
  
  (method override (escape-press self)
    (let ((frame (top-frame)))
      (when frame
        (close frame)))
    #t)

  
  (method (update-key-views self)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not (get-personal-key configuration)) changing-key?)))
          (set-visible? (child root 'new-label) new?)
          (set-visible? (child root 'new-key) new?)
          (set-visible? (child root 'new-invalid) new?)
          (set-visible? (child root 'new-enter) new?)
          (set-visible? (child root 'key) (not new?))
          (set-visible? (child root 'enter) (not new?))
          (when (and changing-key? changing-key)
            (set-string-content (locate (child root 'new-key) 'text) changing-key)
            (set-enabled? (child root 'new-enter) (not (whitespace? changing-key)))
            (delay-event
              (lambda ()
                (acquire-focus (locate (child root 'new-key) 'text)))))
          (when configuration
            (let ((key (and configuration (get-personal-key configuration))))
              (set-title (child root 'key) (and key (substring key 0 (min 8 (string-length key)))))
              (layout-view root)))))))
  
  
  (method package (change-key self)
    (let ((configuration (get-configuration zone)))
      (let ((actual-key (get-personal-key configuration)))
        (set! changing-key? #t)
        (set-string-content (locate (child root 'new-key) 'text) actual-key)
        (set-enabled? (child root 'new-enter) (not (whitespace? actual-key)))
        (update-key-views self)
        (layout-view root)
        (acquire-focus (locate (child root 'new-key) 'text)))))
  
  
  ;; hack around focus-selects-all? not done during window activation
  (method package (change/focus-key self)
    (change-key self)
    (select-all (locate (child root 'new-key) 'text)))
  
  
  (method package (end-change-key self)
    (when changing-key?
      (set! changing-key? #f)
      (set-title (child root 'new-invalid) "")
      (update-key-views self)
      (layout-view root)
      (focus-world)))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not (get-personal-key configuration)) changing-key?)))
          (define (closer frame)
            (let ((customize (find-component root 'customize)))
              (cond (new?
                     (set-visible? (child root 'new-label) #t)
                     (set-visible? (child root 'new-key) #t)
                     (set-visible? (child root 'new-invalid) #t)
                     (set-visible? (child root 'new-enter) #t)
                     (when customize
                       (set-visible? customize #t))
                     (when view-focused
                       (inhibit-focus-selects-all view-focused
                         (lambda ()
                           (acquire-focus view-focused)))))
                    (else
                     (set-visible? (child root 'key) #t)
                     (set-visible? (child root 'enter) #t)
                     (when customize
                       (set-visible? customize #t))))))
          
          (let ((frame (top-frame)))
            (if (is? frame World-Document)
                (begin
                  (close frame)
                  (closer frame))
              (show-about self closer: closer)))))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((configuration (get-configuration zone)))
        (let ((new? (or (not (get-personal-key configuration)) changing-key?)))
          (let ((customize (find-component root 'customize)))
            (cond (new?
                   (set! view-focused (active-focus))
                   (set-visible? (child root 'new-label) #f)
                   (set-visible? (child root 'new-key) #f)
                   (set-visible? (child root 'new-invalid) #f)
                   (set-visible? (child root 'new-enter) #f)
                   (when customize
                     (set-visible? customize #f)))
                  (else
                   (set-visible? (child root 'key) #f)
                   (set-visible? (child root 'enter) #f)
                   (when customize
                     (set-visible? customize #f)))))
          (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))))
  
  
  (method (extract-new-key self)
    (let ((interface (current-interface)))
      (let ((view (child root 'new-key)))
        (let ((text (locate view 'text)))
          (trim-whitespace (get-string-content text))))))
    
  
  (method (update-configuration-key self)
    (let ((configuration (get-configuration zone))
          (key (extract-new-key self)))
      (set-personal-key configuration key)))
  
  
  (method package (key-return self)
    (let ((configuration (get-configuration zone)))
      (if (not (get-personal-key configuration))
          (begin
            (update-configuration-key self)
            (save-configuration zone)
            (update-key-views self))
        (update-configuration-key self)
        (save-configuration zone)
        (end-change-key self)
        (open-configuration zone (user-client-file)))))
  
  
  (method package (key-escape self)
    (end-change-key self)))


(class Login-Zone extends Zone
  
  
  (slot spaces         initialize #f getter generate)
  (slot space          initialize #f getter generate)
  (slot configuration  initialize #f getter generate)
  
  
  (form
    (<install> sun?: #f start-grid?: #f draw-grid?: #f))
  
  
  (method (need-space self what)
    (or (table-ref spaces what #f)
        (let ((space (case what
                       ((login) (new Login-Space self))
                       ((customize) (new Customize-Space self)))))
          (space-setup space)
          (table-set! spaces what space)
          space)))
  
  
  (method protected (goto-space self what)
    (space-deactivate (current-space))
    (space-uninstall (current-space))
    (set! space (need-space self what))
    (space-install space)
    (set-current-space space)
    (space-activate space)
    space)
  
  
  (method override (setup-space self)
    (setup-configuration self)
    (let ((avatar-change? (setup-avatar self)))
      (set! spaces (make-table test: eq?))
      (when (current-space+)
        (space-deactivate (current-space))
        (space-uninstall (current-space)))
      (set! space (need-space self 'login))
      (space-install space)
      (set-current-space space)
      (space-activate space)
      (when avatar-change?
        (save-configuration self))))
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (let ((world (current-world)))
      (set-escape-hook world (~ escape-press self))))
  
  
  (method override (destroy self)
    (let ((world (current-world)))
      (no-showcase world)
      (set-enter-hook world #f)
      (set-escape-hook world #f)
      (uninstall-vista))
    (nextmethod self))
  
  
  ;; kind of poor man solution for the moment as this will
  ;; not change the atlas after going through the login zone
  (method override (prepare-pack self)
    (prepare-pack/tile self
                       #f
                       #f))
  
  
  (method override (prepare-skybox self)
    (set! skybox (let ((skybox (find-skybox "world/nebula")))
                   (prepare skybox)
                   skybox)))
  
  
  (method override (camera-update self)
    (nextmethod self)
    (when (window?)
      (install-vista)))
  
  
  (method package (setup-configuration self)
    (let ((file (user-client-file)))
      (set! configuration (if (exists? file)
                              (instantiate (read-form file))
                            (create-configuration self)))))
  
  
  (method (setup-avatar self)
    (let ((me (current-me)))
      (if (get-character-avatar configuration)
          (begin
            (set-avatar me (get-character-avatar configuration))
            #f)
        (let ((avatar (random-element (collect-avatar-models))))
          (set-character-avatar configuration avatar)
          (set-avatar me avatar)
          #t))))
    
  
  (method override (login? self)
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (escape-press self)
    (let ((space (current-space)))
      (escape-press space)))
  
  
  (method package (create-configuration self)
    (new Client
      personal-key: #f
      character-name: #f
      character-avatar: #f
      character-script: #f
      character-zone: 'start))

  
  (method package (save-configuration self)
    (let ((file (user-client-file)))
      (let ((server-address (get-server-host configuration))
            (server-port (get-server-service configuration))
            (key (get-personal-key configuration))
            (name (get-character-name configuration))
            (avatar (get-character-avatar configuration))
            (script (get-character-script configuration))
            (zone (get-character-zone configuration)))
        (save-client-file file server-address server-port key name avatar script zone))))
  
  
  (method package (open-configuration self file)
    (with-window-cursor :wait
      (lambda ()
        (clear-exception)
        (let ((obj (open-client file)))
          (if (is? obj Zone)
              (begin
                (working (current-world)
                  (lambda ()
                    (retrieve-critical-assets)))
                (enter-together #f)
                (let ((tier (current-tier)))
                  (when (is? tier Client-Tier)
                    (upload-assets tier 'world)
                    (upload-assets tier 'zone))))
            (let ((title (if (string? obj) obj "Unable to connect to server")))
              (report-exception title obj)
              (check-invalid-key-exception self title)))))))
  
  
  (method package (check-invalid-key-exception self title)
    ;; quick solution to use exception title
    (when (equal? title "Invalid personal key")
      (change/focus-key (current-space)))))


;;;
;;;; Key-Label
;;;


(class Key-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre})
  
  
  (method override (mouse-up self evt)
    (let ((space (current-space)))
      (change-key space))))


;;;
;;;; Key-View
;;;


(class Key-View extends Border-View
  
  
  (property action-view  initialize #f accessors generate)
  (property invalid-view initialize #f accessors generate)
  
  
  (form
    (<install>                    size: {Dimension 250 24} border-type: edge style: entry @border-type: solid @border-color: {Color Medium-Gray}
      (<Scroller-View>            hscroll?: #f vscroll?: #f
        (<content~>               layout-type: fill
          (<Name-Text> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return} escape-press-handler: {Event-Handler :form on-escape})))))
  
  
  (method (on-content-change self evt)
    (content-changed self))
  
  
  (method (content-changed self)
    (define (key-invalid key)
      (cond ((empty-string? key)
             "")
            ((not (every? (lambda (c)
                            (or (eqv? c #\-)
                                (alphanumeric? c)))
                          key))
             "Key can only contain letters, numbers and dashes")
            (else
             #f)))
    
    (let ((space (current-space)))
      (let ((text (locate self 'text)))
        (let ((key (trim-whitespace (get-string-content text))))
          (let ((invalid (key-invalid key)))
            (set-enabled? (child (get-root space) action-view) (not invalid))
            (set-title (brother self invalid-view) (or invalid "")))))))
  
  
  (method (on-return self evt)
    (let ((space (current-space)))
      (when (get-enabled? (child (get-root space) action-view))
        (key-return space))))
  
  
  (method (on-escape self evt)
    (let ((space (current-space)))
      (key-escape space))))


;;;
;;;; Key-Invalid
;;;


(class Key-Invalid extends Label-View
  
  
  (form
    (<install> justification: center))
  
  
  (method override (text-color self)
    {Color World-Red})))
