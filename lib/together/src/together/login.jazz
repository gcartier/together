;;;============
;;;  Together
;;;============
;;;
;;;; Login Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.login jazz


(import (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.context)
        (world.geometry)
        (world.interface.clients)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.servers)
        (world.interface.text)
        (world.interface.templates)
        (world.interface.tiers)
        (world.io)
        (world.music)
        (world.settings)
        (world.skybox)
        (world.task)
        (world.window)
        (together.settings))


(definition together-host
  "together.circlingottawa.ca")

(definition together-service
  50000)


(definition protected stage
  #f)


(class Login-Zone extends Zone
  
  
  (slot preserved-music    initialize #f getter generate)
  (slot preserved-ambience initialize #f getter generate)
  (slot configuration      initialize #f getter generate)
  (slot use-sphere?        initialize #f getter generate)
  (slot name-focused?      initialize #f getter generate)
  (slot post-accept        initialize #f accessors generate)
  
  
  (form
    (<install> sun-cycle?: #f))
  
  
  (method override (welcome? self)
    #t)
  
  
  (method override (mute-audio? self)
    #t)
  
  
  (method override (zone-ready self)
    (nextmethod self)
    (let ((window (current-window))
          (world (current-world)))
      (setup-stage self)
      (setup-configuration self)
      (install-stage self)
      (set-escape-hook world (lambda () (close-frame self)))
      (set-draw-me? self #f)
      ;; remove tearing in the camera pathing
      (enable-vsync window)))
  
  
  (method override (destroy self)
    (let ((window (current-window))
          (world (current-world)))
      (uninstall-stage self)
      (no-showcase world)
      (set-enter-hook world #f)
      (set-escape-hook world #f)
      (set-draw-me? self #t)
      (uninstall-camera)
      (disable-vsync window))
    (nextmethod self))
  
  
  (method (setup-stage self)
    (set! stage 'login))
  
  
  (method (setup-configuration self)
    (let ((file (together-file)))
      (set! configuration (and (exists? file) (instantiate (read-form file))))))
  
  
  (method override (camera-update self)
    (nextmethod self)
    (install-camera))
  
  
  (method override (title-update self)
    (when (window?)
      (let ((window (current-window)))
        (set-caption window "Together"))))
  
  
  (method override (show-belt? self)
    #f)
  
  
  (method override (show-compass? self)
    #f)
  
  
  (method override (show-combat? self)
    #f)
  
  
  (method override (about-size self)
    {Dimension 715 370})
  
  
  (method (install-stage self)
    (let ((interface (current-interface))
          (world (current-world)))
      (for-each (lambda (child)
                  (set-visible? child #f))
                (get-children interface)))
    (case stage
      ((login)
       (install-login self))
      ((customize)
       (install-customize self))))
  
  
  (method (install-login self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version (current-process)))
            (release (process-release (current-process)))
            (name (and configuration (get-character-name configuration))))
        (new Label-View name: 'welcome parent: interface title: "Together" location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present version)) location: '(30 -90) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(30 -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Toggle-Button name: 'about parent: interface title: "About & Copyright" location: '(-30 -30) size: {Dimension 160 24} action-handler: (~ on-about self))
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(30 -30) size: {Dimension 100 24} action-handler: (~ on-quit self))
        (cond ((not name)
               (new Name-Label name: 'name-label parent: interface title: "Please enter your name" location: '(center (center -90)) size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 18.5 shadow: thin} justification: 'tail)
               (new Name-View name: 'name parent: interface location: '(center (center -60)))
               (new Push-Button name: 'enter parent: interface title: "Enter" enabled?: #f location: '(center center) size: {Dimension 180 36} font: {Font Label-User point-size: 15.5} action-handler: (~ on-enter-press self))
               (delay-event
                 (lambda ()
                   (acquire-focus (locate (child interface 'name) 'text)))))
              (else
               (new Name-Label name: 'name parent: interface title: name location: '(center (center -40)) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: 'center)
               (new Push-Button name: 'enter parent: interface title: "Enter" location: '(center center) size: (if name {Dimension 180 36} {Dimension 240 36}) font: {Font Label-User point-size: 15.5} action-handler: (~ on-enter-press self))))
        @w (when name
          (new Push-Button name: 'customize parent: interface title: "Customize" location: '(center -40) size: {Dimension 140 24} action-handler: (~ on-customize self)))
        (add-exception-view self)
        (layout-view interface)
        (no-showcase world))))
  
  
  (method (install-customize self)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Label-View name: 'welcome parent: interface title: tier-title location: '(40 30) size: {Dimension 400 80} font: {Font font-name: tahoma point-size: 60 shadow: thin})
      (new Info-Label name: 'server-address-label parent: interface title: "Server Address" location: '(-40 -240) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-address parent: interface location: '(-40 -220))
      (new Info-Label name: 'server-port-label parent: interface title: "Server Port" location: '(-40 -200) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-port parent: interface location: '(-40 -180))
      (new Info-Label name: 'name-label parent: interface title: "Name" location: '(-40 -140) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'name parent: interface location: '(-40 -120))
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) size: {Dimension 100 24} action-handler: (~ on-back self))
      (new Push-Button name: 'create parent: interface title: "Enter" location: '(-40 -40) size: {Dimension 100 24} action-handler: (~ on-create-remote self))
      (text-content-set self (info-text self 'server-address) (host->string together-host))
      (text-content-set self (info-text self 'server-port) (port->string together-service))
      (add-exception-view self)
      (layout-view interface)
      (when use-sphere?
        (goto-showcase world 'avatars))
      (delay-event
        (lambda ()
          (acquire-focus (locate (child interface 'name) 'text))))))
  
  
  (method (uninstall-stage self)
    (let ((interface (current-interface))
          (world (current-world)))
      (setup-interface world)))
  
  
  (method (add-exception-view self)
    (let ((interface (current-interface)))
      (new Exception-Label name: 'exception parent: interface title: "" location: '(center 107) size: {Dimension 600 40} font: {Font font-name: tahoma point-size: 28 shadow: thin} justification: 'center)))
  
  
  (method (find-exception-view self)
    (let ((interface (current-interface)))
      (child interface 'exception)))
  
  
  (method package (report-exception self title exc)
    (let ((view (find-exception-view self)))
      (set-title view title)
      (set-exception view exc)))
  
  
  (method (clear-exception self)
    (let ((view (find-exception-view self)))
      (set-title view "")
      (set-exception view #f)))
  
  
  (method (close-frame self)
    (let ((frame (top-frame)))
      (when frame
        (close frame)))
    #t)
  
  
  (method override (start-music self)
    (let ((music (current-music)))
      (when (get-music? music)
        (set! preserved-music (list (get-music-style music) (get-music-volume music)))
        (set-music-style music "minecraft/music/menu")
        (set-music-volume music .5)
        (change-music music))))
  
  
  (method override (start-ambience self)
    (let ((ambience (current-ambience)))
      (set! preserved-ambience (list (get-ambience? ambience)))
      (set-ambience? ambience #f)))
  
  
  (method override (stop-music self)
    (nextmethod self)
    (let ((music (current-music)))
      (when (get-music? music)
        (bind (music-style music-volume) preserved-music
          (set-music-style music music-style)
          (set-music-volume music music-volume)))))
  
  
  (method override (stop-ambience self)
    (nextmethod self)
    (let ((ambience (current-ambience)))
      (bind (ambience?) preserved-ambience
        (set-ambience? ambience ambience?))))
  
  
  (method override (prepare-skybox self)
    (set! skybox (let ((skybox (find-skybox "nebula")))
                   (prepare skybox)
                   skybox)))
  
  
  (method override (player-task self task <Task>)
    (with-task task
      (lambda (exit)
        (task-sleep task +infinity 0. exit))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-track self elapse dx dy)
    (when (memq? stage '(customize))
      (let ((world (current-world)))
        (let ((entity (get-selection-entity (get-showcase world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat entity))
                (up (get-world-up world)))
            (set-lookat entity (rotate-lookat& lookat angle up))
            (update-matrix entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-accept self evt)
    (process-copyright-update (current-process))
    (if post-accept
        (post-accept)
      (goto-stage self 'login)))
  
  
  (method (on-decline self evt)
    (quit-process (current-process)))
  
  
  (method (on-enter-press self evt)
    (enter-press self))
  
  
  (method override (enter-press self)
    (cond ((not configuration)
           (let ((interface (current-interface)))
             (let ((view (child interface 'name)))
               (let ((text (locate view 'text)))
                 (let ((content (get-string-content text)))
                   (unless (empty-string? content)
                     (create-default-remote self content)))))))
          (else
           (let ((file (together-file)))
             (if (exists? file)
                 (remote-open self file)
               (set! use-sphere? (shift-down?))
               (goto-stage self 'customize)
               (text-content-set self (info-text self 'server-port) (port->string together-service)))))))
  
  
  (method (on-customize self evt)
    (set! use-sphere? (shift-down?))
    (change-remote self (together-file)
      (if configuration (get-server-host configuration) together-host)
      (if configuration (get-server-service configuration) together-service)))
  
  
  (method (change-remote self file server-address server-port)
    (let ((world (current-world)))
      (when (exists? file)
        (let ((configuration (instantiate (read-form file))))
          (let ((name (get-character-name configuration))
                (avatar (and use-sphere? (get-character-avatar configuration))))
            (goto-stage self 'customize)
            (text-content-set self (info-text self 'server-address) (host->string server-address))
            (text-content-set self (info-text self 'server-port) (port->string server-port))
            (text-content-set self (info-text self 'name) name)
            (when use-sphere?
              (let ((showcase (get-showcase world)))
                (let ((avatar (find-avatar showcase avatar)))
                  (when avatar
                    (set-selection showcase avatar)
                    (selection-update showcase avatar)))))
            (delay-event
              (lambda ()
                (acquire-focus (info-text self 'name)))))))))
  
  
  (method (on-about self evt)
    (let ((interface (current-interface)))
      (define (closer frame)
        (cond ((not configuration)
               (set-visible? (child interface 'name-label) #t)
               (set-visible? (child interface 'name) #t)
               (set-visible? (child interface 'enter) #t)
               (when name-focused?
                 (acquire-focus (locate (child interface 'name) 'text))))
              (else
               (set-visible? (child interface 'name) #t)
               (set-visible? (child interface 'enter) #t))))
      
      (let ((frame (top-frame)))
        (if (is? frame World-Document)
            (begin
              (close frame)
              (closer frame))
          (show-about self closer: closer)))))
  
  
  (method (show-about self (title: title #f) (closable?: closable? #t) (closer: closer #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (cond ((not configuration)
             (set! name-focused? (eq? (active-focus) (locate (child interface 'name) 'text)))
             (set-visible? (child interface 'name-label) #f)
             (set-visible? (child interface 'name) #f)
             (set-visible? (child interface 'enter) #f))
            (else
             (set-visible? (child interface 'name) #f)
             (set-visible? (child interface 'enter) #f)))
      (open-about world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? closer: closer background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  (method (on-back self evt)
    (goto-stage self (case stage
                       ((customize) 'login))))
  
  
  (method (goto-stage self what)
    (uninstall-stage self)
    (set! stage what)
    (install-stage self))
  
  
  (method (selected-avatar self)
    (let ((world (current-world)))
      (get-model (get-selection-entity (find-showcase world 'avatars)))))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  (method (on-create-remote self evt)
    (create-remote self))
  
  
  (method package (create-remote self)
    (let ((fields (remote-fields self)))
      (let ((client-name "Together")
            (contents (map (lambda (field)
                             (bind (label view) field
                               (text-content self (info-text self view))))
                           fields))
            (avatar (and use-sphere? (selected-avatar self)))
            (script #f)
            (zone (if use-sphere?
                      '(zone "Sphere")
                    '(zone "Circle"))))
        (bind (server-address server-port name) contents
          (let ((file (create-client-file client-name server-address server-port name avatar script zone)))
            (setup-configuration self)
            (remote-open self file))))))
  
  
  (method package (create-default-remote self name)
    (let ((client-name "Together")
          (server-address "togethersphere.com")
          (server-port "50000")
          (avatar #f)
          (script #f)
          (zone '(zone "Circle")))
      (let ((file (create-client-file client-name server-address server-port name avatar script zone)))
        (setup-configuration self)
        (remote-open self file))))
  
  
  (method (remote-fields self)
    '((server-address-label server-address #t)
      (server-port-label server-port #f)
      (name-label name #t)))
  
  
  (method (remote-stops self)
    (map (~ info-text self) (map second (remote-fields self))))
  
  
  (method (remote-open self remote-file)
    (with-window-cursor :wait
      (lambda ()
        (clear-exception self)
        (let ((obj (open-client remote-file)))
          (if (is? obj Zone)
              obj
            (let ((title (if (string? obj) obj "Unable to connect to server")))
              (report-exception self title obj)))))))
  
  
  (method (info-text self view)
    (let ((interface (current-interface)))
      (locate (child interface view) 'text)))
  
  
  (method (text-content self text)
    (let ((content (get-string-content text)))
      (if (empty-string? content)
          #f
        content)))
  
  
  (method (text-content-set self text content)
    (set-string-content text (->string content)))
  
  
  (method package (tab-stops self)
    (case stage
      ((customize) (remote-stops self))
      (else #f))))


;;;
;;;; Camera
;;;


(definition camera-tick
  #f)

(definition camera-angle
  2.0)


(definition (install-camera)
  (let ((zone (current-zone)))
    (set! camera-tick path-camera)
    (register-tick zone camera-tick))
  (path-camera 0.))


(definition (uninstall-camera)
  (let ((zone (current-zone)))
    (unregister-tick zone camera-tick)
    (set! camera-tick #f)))


(definition (path-camera elapse)
  (let ((world (current-world)))
    (increase! camera-angle (/ elapse 10.))
    (let ((target (vertex -11.500 8.500 -32.500))
          (angle camera-angle)
          (radius 75.)
          (elevation 20.))
      (let ((x (cos angle))
            (z (sin angle)))
        (let ((flat (vertex+ target (vertex-scalar*& (vertex x 0. z) radius))))
          (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
            (let ((dir (vertex-normalize (vertex-& target pos)))
                  (dir-flat (vertex-normalize (vertex-& target flat))))
              (let ((vert-angle (vector-angle dir dir-flat)))
                (let ((sight dir-flat)
                      (eye (get-eye world))
                      (up (get-world-up world)))
                  (let ((right (cross-product sight up)))
                    (let ((lookat (lookat sight up right)))
                      (free-motion world feedback?: #f)
                      (set-lookat eye (rotate-lookat-vertical& lookat (- vert-angle)))
                      (set-position eye pos)
                      (derive-target eye)
                      (camera-update eye))))))))))))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


;;;
;;;; Name-Label
;;;


(class Name-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


;;;
;;;; Exception-Label
;;;


(class Exception-Label extends Label-View
  
  
  (property exception initialize #f accessors generate)
  
  
  (method override (text-color self)
    {Color World-Red})
  
  
  (method override (get-tooltip? self)
    #t)
  
  
  (method override (get-tooltip-text self)
    (typecase exception
      ((Exception)
       (exception-reason exception))
      (else
       #f))))


;;;
;;;; Info-Label
;;;


(class Info-Label extends Label-View
  
  
  (form
    (<install> size: {Dimension 160 16} color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info-View
;;;


(class Info-View extends Border-View
  
  
  (form
    (<install>                          size: {Dimension 160 19} border-type: edge style: entry
      (<Scroller-View>                  hscroll?: #f vscroll?: #f
        (<content~>                     layout-type: fill
          (<World-Text-View> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method override (get-tab-stops self)
    (let ((zone (current-zone)))
      (tab-stops zone)))
  
  
  (method (on-return self evt)
    (let ((zone (current-zone)))
      (case stage
        ((customize) (create-remote zone))))))


;;;
;;;; Name-Text
;;;


(class Name-Text extends World-Text-View
  
  
  (method override (new-model self)
    (new Text-Model default-style: {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin}} left-padding: 12)))


;;;
;;;; Name-View
;;;


(class Name-View extends Border-View
  
  
  (form
    (<install>                    size: {Dimension 250 24} border-type: edge style: entry @border-type: solid @border-color: {Color Medium-Gray}
      (<Scroller-View>            hscroll?: #f vscroll?: #f
        (<content~>               layout-type: fill
          (<Name-Text> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method (on-content-change self evt)
    (let ((interface (current-interface)))
      (let ((text (locate self 'text)))
        (set-enabled? (child interface 'enter) (not (empty-string? (get-string-content text)))))))
  
  
  (method (on-return self evt)
    (let ((zone (current-zone)))
      (let ((text (locate self 'text)))
        (let ((content (get-string-content text)))
          (unless (empty-string? content)
            (create-default-remote zone content))))))))
