;;;============
;;;  Together
;;;============
;;;
;;;; Together Portals
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.portal jazz


(import (jazz.view)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.circle)
        (world.client.tier)
        (world.context)
        (world.settings)
        (world.task)
        (together))


(definition loading-zone
  (make-parameter #f))


(definition package (load/wait-zone path message thunk)
  (let ((client (current-client))
        (world (current-world))
        (zone (current-zone)))
    (if (equal? path (loading-zone))
        (thunk)
      (parameterize ((loading-zone path))
        (with-cursor :wait
          (lambda ()
            (let ((min-delay (if message .8 0.)))
              (if (equal? (get-path zone) path)
                  (if (not message)
                      (thunk)
                    (working-wait world message min-delay thunk))
                (let ((loaded (make-mutex 'loaded))
                      (before (current-seconds)))
                  (set-zone-loaded-hook client (lambda (path info)
                                                 (let ((elapse (- (current-seconds) before)))
                                                   (sleep (- min-delay elapse)))
                                                 (mutex-unlock! loaded)
                                                 (mutex-unlock! loaded)))
                  (working world
                    (lambda ()
                      (when message
                        (working-progress world message #f))
                      (load-zone client path)
                      (mutex-lock! loaded)
                      (mutex-lock! loaded)))
                  (let ((error (change-zone client path)))
                    (if (string? error)
                        (display-error world error)
                      (thunk))))))))))))


(definition package (check-rune rune)
  (let ((together (current-together))
        (world (current-world))
        (zone (current-zone)))
    (let ((path (get-path rune)))
      (define (present-path)
        (if (eq? path 'start)
            "World"
          (last path)))
      
      (cond ((circling?)
             (display-action world "Cannot use Portal while in a circle"
               (lambda ()
                 )))
            ((not path)
             (display-action world "Unassigned Portal"
               (lambda ()
                 )))
            (else
             (let ((name (present-path))
                   (same-zone? (equal? (get-path zone) path)))
               (display-action world (format "E : Enter Portal{a}" (format " to {a}" name))
                 (lambda ()
                   (load/wait-zone path (format "Loading {a}" name)
                     (lambda ()
                       (unless same-zone?
                         (enter-zone together)))))))))))))
