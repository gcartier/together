;;;============
;;;  Together
;;;============
;;;
;;;; Together Portals
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.portal jazz


(import (jazz.view)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.client.tier)
        (world.context)
        (world.task)
        (together))


(definition package (check-rune self rune)
  (let ((world (current-world)))
    (let ((path (get-path rune)))
      (define (present-path)
        (if (eq? path 'start)
            "The gathering"
          (last path)))
      
      (when path
        (let ((name (present-path)))
          (display-action world (format "E : Enter Portal{a}" (format " to {a}" name))
            (lambda ()
              (with-cursor :wait
                (lambda ()
                  (let ((client (current-client)))
                    (let ((path (get-path rune))
                          (loaded (make-mutex 'loaded))
                          (before (current-seconds)))
                      (set-zone-loaded-hook client (lambda (path info)
                                                     (let ((elapse (- (current-seconds) before)))
                                                       (sleep (- 1. elapse)))
                                                     (mutex-unlock! loaded)
                                                     (mutex-unlock! loaded)
                                                     (with-task-mutex
                                                       (lambda ()
                                                         (change-zone client path)
                                                         (set-mode (current-me) 'player)
                                                         (person-motion world feedback?: #f)))))
                      (working world
                        (lambda ()
                          (working-progress world (format "Loading {a}" name) #f)
                          (load-zone client path)
                          (mutex-lock! loaded)
                          (mutex-lock! loaded)))))))))))))))
