;;;============
;;;  Together
;;;============
;;;
;;;; Replay Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.replay-space jazz


(import (jazz.action)
        (jazz.component)
        (jazz.graphic)
        (jazz.markup)
        (jazz.platform)
        (jazz.stream)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.autoload)
        (world.context)
        (world.interface)
        (world.interface.mainbar)
        (world.interface.panel)
        (world.settings)
        (world.skybox)
        (together)
        (together.autoload)
        (together.replay)
        (together.sphere-space)
        (together.visualizer))


(define-trait replay-bindings Bindings
  (<Trait>                   name: replay
    (<install>
      (<world-main!>
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: open-welcome               active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-windowed-mode       active?: #t))
      (<world-script!>
        (<!>                 name: test1                      active?: #t)
        (<!>                 name: test2                      active?: #t)
        (<!>                 name: test3                      active?: #t)
        (<!>                 name: test4                      active?: #t)
        (<!>                 name: test5                      active?: #t)
        (<!>                 name: test6                      active?: #t)
        (<!>                 name: test7                      active?: #t)
        (<!>                 name: test8                      active?: #t)
        (<!>                 name: test9                      active?: #t)
        (<!>                 name: test0                      active?: #t)
        (<!>                 name: clear-console              active?: #t)
        (<!>                 name: clear-terminal             active?: #t))
      (<world-debug!>
        (<!>                 name: toggle-gc-sound            active?: #t)
        (<!>                 name: explore-interface          active?: #t)
        (<!>                 name: garbage-collect            active?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               active?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            active?: #t)
        (<!>                 name: edit-definition            active?: #t)
        (<!>                 name: edit-script                active?: #t)
        (<!>                 name: edit-script1               active?: #t)
        (<!>                 name: edit-script2               active?: #t)
        (<!>                 name: edit-script3               active?: #t)
        (<!>                 name: edit-script4               active?: #t)
        (<!>                 name: edit-script5               active?: #t)
        (<!>                 name: edit-script6               active?: #t)
        (<!>                 name: edit-script7               active?: #t)
        (<!>                 name: edit-script8               active?: #t)
        (<!>                 name: edit-script9               active?: #t)
        (<!>                 name: edit-script0               active?: #t))
      (<together-debug!>
        (<!>                 name: toggle-admin               active?: #t)
        (<!>                 name: test                       active?: #t)))))


(class Replay-Space extends Sphere-Space
  
  
  (slot draw-hook initialize #f getter generate)
  
  
  (method override (space-name self)
    'replay)
  
  
  (method override (space-setup self)
    (nextmethod self)
    (let ((together (current-together))
          (interface (current-interface)))
      (let ((root (new Together-Replay-Panel name: 'replay parent: interface location: 'fill size: (get-size interface) layout-type: 'justify visible?: #f)))
        (new Together-Visualizer-Panel parent: root name: 'visualizer visible?: replay-visualizer? layouter: (lambda (panel) (together-visualizer-panel-layouter panel)))
        (new Together-Timeline-Panel parent: root name: 'timeline visible?: #t layouter: (lambda (panel) (together-timeline-panel-layouter panel)))
        (new Together-Evolution-Panel parent: root name: 'evolution visible?: #t layouter: (lambda (panel) (together-evolution-panel-layouter panel)))
        (new Together-Moments-Panel parent: root name: 'moments visible?: #f layouter: (lambda (panel) (together-evolution-panel-layouter panel)))
        (when replay-back?
          (new Push-Button name: 'back parent: root title: "Back" location: '(-10 -10) size: {Dimension 100 24} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-back self)))
        (set! self.root root))))
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface)))
      (set-visible? (child root 'visualizer) replay-visualizer?)
      (set-visible? (child root 'timeline) #t)
      (set-visible? (child root 'evolution) #t)
      (set-visible? (child root 'moments) #f)
      (when replay-back?
        (set-visible? (child root 'back) #t))
      (set-visible? (child mainbar 'profile) #f)
      (set-visible? (child interface 'people-label) #f)
      (set-visible? (child interface 'people) #f)
      (set-visible? (child interface 'streams-label) #f)
      (set-visible? (child interface 'streams) #f)
      (set-visible? (child interface 'chat-label) #f)
      (set-visible? (child interface 'chat) #f)
      (set-visible? (child interface 'command-to) #f)
      (set-visible? (child interface 'command) #f)
      (hide-mainbar self)
      (layout-view interface)
      (layout-view root)
      (show root)
      (send-to-back root)
      @w
      (if (admin?)
          (unless (eq? (active-focus) (locate (child interface 'admin) '(console text)))
            (focus-world))
        (focus-world))))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((interface (current-interface))
          (world (current-world)))
      (layout-message world)
      (layout-working world)
      @wait-too-much-should-be-toggeable (
      (set! draw-hook (~ draw-audio self))
      (register-draw-hook interface draw-hook))))
  
  
  (method override (space-deactivate self)
    (nextmethod self)
    @wait-too-much-should-be-toggeable
    (let ((interface (current-interface)))
      (unregister-draw-hook interface draw-hook)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (close-emulators (child root 'visualizer))
    (hide-interface)
    (reset-panel-stack))
  
  
  (method override (space-bindings self)
    (list replay-bindings))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-interface)
                  (find-actions 'world-script)
                  (find-actions 'world-debug)
                  (find-actions 'together-menu)
                  (find-actions 'together-script)
                  (find-actions 'together-debug))
            (nextmethod self)))
  
  
  (method override (only-skybox self)
    (cache-nebula-skybox))
  
  
  (method override (draw-message-offset self)
    65)
  
  
  @wait-too-much-should-be-toggeable
  (method (draw-audio self surface)
    (let ((together (current-together))
          (client (current-client))
          (world (current-world)))
      (let ((udp-client (get-udp-client client))
            (width (fxround (get-width world))))
        (let ((base-h (- width 270))
              (base-v 50))
          (define (cpu-percentage threads)
            (cond-expand
              (mac
               (bind (main . others) (map second threads)
                 (values main (apply + others))))
              (else)))
          
          (cond-expand
            (mac
             (with-bin-mutex
               (lambda ()
                 (let ((threads (current-process-threads)))
                   (when threads
                     (receive (main others) (cpu-percentage threads)
                       (let ((total (+ main others)))
                         (set-font surface {Font font-name: tahoma point-size: 18 hint-style: slight hint-metrics: on})
                         (draw-text surface base-h 10 (format "CPU: {r precision: 1}%, {r precision: 1}%" (* total 100.) (* others 100.)) {Color World-Red})
                         (set-font surface {Font font-name: tahoma point-size: 14 hint-style: slight hint-metrics: on shadow: thin})
                         (draw-streams together surface 'vertical threads base-h base-v #f))))))))
            (else))))))
  
  
  (method (on-back self evt)
    (goto-space (current-together) 'gathering))))
