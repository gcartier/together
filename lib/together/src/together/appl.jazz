;;;============
;;;  Together
;;;============
;;;
;;;; Together Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.appl jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.command)
        (jazz.component)
        (jazz.editor)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.opengl.window)
        (jazz.reference)
        (jazz.resource)
        (jazz.search)
        (jazz.tree)
        (jazz.view)
        (world)
        (world.appl)
        (world.client.actions)
        (world.client.bars)
        (world.configure)
        (world.context)
        (world.evolution)
        (world.interface)
        (world.interface.actions)
        (world.interface.bars)
        (world.interface.history)
        (world.io)
        (world.role)
        (world.settings)
        (world.task)
        (world.window)
        (together)
        (together.community)
        (together.settings)
        (together.window)
        (together.zone))


(class Together-Application extends World-Application

  
  (method override (process-name self)
    "Together")
  
  
  (method override (process-version self)
    together-version)
  
  
  (method override (process-release self)
    together-release)
  
  
  (method override (process-debugger self)
    ;; already installed in settings
    #f)
  
  
  (method override (new-toplevel self)
    (let ((fullscreen? window-fullscreen?)
          (pos (world-setting 'world.position {Point 150 50}))
          (size (world-setting 'world.size {Dimension 1100 750})))
      (new-opengl-window class: Together-Window fullscreen?: fullscreen? position: pos size: size render?: #f visible?: #f)))
  
  
  (method override (initialize-settings self)
    (nextmethod self)
    (register-world))
  
  
  (method override (default-preferences self)
    (new Together-Preferences))
  
  
  (method override (default-bindings self)
    (new Together-Bindings))
  
  
  (method override (finish-process self)
    (nextmethod self)
    (set-safe-explore-action 'ignore)
    (set-exceeds-tooltips? #f))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions self)
    (append (list (find-actions 'together))
            (nextmethod self)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-enter-press self evt)
    (let ((zone (current-zone)))
      (enter-press zone)))
  
  
  (method (on-tab-press self evt)
    (let ((zone (current-zone)))
      (tab-press zone)))
  
  
  (method (on-toggle-people self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-people zone evt))))
  
  
  (method (on-toggle-chat self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-chat zone evt))))
  
  
  (method (on-message self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-message zone evt))))
  
  
  (method (on-leave-circle self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-leave-circle zone evt))))
  
  
  (method (on-toggle-denoise self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-denoise zone evt))))
  
  
  (method (on-toggle-audio self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-audio zone evt))))
  
  
  (method (on-toggle-video self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-video zone evt))))
  
  
  (method (on-cycle-layouts self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-cycle-layouts zone evt))))
  
  
  (method (on-toggle-debug self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-debug zone evt))))
  
  
  (method (on-toggle-admin self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-admin zone evt))))
  
  
  (method (on-toggle-capture self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-capture zone evt))))
  
  
  (method (on-toggle-mode self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-mode zone evt))))
  
  
  (method (on-process-evolutions self evt)
    (let ((thread
            (new-thread
              (lambda ()
                (let ((world (current-world)))
                  (with-task-mutex
                    (lambda ()
                      (display-message world "Processing..." duration: 60.)))
                  (process-evolutions #f)
                  (with-task-mutex
                    (lambda ()
                      (display-message world "Done")))))
              'process)))
      (thread-base-priority-set! thread background-priority)
      (thread-start! thread)))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (news-file self)
    (world-file '("devel" "together" "News.ftx") 'Resources))
  
  
  (method override (roadmap-file self)
    (world-file '("devel" "together" "Roadmap.ftx") 'Resources))
  
  
  (method override (help-file self)
    (world-file '("devel" "together" "Help.ftx") 'Resources))
  
  
  (method override (about-file self)
    (world-file '("devel" "together" "About.ftx") 'Resources))
  
  
  ;;;
  ;;;; Interface
  ;;;

  
  (method override (setup-application-interface self)
    (let ((interface (current-interface)))
      (new History-Slider name: 'slider parent: interface visible?: #f)
      (install-bars
        `((,World-Main-Bar      main      horizontal none #f)
          (,World-Universe-Bar  universe  horizontal none #f)
          (,World-Window-Bar    window    horizontal none #f)
          (,World-Media-Bar     media     horizontal none #f)
          (,World-Camera-Bar    camera    horizontal none #f)
          (,World-History-Bar   history   horizontal none #f)
          (,World-Models-Bar    models    horizontal none #f)
          (,World-Blocks-Bar    blocks    horizontal none #f)
          (,World-Target-Bar    target    vertical   none #f)
          (,World-Edition-Bar   edition   horizontal none #f)
          (,World-Interface-Bar interface horizontal none #f)
          ,(case current-role
             ((developer)
              `(,Together-Debug-Bar debug horizontal (center tail) #f))
             (else
              `(,Together-Debug-Bar debug horizontal none #f)))))
      (set-layouter (child interface 'models) models-bar-layouter)
      (set-layouter (child interface 'blocks) blocks-bar-layouter)))


  ;;;
  ;;;; Roles
  ;;;
  
  
  (method override (role-traits self role)
    (case role
      ((user) user-role)
      ((developer) developer-role)
      (else (nextmethod self role))))


  ;;;
  ;;;; User
  ;;;


  (define-trait user-bindings Bindings
    (<Role-Trait>        name: user
      (<install>)))

  (definition user-role
    `((:bindings ,user-bindings)))


  ;;;
  ;;;; Developer
  ;;;


  (define-trait developer-bindings Bindings
    (<Role-Trait>              name: developer
      (<install>
        (<world-debug!>
          (<!>                 name: toggle-info        visible?: #t)
          (<!>                 name: toggle-timeline    visible?: #t)
          (<!>                 name: toggle-profiler    visible?: #t)
          (<!>                 name: reset-profiling    visible?: #t)
          (<!>                 name: clear-console      visible?: #t)
          (<!>                 name: clear-terminal     visible?: #t)
          (<!>                 name: explore-interface  visible?: #t)
          (<!>                 name: test               visible?: #t shortcut: {Shortcut :alt #\T})
          (<!>                 name: test1              visible?: #t shortcut: {Shortcut :alt #\1})
          (<!>                 name: test2              visible?: #t shortcut: {Shortcut :alt #\2})
          (<!>                 name: test3              visible?: #t shortcut: {Shortcut :alt #\3})
          (<!>                 name: test4              visible?: #t shortcut: {Shortcut :alt #\4})
          (<!>                 name: test5              visible?: #t shortcut: {Shortcut :alt #\5})
          (<!>                 name: test6              visible?: #t shortcut: {Shortcut :alt #\6})
          (<!>                 name: test7              visible?: #t shortcut: {Shortcut :alt #\7})
          (<!>                 name: test8              visible?: #t shortcut: {Shortcut :alt #\8})
          (<!>                 name: test9              visible?: #t shortcut: {Shortcut :alt #\9})
          (<!>                 name: test0              visible?: #t shortcut: {Shortcut :alt #\0})
          (<World-Action-Item> name: toggle-debug       visible?: #t shortcut: {Shortcut :alt #\G} title: "Toggle debug" action-handler: {Event-Handler :application on-toggle-debug} description: "Toggle debug.")
          (<World-Action-Item> name: toggle-admin       visible?: #t shortcut: {Shortcut :alt #\S} title: "Toggle admin" action-handler: {Event-Handler :application on-toggle-admin} description: "Toggle admin.")
          (<World-Action-Item> name: toggle-capture     visible?: #t shortcut: {Shortcut :alt #\R} title: "Toggle capture" action-handler: {Event-Handler :application on-toggle-capture} description: "Toggle capture.")
          (<World-Action-Item> name: toggle-mode        visible?: #t shortcut: {Shortcut :alt #\M} title: "Toggle mode" action-handler: {Event-Handler :application on-toggle-mode} description: "Toggle mode.")
          (<World-Action-Item> name: process-evolutions visible?: #t shortcut: {Shortcut :alt #\E} title: "Process evolutions" action-handler: {Event-Handler :application on-process-evolutions} description: "Process evolutions.")))))

  (definition developer-role
    `((:bindings ,developer-bindings))))


;;;
;;;; Debug
;;;


(class Together-Debug-Bar extends World-Actionbar
  
  
  (form
    (<install>
      (<World-Parameter-Button> name: toggle-info             resource: {Image-Resource "Library"} action-handler: {Action world-debug toggle-info} parameter: info)
      (<World-Parameter-Button> name: toggle-timeline         resource: {Image-Resource "AlignmentCenter"} action-handler: {Action world-debug toggle-timeline} parameter: timeline)
      (<World-Parameter-Button> name: toggle-profiler         resource: {Image-Resource "Memory"} action-handler: {Action world-debug toggle-profiler} parameter: profiler)
      (<World-Action-Button>    name: reset-profiling         resource: {Image-Resource "Refresh"} action-handler: {Action world-debug reset-profiling})
      (<World-Action-Button>    name: clear-terminal          resource: {Image-Resource "Cancel"} action-handler: {Action world-debug clear-terminal})
      (<World-Action-Button>    name: clear-console           resource: {Image-Resource "ClearResults"} action-handler: {Action world-debug clear-console})
      (<World-Action-Button>    name: explore-interface       resource: {Image-Resource "Watch"} action-handler: {Action world-debug explore-interface}))))


;;;
;;;; Preferences
;;;


(class Together-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                         toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        ;; Scripting
        (<Jazz-Text-Preferences>    name: jazz-text)
        (<Command-Text-Preferences> name: command-text)))))


;;;
;;;; Bindings
;;;


(class Together-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      ;; Application
      (<!>                           name: text
        (<!>                         name: move-backward-char   visible?: #t)
        (<!>                         name: extend-backward-char visible?: #t)
        (<!>                         name: move-forward-char    visible?: #t)
        (<!>                         name: extend-forward-char  visible?: #t)
        (<!>                         name: delete-char          visible?: #t)
        (<!>                         name: home                 visible?: #t)
        (<!>                         name: extend-home          visible?: #t)
        (<!>                         name: end                  visible?: #t)
        (<!>                         name: extend-end           visible?: #t))
      (<!>                           name: tree
        (<!>                         name: move-upward          visible?: #t)
        (<!>                         name: move-downward        visible?: #t))
      (<!>                           name: view
        (<!>                         name: escape               visible?: #t)
        (<!>                         name: backspace            visible?: #t)
        (<!>                         name: return               visible?: #t)
        (<!>                         name: undo                 visible?: #t)
        (<!>                         name: redo                 visible?: #t)
        (<!>                         name: cut                  visible?: #t)
        (<!>                         name: copy                 visible?: #t)
        (<!>                         name: paste                visible?: #t)
        (<!>                         name: select-all           visible?: #t)
        (<!>                         name: move-up              visible?: #t)
        (<!>                         name: move-down            visible?: #t))
      ;; World
      (<World-Menu-Actions>          name: world-menu)
      (<World-Interface-Actions>     name: world-interface)
      (<World-Graphics-Actions>      name: world-graphics)
      (<World-Sound-Actions>         name: world-sound)
      (<World-Media-Actions>         name: world-media)
      (<World-Client-Actions>        name: world-client)
      (<World-World-Actions>         name: world-world)
      (<World-Zone-Actions>          name: world-zone)
      (<World-Movement-Actions>      name: world-movement)
      (<World-Camera-Actions>        name: world-camera)
      (<World-Universe-Actions>      name: world-universe)
      (<World-Spell-Actions>         name: world-spell)
      (<World-Edition-Actions>       name: world-edition)
      (<World-History-Actions>       name: world-history)
      (<World-Window-Actions>        name: world-window)
      (<World-Debug-Actions>         name: world-debug)
      (<World-Tutorial-Actions>      name: world-tutorial)
      (<World-Objective-Actions>     name: world-objective)
      (<World-Collision-Actions>     name: world-collision)
      (<World-Anonymous-Actions>     name: world-anonymous)
      (<World-User-Actions>          name: world-user)
      ;; Together
      (<Together-Actions>            name: together))))


;;;
;;;; Actions
;;;


(class Together-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Together"
      ;; application
      (<World-Action-Item> name: enter-press          title: "Enter" visible?: #t action-handler: {Event-Handler :application on-enter-press} shortcut: {Shortcut Return} description: "Enter.")
      (<World-Action-Item> name: tab-press            title: "Tab" visible?: #t action-handler: {Event-Handler :application on-tab-press} shortcut: {Shortcut Tab} description: "Tab.")
      (<World-Action-Item> name: toggle-people        title: "Toggle people" visible?: #t action-handler: {Event-Handler :application on-toggle-people} shortcut: {Shortcut :alt #\P} description: "Toggle people.")
      (<World-Action-Item> name: toggle-chat          title: "Toggle chat" visible?: #t action-handler: {Event-Handler :application on-toggle-chat} shortcut: {Shortcut :alt #\C} description: "Toggle chat.")
      (<World-Action-Item> name: message              title: "Message" visible?: #t action-handler: {Event-Handler :application on-message} shortcut: {Shortcut :alt Return} description: "Message.")
      ;; media
      (<World-Action-Item> name: leave-circle         title: "Leave circle" visible?: #t action-handler: {Event-Handler :application on-leave-circle} shortcut: {Shortcut :alt Backspace} description: "Leave circle.")
      (<World-Action-Item> name: toggle-denoise       title: "Toggle denoise" visible?: #t action-handler: {Event-Handler :application on-toggle-denoise} shortcut: {Shortcut :alt #\D} description: "Toggle denoise.")
      (<World-Action-Item> name: toggle-audio         title: "Toggle audio" visible?: #t action-handler: {Event-Handler :application on-toggle-audio} shortcut: {Shortcut :alt #\A} description: "Toggle audio.")
      (<World-Action-Item> name: toggle-video         title: "Toggle video" visible?: #t action-handler: {Event-Handler :application on-toggle-video} shortcut: {Shortcut :alt #\V} description: "Toggle video.")
      (<World-Action-Item> name: cycle-layouts        title: "Cycle layouts" visible?: #t action-handler: {Event-Handler :application on-cycle-layouts} shortcut: {Shortcut :alt #\L} description: "Cycle layouts.")
      ;; window
      (<World-Action-Item> name: toggle-windowed-mode title: "Windowed / fullscreen" visible?: #t action-handler: {Event-Handler :world on-toggle-windowed-mode} shortcut: {Shortcut :meta #\F} alternate-shortcut: {Shortcut :alt #\F} description: "Toggle between windowed and fullscreen mode.")))))
