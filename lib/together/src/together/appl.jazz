;;;============
;;;  Together
;;;============
;;;
;;;; Together Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.appl jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.command)
        (jazz.component)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.debugger.stub)
        (jazz.editor)
        (jazz.editor.c)
        (jazz.editor.commonlisp)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.editor.scheme)
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.listener)
        (jazz.markup)
        (jazz.menu)
        (jazz.opengl.window)
        (jazz.platform)
        (jazz.presence)
        (jazz.project)
        (jazz.reference)
        (jazz.resource)
        (jazz.search)
        (jazz.snapshot)
        (jazz.stream)
        (jazz.text)
        (jazz.time)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (jazz.zlib)
        (world)
        (world.appl)
        (world.asset)
        (world.assets)
        (world.build)
        (world.capabilities)
        (world.circle)
        (world.client.actions)
        (world.client.bars)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.hook)
        (world.interface)
        (world.interface.actions)
        (world.interface.bars)
        (world.interface.history)
        (world.interface.mainbar)
        (world.interface.menu)
        (world.interface.timeline)
        (world.io)
        (world.parameters)
        (world.rate)
        (world.role)
        (world.scripts)
        (world.settings)
        (world.space)
        (world.syntax (phase syntax))
        (world.task)
        (world.udp)
        (world.video)
        (world.window)
        (together)
        (together.debugger)
        (together.exception)
        (together.gathering)
        (together.remote)
        (together.script)
        (together.settings)
        (together.window)
        (together.zone))


(class Together-Application extends World-Application
  
  
  (slot local-debugger initialize #f)
  (slot catalogs-mutex initialize (make-mutex 'catalogs))

  
  (method override (process-name self)
    "Together")
  
  
  (method override (process-version self)
    together-version)
  
  
  (method override (process-email self)
    "gucartier@gmail.com")
  
  
  (method override (process-release self)
    (build-short-date))
  
  
  (method override (process-debugger self)
    ;; already installed in settings
    #f)
  
  
  (method override (new-toplevel self)
    (let ((fullscreen? window-fullscreen?)
          (pos (world-setting 'world.position {Point 150 50}))
          (size (world-setting 'world.size {Dimension 1100 750})))
      (let ((toplevel (new Together-Window fullscreen?: fullscreen? position: pos size: size)))
        (set-caption-base toplevel "Together")
        toplevel)))
  
  
  (method override (initialize-settings self)
    (nextmethod self)
    (register-world))
  
  
  (method override (default-preferences self)
    (new Together-Preferences))
  
  
  (method override (default-bindings self)
    (new Together-Bindings))
  
  
  ;; copy-pasted from IDE
  (method override (get-local-debugger self)
    (if local-developer?
        local-debugger
      (nextmethod self)))
  
  
  ;; copy-pasted from IDE
  (method override (install-process self)
    (nextmethod self)
    ;; quick hack for starting two togethers locally
    (unless (and local-developer?
                 (world-setting 'world.inhibit-empty-fifos? #f))
      (empty-fifo-directory feedback?: local-developer?))
    (when local-developer?
      (start-debuggers self)))
  
  
  (method override (finish-process self)
    (nextmethod self)
    (set-safe-explore-action 'ignore)
    (set-exceeds-tooltips? #f)
    (set-shortcut-hook self (~ call-shortcut-hook self))
    (set-setup-catalogs-hook (~ setup-catalogs self))
    @wait
    ;; this takes a lot of memory and thus has a large
    ;; impact on garbage collect times so i think that
    ;; cataloging should be offloaded to the worker...
    (when local-developer?
      (let ((thread
              (new-thread
                (lambda ()
                  (require-cataloguer))
                'catalogs)))
        (thread-base-priority-set! thread background-priority)
        (thread-start! thread)))
    ;; a try
    (when local-developer?
      (set-debugger-manager (new Together-Debugger-Manager))))
  
  
  ;; copy-pasted from IDE
  (method override (conclude-environment self)
    (nextmethod self)
    (when local-developer?
      ;; do this at the last moment possible because any error beyond this point
      ;; will be handled by the IDE itself which must thus be fully functional
      (if (get-controller-debugger)
          (attach-process local-debugger (get-local-process) #t)
        (when (controlling-terminal?) ;; (and kernel-source-access? (world-setting 'world.debugger? #f))
          (attach-to-controller (get-local-register 'debugging) #t)
          (with-system-exception-debugger
            (lambda ()
              (ready-to-controller)
              (transmit-runtime-information (get-local-process) 'all)
              (current-input-port (console-input-port))
              (current-output-port (console-output-port))))))))
  
  
  (method override (close-environment self)
    (set-shortcut-hook self #f)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (save-script manager))))
    (when local-developer?
      (let ((cataloguer (find-cataloguer)))
        (when cataloguer
          (save-catalogs cataloguer))))
    (nextmethod self))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (import (world.script.asset))
  (import (world.interface.script))
  (import (world.scriptum))
  (method override (activate self)
    (let ((interface (current-interface+))
          (space (current-space+))
          (world (current-world+))
          (zone (current-zone+)))
      ;; be robust to an early crash that will call
      ;; message box which will in turn call activate
      (when (and interface space world zone)
        (application-activate space)
        ;; wakeup render
        (let ((task (get-render-task zone)))
          (when task
            (task-wakeup task)))
        ;; wakeup tick
        (let ((task (get-tick-task zone)))
          (when task
            (task-wakeup task)))
        ;; super mega quicky
        @version1
        (when edited-entity
          (let ((edited-path (get-path (get-asset edited-entity))))
            (let ((script (find-asset world edited-path)))
              (when script
                (let ((content (load-text script)))
                  (when (not (equal? (digest-string content 'SHA-1)
                                     (digest-string (get-text (get-script edited-entity)) 'SHA-1)))
                    (let ((panel (child interface 'script)))
                      (let ((manager (locate panel 'manager)))
                        (let ((text (locate manager '(script text))))
                          (require-cataloguer)
                          (let ((entity (register-asset-script script)))
                            (set-edited-entity entity)
                            (set-edited manager entity)
                            (set-string-content text content)
                            (set-text (get-script entity) content)
                            @a-bit-too-much-especially-when-errors
                            (execute-script world edited-path))))))))))))
      (nextmethod self)))
  
  
  (method override (deactivate self)
    (let ((space (current-space)))
      (application-deactivate space))
    (nextmethod self))
  
  
  ;;;
  ;;;; Sleep
  ;;;
  
  
  (method override (sleep-process self)
    (let ((together (current-together)))
      (when together
        (sleep-process together)))
    (nextmethod self))
  
  
  (method override (wake-process self)
    (nextmethod self)
    (let ((together (current-together)))
      (when together
        (wake-process together))))
  

  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (get-resource self type name)
    (case type
      ((icon)
       ;; we rely on the caller image doing the caching
       (retrieve-file (require-asset (current-world) (format "icon/world/{a}.png" name))))
      ((image)
       (let ((file (nextmethod self type name)))
         (if (exists? file)
             file
           (install-image name)
           file)))
      (else
       (nextmethod self type name))))


  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method override (setup-nicknames self)
    (nextmethod self)
    (register-nickname :together (lambda () (current-together))))

  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method (call-shortcut-hook self shortcut)
    (let ((together (current-together)))
      (if together
          (shortcut-press-circle together shortcut)
        #f)))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  ;; a try
  (method override (allow-orphaned-action? self action-item)
    #t)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-enter-press self evt)
    (let ((space (current-space)))
      (enter-press space)))
  
  
  (method (on-tab-press self evt)
    (let ((space (current-space)))
      (tab-press space)))
  
  
  (method (on-toggle-interface self evt)
    (let ((world (current-world))
          (space (current-space)))
      (unless (and (is? space Gathering-Space)
                   (not (admin?)))
        (toggle-interface world))))
  
  
  (method (on-add-bookmark self evt)
    (let ((world (current-world)))
      (when record-events?
        (record-event udp-id-bookmark
                      -1.
                      -1.
                      -1.
                      -1.
                      -1.
                      -1.
                      -1.)
        (display-message world "Bookmarked!"))))
  
  
  (method (on-update-catalogs self evt)
    (update-catalogs self))
  
  
  (method (on-edit-definition self evt)
    (let ((world (current-world)))
      (let ((text (active-focus)))
        (when (is? text Together-Script-Text-View)
          (let ((form (current-expr text)))
            (when (symbol? form)
              (let ((target (standardize-form text form #t))
                    (history-item (current-history-item text)))
                (edit-catalog-target target history-item: history-item))))))))
  
  
  (import world.audio)
  (method (on-test self evt)
    (let ((audio (current-audio))
          (world (current-world)))
      (let ((ordered-outputs (get-ordered-outputs audio)))
        (if (not-null? ordered-outputs)
            (display-message world "Audio is not empty")
          (if (not cached-audio)
              (display-message world "Audio is already closed")
            (close-audio)
            (display-message world "Audio closed")))))
    @w
    (dispatch-to 'world.test-script "test/test"))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (edit-document self moniker . rest)
    (bind-keywords ((selection #f)) rest
      (edit-catalog-script moniker selection: selection)))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item self)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (and (get-visible? panel)
             (let ((manager (locate panel 'manager)))
               (let ((text (locate manager '(script text))))
                 (current-history-item text)))))))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (receive-files self pos pathnames)
    (let ((space (current-space)))
      (receive-files space pos pathnames)))
  
  
  (method override (news-file self)
    (world-file '("devel" "together" "News.ftx") 'Resources))
  
  
  (method override (roadmap-file self)
    (world-file '("devel" "together" "Roadmap.ftx") 'Resources))
  
  
  (method override (help-file self)
    (world-file '("devel" "together" "Help.ftx") 'Resources))
  
  
  (method override (about-file self)
    (world-file '("devel" "together" "About.ftx") 'Resources))
  
  
  ;;;
  ;;;; Services
  ;;;
  
  
  (method override (provide-services self)
    (nextmethod self)
    ;; feedback
    (provide-service 'user-message (~ user-message-service self))
    (provide-service 'user-feedback (~ user-feedback-service self))
    (provide-service 'clear-user-message (~ clear-user-message-service self))
    (provide-service 'clear-user-feedback (~ clear-user-feedback-service self))
    (provide-service 'console-feedback (~ console-feedback-service self))
    (provide-service 'modal-feedback (~ modal-feedback-service self))
    ;; edition
    @comment
    (provide-service 'edit-document (~ edit-document-service self)))
  
  
  (method (user-message-service self obj . rest)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (display-status world (apply format obj rest))))))
  
  
  (method (user-feedback-service self obj . rest)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (display-status world (apply format obj rest))))))
  
  
  (method (clear-user-message-service self)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (clear-message world)))))
  
  
  (method (clear-user-feedback-service self)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (clear-message world)))))
  
  
  (method (console-feedback-service self . rest)
    (apply format :console rest))
  
  
  (method (modal-feedback-service self text . rest)
    (terminal text))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  ;; copy-pasted from IDE
  (method override (register-base-objects self)
    (nextmethod self)
    (when local-developer?
      (register-object (get-local-register 'debugging) 'debugger (new Jazz-Debugger-Local-Proxy (require-presence 'debugging) local-debugger))))
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-console self)
    (if (or (remote-proxy? (get-controller-debugger))
            (not local-developer?))
        (nextmethod self)
      ;; no REPL until Together internal consoles
      (select-console self)))
  
  
  ;; copy-pasted from IDE
  (method (start-debuggers self)
    (when local-developer?
      (when (not local-debugger)
        ;; quicky until the local debugger is fully operational
        (when (not (get-controller-debugger))
          (use-debugger? #f))
        (set! local-debugger (new Together-Debugger))
        (start-debugger local-debugger)
        (register-debugger local-debugger)
        (set-current-debugger local-debugger))))
  
  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method protected (setup-catalogs self)
    (define (world-catalog)
      (let ((output {File Settings "work" "catalogs" "world.jcat"})
            (directories {Directory Application-World})
            (extensions :jazz))
        (new Filing-Catalog 'world output directories extensions #f #f #t)))
    
    (define (user-catalog)
      (let ((output {File Settings "work" "catalogs" "user.jcat"})
            (directories {Directory Settings})
            (extensions :jazz))
        (new Filing-Catalog 'user output directories extensions #f #f #t)))
    
    (mutex-lock! catalogs-mutex)
    (let ((cataloguer (new Cataloguer)))
      (define (add-project-catalogs file)
        (let ((project (instantiate-file file)))
          (for-each-project project
            (lambda (project)
              (let ((catalog (require-catalog project)))
                (add-catalog cataloguer catalog))))))
      
      (set-cataloguer cataloguer)
      (add-catalog cataloguer (world-catalog))
      (add-catalog cataloguer (user-catalog))
      (when kernel-source-access?
        ;; quicky to test
        (register-alias 'Profile '(Settings "work"))
        (add-project-catalogs {File Together "lib" ".project"})
        (add-project-catalogs {File World "lib" ".project"})
        (add-project-catalogs {File Jazz "lib" ".project"}))
      (for-each-active-catalog cataloguer #f
        (lambda (catalog)
          (load-content catalog report?: #f))))
    (mutex-unlock! catalogs-mutex))
  
  
  (method protected (update-catalogs self)
    (let ((window (current-window))
          (world (current-world)))
      (working world
        (lambda ()
          (for-each-active-catalog (require-cataloguer) #f
            (lambda (catalog)
              (working-progress world (format "Updating {a}..." (get-name catalog)) #f)
              (let ((mutex (make-mutex 'updated)))
                (mutex-lock! mutex)
                (post-catalog
                  (lambda ()
                    (update catalog)
                    (mutex-unlock! mutex)))
                (mutex-lock! mutex)
                (mutex-unlock! mutex))))))))
  
  
  ;;;
  ;;;; Sites
  ;;;
  
  
  (method override (register-site-looks self)
    (let ((dark-purple {Color red: .464 green: .141 blue: .732})
          (purple {Color Purple})
          (cyan {Color red: .120 green: .624 blue: .616}))
      ;; debug
      (register-site-look 'microphone 10 chronology-cyan)
      (register-site-look 'camera 10 chronology-blue)
      (register-site-look 'self 10 chronology-purple)
      (register-site-look 'screen 10 chronology-magenta)
      ;; origin
      @for-debugging-clarity (register-site-look 'release 10 chronology-orange)
      (register-site-look 'audio 9 chronology-yellow)
      (register-site-look 'video 8 chronology-green) ;; SERVER
      ;; receiver
      (register-site-look 'heartbeat 7 chronology-cyan)
      (register-site-look 'droppable 6 chronology-blue)
      (register-site-look 'receive 6 chronology-blue)  ;; SERVER
      (register-site-look 'udp-process 5 chronology-purple)
      (register-site-look 'video-output 4 chronology-magenta)
      ;; internal
      (register-site-look 'player 5 chronology-green)
      (register-site-look 'simulation 5 chronology-purple)
      (register-site-look 'physical 4 chronology-blue)
      (register-site-look 'visual 4 chronology-purple)
      (register-site-look 'instantiate 4 chronology-orange)
      (register-site-look 'generate 4 chronology-magenta)
      (register-site-look 'alive 3 {Color Yellow})
      (register-site-look 'network 3 {Color Yellow})
      (register-site-look 'distance 3 {Color Yellow})
      (register-site-look 'sun 3 {Color Yellow})
      (register-site-look 'eat 3 {Color Yellow})
      (register-site-look 'tick 3 {Color Yellow})
      (register-site-look 'render 3 {Color Blue})
      (register-site-look 'render-preprocess 4 {Color Purple})
      (register-site-look 'render-clear 4 {Color Purple})
      (register-site-look 'render-world 4 {Color Purple})
      (register-site-look 'render-outputs 4 {Color Purple})
      (register-site-look 'render-mainbar 4 {Color Purple})
      (register-site-look 'render-interface 4 {Color Purple})
      (register-site-look 'render-postprocess 4 {Color Purple})
      (register-site-look 'render-sync 4 {Color Purple})
      (register-site-look 'audio-stream 4 {Color Yellow})
      (register-site-look 'video-stream 4 {Color Yellow})
      ;; message
      (register-site-look 'event 2 {Color Orange alpha: .25})
      (register-site-look 'message 1 {Color Orange})
      (register-site-look 'delayed 1 {Color Orange})
      ;; memory
      (register-site-look 'memory 1 {Color red: .912 green: .005 blue: .005})
      ;; other
      (default-site-look 10 {Color Dark-Gray})))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (register-event-looks self)
    (register-event-look udp-id-state-ok         0 chronology-magenta)  ;   R
    (register-event-look udp-id-state-play       0 chronology-purple)   ;   R
    (register-event-look udp-id-state-freeze     0 chronology-purple)   ;   R
    (register-event-look udp-id-state-wait       0 chronology-blue)     ;   R
    (register-event-look udp-id-packet-gap       0 chronology-cyan)     ;  SR
    (register-event-look udp-id-duplicate-packet 0 chronology-green)    ;  SR
    (register-event-look udp-id-reject-packet    0 chronology-yellow)   ;  SR
    (register-event-look udp-id-lost-packet      0 chronology-red)      ;   R
    (register-event-look udp-id-discard-packet   0 chronology-orange)   ;   R
    (register-event-look udp-id-missing-packet   1 chronology-blue)     ;  SR
    (register-event-look udp-id-got-packet       1 chronology-green)    ;  SR
    (register-event-look udp-id-giveup-packet    1 chronology-orange)   ;  SR
    (register-event-look udp-id-resend-packet    1 chronology-purple)   ; OS
    (register-event-look udp-id-absent-packet    1 chronology-magenta)  ; OS
    (register-event-look udp-id-throttle-on      2 chronology-magenta)  ; OS
    (register-event-look udp-id-throttle-off     2 chronology-purple)   ; OS
    (register-event-look udp-id-connecting       3 chronology-yellow)   ; O
    (register-event-look udp-id-connected        3 chronology-green)    ; O
    (register-event-look udp-id-connect          3 chronology-green)    ;  S
    (register-event-look udp-id-deconnect        3 chronology-blue)     ;  S
    (register-event-look udp-id-reconnect        3 chronology-purple)   ;  S
    (register-event-look udp-id-ring-overflow    3 chronology-red))     ; OSR
  
  
  ;;;
  ;;;; Interface
  ;;;

  
  (method override (setup-application-interface self)
    (let ((interface (current-interface)))
      (setup-mainbar (new Together-Main-Bar visible?: #f))
      (install-bars
        `((,World-Models-Bar      models        horizontal none #f)
          (,World-Blocks-Bar      blocks        horizontal none #f)
          (,Together-Central-Menu central-menu  central    center #f)
          (,Together-Main-Menu    main-menu     radial     center #f)
          (,Together-Circle-Menu  circle-menu   radial     center #f)
          (,World-Graphics-Menu   graphics-menu radial     center #f)
          (,World-Showcase-Menu   showcase-menu radial     center #f)
          (,World-Build-Menu      build-menu    radial     center #f)
          (,World-Script-Menu     script-menu   radial     center #f)
          (,World-Debug-Menu      debug-menu    radial     center #f)))
      (set-layouter (child interface 'models) models-bar-layouter)
      (set-layouter (child interface 'blocks) blocks-bar-layouter)))


  ;;;
  ;;;; Roles
  ;;;
  
  
  (method override (role-bindings self)
    (let ((admin (if (admin?)
                     `(,admin-bindings)
                   '()))
          (platform (cond-expand
                      (windows `(,windows-bindings))
                      (else '()))))
      (if (unverified?)
          `(,unverified-bindings ,@platform)
        (case current-role
          ((user) `(,user-bindings ,@admin ,@platform))
          ((builder) `(,builder-bindings ,@admin ,@platform))
          ((developer) `(,developer-bindings ,@admin ,@platform))
          (else (nextmethod self))))))
  
  
  (method override (role-traits self)
    `((:bindings ,@(role-bindings self)))))


;;;
;;;; Debugger
;;;


(class Together-Debugger-Manager extends Debugger-Manager
  
  
  (method override (report-message self format-string . rest)
    (let ((world (current-world)))
      (let ((message (apply format format-string rest)))
        (display-message world message))))
  
  
  (method override (report-status self format-string . rest)
    (let ((world (current-world)))
      (let ((message (apply format format-string rest)))
        (display-status world message))))
  
  
  (method override (process-evaluate-when self process)
    'always))


;;;
;;;; Preferences
;;;


(class Together-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                         toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        ;; Scripting
        (<C-Text-Preferences>          name: c-text)
        (<Jazz-Text-Preferences>       name: jazz-text)
        (<Scheme-Text-Preferences>     name: scheme-text)
        (<CommonLisp-Text-Preferences> name: commonlisp-text)
        (<Command-Text-Preferences>    name: command-text))
      (<Debug-Preferences>             name: debug evaluate-when: always)
      (<Inspector-Preferences>         name: inspector))))


;;;
;;;; Parameter
;;;


(define-parameter people
  (new World-Parameter
    (lambda ()
      (let ((interface (current-interface)))
        (let ((view (find-component interface 'people)))
          (and view
               (get-visible? view)))))))


(define-parameter streams
  (new World-Parameter
    (lambda ()
      (let ((interface (current-interface)))
        (let ((view (find-component interface 'streams)))
          (and view
               (get-visible? view)))))))


(define-parameter chat
  (new World-Parameter
    (lambda ()
      (let ((interface (current-interface)))
        (let ((view (find-component interface 'chat)))
          (and view
               (get-visible? view)))))))


(define-parameter avatar-mode
  (new World-Parameter
    (lambda ()
      (let ((together (current-together)))
        (and together
             (avatar-mode? together))))))


(define-parameter presence-mode
  (new World-Parameter
    (lambda ()
      (let ((together (current-together)))
        (and together
             (presence-mode? together))))))


(define-parameter focus-mode
  (new World-Parameter
    (lambda ()
      (let ((together (current-together)))
        (and together
             (focus-mode? together))))))


(define-parameter gallery-mode
  (new World-Parameter
    (lambda ()
      (let ((together (current-together)))
        (and together
             (gallery-mode? together))))))


;;;
;;;; Main Bar
;;;


(class Together-Main-Bar extends World-Iconbar
  
  
  (form
    (<install>
      (<World-Action-Button>    name: create-circle       resource: {Icon-Resource "Logogram/Two-Shaped-Circle"} action-handler: {Action together-menu create-circle})
      (<World-Separator>                                  size: {Dimension 36 0})
      (<World-Action-Button>    name: leave-group         resource: {Icon-Resource "Logogram/Seperated-DIamond-Pointers"} action-handler: {Action together-menu leave-group})
      (<World-Action-Button>    name: leave-circle        resource: {Icon-Resource "Logogram/Circles-Half"} action-handler: {Action together-menu leave-circle})
      (<World-Separator>                                  size: {Dimension 36 0})
      (<World-Parameter-Button> name: toggle-microphone   resource: {Icon-Resource "Logogram/Tornado"} action-handler: {Action together-audio toggle-microphone} parameter: microphone)
      (<World-Parameter-Button> name: toggle-camera       resource: {Icon-Resource "Logogram/Seeker"} action-handler: {Action together-video toggle-camera} parameter: camera)
      (<World-Separator>)
      (<World-Parameter-Button> name: avatar-mode         resource: {Icon-Resource "Logogram/Logogram-Five"} action-handler: {Action together-circle avatar-mode} parameter: avatar-mode)
      (<World-Parameter-Button> name: presence-mode       resource: {Icon-Resource "Logogram/Sunset"} action-handler: {Action together-circle presence-mode} parameter: presence-mode)
      (<World-Parameter-Button> name: focus-mode          resource: {Icon-Resource "Logogram/Logogram-Shapes-Three"} action-handler: {Action together-circle focus-mode} parameter: focus-mode)
      (<World-Parameter-Button> name: gallery-mode        resource: {Icon-Resource "Logogram/Circular-Logogram"} action-handler: {Action together-circle gallery-mode} parameter: gallery-mode)
      (<World-Separator>)
      (<World-Parameter-Button> name: toggle-people       resource: {Icon-Resource "Sacred Geometry/Hexahedron"} action-handler: {Action world-people toggle-people} parameter: people)
      (<World-Parameter-Button> name: toggle-chat         resource: {Icon-Resource "Symbol/Symbol-Two"} action-handler: {Action world-chat toggle-chat} parameter: chat)
      (<World-Separator>)
      (<World-Action-Button>    name: goto-gathering      resource: {Icon-Resource "Landmarks/Japanese-Gate"} action-handler: {Action world-main open-welcome})
      (<World-Separator>)
      (<World-Action-Button>    name: central-menu        resource: {Icon-Resource "Beliefs Symbols/Hinduism"} action-handler: {Action together-menu central-menu})
      (<Name-Label>             name: name                location: tail size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: center)
      (<Circle-Label>           name: circle-name         location: tail size: {Dimension 200 40} auto-size?: #t font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: center)
      (<World-Separator>        name: name-separator      location: tail size: {Dimension 10 0})
      (<Profile-Label>          name: profile             location: tail size: {Dimension 100 40} font: {Font font-name: tahoma point-size: 15.5 shadow: thin} justification: (tail head))
      (<World-Separator>        name: power-separator     location: tail size: {Dimension 40 0})
      (<Microphone-Power>       name: microphone-power    location: tail size: {Dimension 65 20})
      (<World-Separator>                                  location: tail size: {Dimension 18 0})))
  
  
  (method protected (setup-visibility self)
    (let ((space (current-space)))
      (for-each (lambda (child)
                  (when (is? child World-Action-Button)
                    (let ((action-item (require-action-item (get-action-handler child))))
                      (set-visible? child (effective-visible? action-item)))))
                children)
      (let ((previous? #f))
        (for-each (lambda (child)
                    (unless (eq? (get-location child) 'tail)
                      (if (is? child World-Separator)
                          (begin
                            (set-visible? child previous?)
                            (set! previous? #f))
                        (when (get-visible? child)
                          (set! previous? #t)))))
                  children))
      (let ((gathering? (is? space Gathering-Space))
            (circling? (circling? (current-together))))
        (set-visible? (child self 'name) gathering?)
        (set-visible? (child self 'circle-name) (and circling? (not gathering?)))
        (set-visible? (child self 'microphone-power) (and circling? (not gathering?)))
        (set-visible? (child self 'power-separator) (and circling? (not gathering?)))
        (set-visible? (child self 'name-separator) #t)
        (set-visible? (child self 'profile) (or circling? gathering?)))
      (layout-view self))))


;;;
;;;; Central Menu
;;;


(class Together-Central-Menu extends World-Central-Menu
  
  
  (form
    (<install>
      (<World-Central-Wheel>    name: wheel
        (<World-Central-Button> name: central-menu  resource: {Icon-Resource "Beliefs Symbols/Hinduism"} action-handler: {Action together-menu central-menu})
        (<World-Central-Button> name: main-menu     resource: {Icon-Resource "Logogram/Logogram-Waves-One"} action-handler: {Action world-main main-menu})
        (<World-Central-Button> name: circle-menu   resource: {Icon-Resource "Logogram/Logogram-Five"} action-handler: {Action together-circle circle-menu})
        (<World-Central-Button> name: graphics-menu resource: {Icon-Resource "Logogram/Shapes"} action-handler: {Action world-graphics graphics-menu})
        (<World-Central-Button> name: showcase-menu resource: {Icon-Resource "Logogram/Flower-Floral"} action-handler: {Action world-showcase showcase-menu})
        (<World-Central-Button> name: build-menu    resource: {Icon-Resource "Logistic Delivery/Open-Warehouse"} action-handler: {Action world-build build-menu})
        @WAIT (<World-Central-Button> name: history-menu  resource: {Icon-Resource "Symbol/Symbol-Seventeen"} action-handler: {Action world-history history-menu})
        (<World-Central-Button> name: script-menu   resource: {Icon-Resource "Chemistry/Science"} action-handler: {Action world-script script-menu})
        (<World-Central-Button> name: debug-menu    resource: {Icon-Resource "Chemistry/Chemistry"} action-handler: {Action world-debug debug-menu})))))


;;;
;;;; Main Menu
;;;


(class Together-Main-Menu extends World-Radial-Menu
  
  
  (form
    (<install>                  title: "Main"
      (<World-Action-Button>    name: sound-options resource: {Icon-Resource "Network/Medium-WiFi"} action-handler: {Action world-main sound-options})
      (<World-Action-Button>    name: graphics-options resource: {Icon-Resource "Games/Visual"} action-handler: {Action world-main graphics-options})
      (<World-Action-Button>    name: interface-options resource: {Icon-Resource "Symbol/Circles-Symbol-Two"} action-handler: {Action world-main interface-options})
      (<World-Action-Button>    resource: {Icon-Resource "Network/Bluetooth"} action-handler: {Action world-main view-news})
      @wait
      (<World-Action-Button>    resource: {Icon-Resource "Sacred Geometry/Hexahedron"} action-handler: {Action world-main view-roadmap})
      (<World-Action-Button>    resource: {Icon-Resource "Interface/Gadgets-Showcase"} action-handler: {Action world-main open-about})
      @wait
      (<World-Action-Button>    resource: {Icon-Resource "Symbol/Circles-Symbol-Twelve"} action-handler: {Action world-main view-help})
      (<World-Action-Button>    resource: {Icon-Resource "Symbol/Two-Circles-Symbol-Two"} action-handler: {Action world-main bindings-viewer})
      (<World-Action-Button>    resource: {Icon-Resource "Photography UI/Sunny"} action-handler: {Action world-people toggle-invite})
      (<World-Action-Button>    resource: {Icon-Resource "Symbol/Cultural-Symbol-Eight"} action-handler: {Action world-interface toggle-windowed-mode})
      (<World-Action-Button>    resource: {Icon-Resource "Beliefs Symbols/Bahae"} action-handler: {Action world-main unstuck-character})
      (<World-Action-Button>    resource: {Icon-Resource "Created/RedX"} action-handler: {Action world-main quit-world}))))


;;;
;;;; Circle Menu
;;;


(class Together-Circle-Menu extends World-Radial-Menu
  
  
  (form
    (<install>                  title: "Circle"
      (<World-Parameter-Button> resource: {Icon-Resource "Symbol/Circles-Symbol-Twelve"} action-handler: {Action together-share toggle-screen-share} parameter: screen-share)
      (<World-Action-Button>    resource: {Icon-Resource "Network/Medium-WiFi"} action-handler: {Action together-audio audio-options})
      (<World-Action-Button>    resource: {Icon-Resource "Photography UI/Lens"} action-handler: {Action together-video video-options})
      (<World-Action-Button>    resource: {Icon-Resource "Logogram/Two-Shaped-Circle"} action-handler: {Action together-circle circle-options}))))


;;;
;;;; Actions
;;;


(class Together-Menu-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Together"
      (<World-Action-Item> name: central-menu         title: "Central menu" shortcut: {Shortcut "Esc"} action-handler: {Event-Handler :together on-central-menu} description: "Show central menu.")
      (<World-Action-Item> name: create-circle        title: "New circle" action-handler: {Event-Handler :together on-create-circle} shortcut: {Shortcut :alt #\N} description: "Create and join a new circle.")
      (<World-Action-Item> name: leave-group          title: "Leave" action-handler: {Event-Handler :together on-leave-group} shortcut: {Shortcut :alt #\L} description: "Leave group.")
      (<World-Action-Item> name: leave-circle         title: "Leave" action-handler: {Event-Handler :together on-leave-circle} shortcut: {Shortcut :alt #\L} description: "Leave circle.")
      (<World-Action-Item> name: goto-login           title: "Go to Login screen" shortcut: {Shortcut "Click your name"} description: "Login."))))


(class Together-Audio-Actions extends World-Actions
  

  (form
    (<install>                                        title: "Audio"
      (<World-Action-Item> name: toggle-microphone    title: "Microphone" action-handler: {Event-Handler :together on-toggle-microphone} shortcut: {Shortcut :alt #\M} description: "Toggle microphone.")
      (<World-Action-Item> name: toggle-push-to-talk  title: "Push to talk" action-handler: {Event-Handler :together on-toggle-push-to-talk} shortcut: {Shortcut :alt Space} description: "Toggle push to talk.")
      (<World-Action-Item> name: talk                 title: "Talk" shortcut: {Shortcut Space} description: "Talk.")
      @wait-live-change (<World-Action-Item> name: toggle-echo-cancel    title: "Echo Cancellation" action-handler: {Event-Handler :together on-toggle-echo-cancel} shortcut: {Shortcut :alt :shift #\O} description: "Toggle echo cancellation.")
      @wait-live-change (<World-Action-Item> name: toggle-noise-suppress title: "Noise Suppression" action-handler: {Event-Handler :together on-toggle-noise-suppress} shortcut: {Shortcut :alt :shift #\N} description: "Toggle noise suppression.")
      (<World-Action-Item> name: toggle-rndenoise     title: "Aggressive Denoising" action-handler: {Event-Handler :together on-toggle-rndenoise} shortcut: {Shortcut :alt :shift #\D} description: "Toggle aggressive denoising.")
      (<World-Action-Item> name: audio-options        title: "Audio options" action-handler: {Event-Handler :together on-audio-options} shortcut: {Shortcut :alt :shift #\A} description: "Toggle audio options."))))


(class Together-Video-Actions extends World-Actions
  

  (form
    (<install>                                        title: "Video"
      (<World-Action-Item> name: toggle-camera        title: "Camera" action-handler: {Event-Handler :together on-toggle-camera} shortcut: {Shortcut :alt #\C} description: "Toggle camera.")
      (<World-Action-Item> name: change-quality       title: "Change video quality" shortcut: {Shortcut "Click video quality"})
      (<World-Action-Item> name: video-options        title: "Video options" action-handler: {Event-Handler :together on-video-options} shortcut: {Shortcut :alt :shift #\V} description: "Toggle video options."))))


(class Together-Circle-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Circle"
      (<World-Action-Item> name: circle-menu          title: "Circle menu" action-handler: {Event-Handler :world on-radial-menu radial: circle-menu} description: ("Circle menu."))
      (<World-Action-Item> name: avatar-mode          title: "Avatar" action-handler: {Event-Handler :together on-avatar-mode} shortcut: {Shortcut :alt #\A} description: "Avatar mode.")
      (<World-Action-Item> name: presence-mode        title: "Presence" action-handler: {Event-Handler :together on-presence-mode} shortcut: {Shortcut :alt #\D} description: "Presence mode.")
      (<World-Action-Item> name: focus-mode           title: "Focus" action-handler: {Event-Handler :together on-focus-mode} shortcut: {Shortcut :alt #\F} description: "Focus mode.")
      (<World-Action-Item> name: gallery-mode         title: "Gallery" action-handler: {Event-Handler :together on-gallery-mode} shortcut: {Shortcut :alt #\G} description: "Gallery mode.")
      (<World-Action-Item> name: bring-to-front       title: "Bring to front" shortcut: {Shortcut "Click image"})
      (<World-Action-Item> name: backspace-press      title: "Go to home view" shortcut: {Shortcut Backspace} description: "Backspace.")
      (<World-Action-Item> name: enter-press          title: "Rotate" shortcut: {Shortcut Return} description: "Enter.")
      (<World-Action-Item> name: left-press           title: "Rotate left" shortcut: {Shortcut "Left Arrow"} description: "Left.")
      (<World-Action-Item> name: right-press          title: "Rotate right" shortcut: {Shortcut "Right Arrow"} description: "Right.")
      (<World-Action-Item> name: up-press             title: "Increase speed" shortcut: {Shortcut "Up Arrow"} description: "Up.")
      (<World-Action-Item> name: down-press           title: "Decrease speed" shortcut: {Shortcut "Down Arrow"} description: "Down.")
      (<World-Action-Item> name: tab-press            title: "Cycle focus" shortcut: {Shortcut "Tab / shift Tab"} description: "Tab Right or Left")
      (<World-Action-Item> name: number-press         title: "Change focus" shortcut: {Shortcut "1, 2, 3, 4, 5"} description: "Number of Image")
      (<World-Action-Item> name: circle-options       title: "Circle options" action-handler: {Event-Handler :together on-circle-options} shortcut: {Shortcut :alt :shift #\O} description: "Toggle circle options."))))


(class Together-Record-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Record"
      (<World-Action-Item> name: start-recording      title: "Start recording" shortcut: {Shortcut :alt #\8} action-handler: {Event-Handler :together on-start-recording} description: "Start recording.")
      (<World-Action-Item> name: stop-recording       title: "Stop recording" shortcut: {Shortcut :alt #\9} action-handler: {Event-Handler :together on-stop-recording} description: "Stop recording.")
      (<World-Action-Item> name: process-recording    title: "Process recording" shortcut: {Shortcut :alt #\0} action-handler: {Event-Handler :together on-process-recording} description: "Process recording."))))


(class Together-Share-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Share"
      (<World-Action-Item> name: preprocess-streams   title: "Preprocess streams" shortcut: {Shortcut :control :shift #\P} action-handler: {Event-Handler :together on-preprocess-streams} description: "Preprocess streams.")
      (<World-Action-Item> name: preprocess-qualities title: "Preprocess qualities" shortcut: {Shortcut :control :shift #\O} action-handler: {Event-Handler :together on-preprocess-qualities} description: "Preprocess qualities.")
      (<World-Action-Item> name: toggle-streams       title: "Streams" shortcut: {Shortcut :alt :shift #\T} action-handler: {Event-Handler :space on-toggle-streams} description: "Toggle streams.")
      (<World-Action-Item> name: add-image            title: "Add image" shortcut: {Shortcut :alt :shift #\7} action-handler: {Event-Handler :together on-add-image} description: "Add image.")
      (<World-Action-Item> name: add-video            title: "Add video" shortcut: {Shortcut :alt :shift #\8} action-handler: {Event-Handler :together on-add-video} description: "Add video.")
      (<World-Action-Item> name: add-music            title: "Add music" shortcut: {Shortcut :alt :shift #\9} action-handler: {Event-Handler :together on-add-music} description: "Add music.")
      (<World-Action-Item> name: remove-stream        title: "Remove stream" shortcut: {Shortcut :alt :shift #\0} action-handler: {Event-Handler :together on-remove-stream} description: "Remove stream.")
      (<World-Action-Item> name: toggle-screen-share  title: "Share screen" shortcut: {Shortcut :alt :shift #\Y} action-handler: {Event-Handler :together on-toggle-screen-share} description: "Toggle screen share.")
      (<World-Action-Item> name: toggle-view-share    title: "Share together" shortcut: {Shortcut :alt :shift #\U} action-handler: {Event-Handler :together on-toggle-view-share} description: "Toggle together share.")
      (<World-Action-Item> name: capture-view         title: "Capture together" shortcut: {Shortcut :alt :shift #\L} action-handler: {Event-Handler :together on-capture-view} description: "Capture together to file."))))


@wait
(class Together-Navigate-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Navigate"
      (<World-Action-Item> name: goto-script          title: "Goto script" shortcut: {Shortcut :control :alt :shift #\S} action-handler: {Event-Handler :together on-goto-script} description: "Goto script.")
      (<World-Action-Item> name: goto-replay          title: "Goto replay" shortcut: {Shortcut :control :alt :shift #\R} action-handler: {Event-Handler :together on-goto-replay} description: "Goto replay.")
      (<World-Action-Item> name: goto-simulate        title: "Goto simulate" shortcut: {Shortcut :control :alt :shift #\T} action-handler: {Event-Handler :together on-goto-simulate} description: "Goto simulate."))))


(class Together-Profile-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Profile"
      (<World-Action-Item> name: profile-pulse        title: "Profile pulse" action-handler: {Event-Handler :together on-profile-pulse} description: "Profile pulse.")
      (<World-Action-Item> name: profile-bandwidth    title: "Profile bandwidth" shortcut: {Shortcut :control :shift #\B} action-handler: {Event-Handler :together on-profile-bandwidth} description: "Profile bandwidth.")
      (<World-Action-Item> name: profile-network      title: "Profile network" shortcut: {Shortcut :control :shift #\N} action-handler: {Event-Handler :together on-profile-network} description: "Profile network.")
      (<World-Action-Item> name: test-network         title: "Test network" shortcut: {Shortcut :alt :shift #\N} action-handler: {Event-Handler :together on-test-network} description: "Test network.")
      (<World-Action-Item> name: test-bbr             title: "Test BBR" shortcut: {Shortcut :alt :shift #\B} action-handler: {Event-Handler :together on-test-bbr} description: "Test BBR."))))


(class Together-Experiment-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Experiment"
      (<World-Action-Item> name: toggle-experiment    title: "Experiment" action-handler: {Event-Handler :together on-toggle-experiment} shortcut: {Shortcut :alt :shift #\X} description: "Toggle experiment panel.")
      (<World-Action-Item> name: run-experiment7      title: "Run experiment #7" action-handler: {Event-Handler :together on-run-experiment7} shortcut: {Shortcut :control #\7} description: "Run experiment #7.")
      (<World-Action-Item> name: run-experiment8      title: "Run experiment #8" action-handler: {Event-Handler :together on-run-experiment8} shortcut: {Shortcut :control #\8} description: "Run experiment #8.")
      (<World-Action-Item> name: run-experiment9      title: "Run experiment #9" action-handler: {Event-Handler :together on-run-experiment9} shortcut: {Shortcut :control #\9} description: "Run experiment #9.")
      (<World-Action-Item> name: run-experiment0      title: "Run experiment #0" action-handler: {Event-Handler :together on-run-experiment0} shortcut: {Shortcut :control #\0} description: "Run experiment #0."))))


(class Together-Script-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Script"
      (<World-Action-Item> name: update-catalogs      title: "Update catalogs" shortcut: {Shortcut :control :alt #\U} action-handler: {Event-Handler :application on-update-catalogs} description: "Update catalogs.")
      (<World-Action-Item> name: edit-definition      title: "Edit definition" shortcut: {Shortcut F12} alternate-shortcut: {Shortcut :alt #\.} action-handler: {Event-Handler :application on-edit-definition} description: "Edit definition.")
      (<World-Action-Item> name: edit-script          title: "Edit test" shortcut: {Shortcut :control :alt #\T} action-handler: {Event-Handler :together on-edit-test} description: "Edit test.")
      (<World-Action-Item> name: edit-script1         title: "Edit test #1" shortcut: {Shortcut :control :alt #\1} action-handler: {Event-Handler :together on-edit-test1} description: "Edit test #1.")
      (<World-Action-Item> name: edit-script2         title: "Edit test #2" shortcut: {Shortcut :control :alt #\2} action-handler: {Event-Handler :together on-edit-test2} description: "Edit test #2.")
      (<World-Action-Item> name: edit-script3         title: "Edit test #3" shortcut: {Shortcut :control :alt #\3} action-handler: {Event-Handler :together on-edit-test3} description: "Edit test #3.")
      (<World-Action-Item> name: edit-script4         title: "Edit test #4" shortcut: {Shortcut :control :alt #\4} action-handler: {Event-Handler :together on-edit-test4} description: "Edit test #4.")
      (<World-Action-Item> name: edit-script5         title: "Edit test #5" shortcut: {Shortcut :control :alt #\5} action-handler: {Event-Handler :together on-edit-test5} description: "Edit test #5.")
      (<World-Action-Item> name: edit-script6         title: "Edit test #6" shortcut: {Shortcut :control :alt #\6} action-handler: {Event-Handler :together on-edit-test6} description: "Edit test #6.")
      (<World-Action-Item> name: edit-script7         title: "Edit test #7" shortcut: {Shortcut :control :alt #\7} action-handler: {Event-Handler :together on-edit-test7} description: "Edit test #7.")
      (<World-Action-Item> name: edit-script8         title: "Edit test #8" shortcut: {Shortcut :control :alt #\8} action-handler: {Event-Handler :together on-edit-test8} description: "Edit test #8.")
      (<World-Action-Item> name: edit-script9         title: "Edit test #9" shortcut: {Shortcut :control :alt #\9} action-handler: {Event-Handler :together on-edit-test9} description: "Edit test #9.")
      (<World-Action-Item> name: edit-script0         title: "Edit test #0" shortcut: {Shortcut :control :alt #\0} action-handler: {Event-Handler :together on-edit-test0} description: "Edit test #0."))))


(class Together-Debug-Actions extends World-Actions
  
  
  (form
    (<install>                                             title: "Debug"
      (<World-Action-Item> name: toggle-mode               title: "Fill mode" shortcut: {Shortcut :alt :shift #\M} action-handler: {Event-Handler :together on-toggle-mode} description: "Toggle mode.")
      (<World-Action-Item> name: toggle-hide               title: "Autohide interface" shortcut: {Shortcut :alt :shift #\H} action-handler: {Event-Handler :together on-toggle-hide} description: "Toggle autohide interface.")
      (<World-Action-Item> name: toggle-debug              title: "Debug" shortcut: {Shortcut :control :shift #\D} action-handler: {Event-Handler :together on-toggle-debug} description: "Toggle debug.")
      (<World-Action-Item> name: toggle-debug-energy       title: "Debug energy" shortcut: {Shortcut :control :shift #\E} action-handler: {Event-Handler :together on-toggle-debug-energy} description: "Toggle debug energy.")
      (<World-Action-Item> name: toggle-debug-audio        title: "Debug audio" shortcut: {Shortcut :control :shift #\A} action-handler: {Event-Handler :together on-toggle-debug-audio} description: "Toggle debug audio.")
      (<World-Action-Item> name: toggle-debug-video        title: "Debug video" shortcut: {Shortcut :control :shift #\V} action-handler: {Event-Handler :together on-toggle-debug-video} description: "Toggle debug video.")
      (<World-Action-Item> name: toggle-debug-media        title: "Debug media" shortcut: {Shortcut :control :shift #\M} action-handler: {Event-Handler :together on-toggle-debug-media} description: "Toggle debug media.")
      (<World-Action-Item> name: toggle-debug-flow         title: "Debug flow" shortcut: {Shortcut :control :shift #\F} action-handler: {Event-Handler :together on-toggle-debug-flow} description: "Toggle debug flow.")
      (<World-Action-Item> name: toggle-debug-live         title: "Debug live" shortcut: {Shortcut :control :shift #\L} action-handler: {Event-Handler :together on-toggle-debug-live} description: "Toggle debug live.")
      (<World-Action-Item> name: toggle-admin              title: "Admin" shortcut: {Shortcut :alt :shift #\W} action-handler: {Event-Handler :together on-toggle-admin} description: "Toggle admin.")
      (<World-Action-Item> name: toggle-evolution          title: "Timeline" shortcut: {Shortcut :alt #\T} action-handler: {Event-Handler :together on-toggle-evolution} description: "Toggle timeline.")
      (<World-Action-Item> name: toggle-visualizer         title: "Visualizer" shortcut: {Shortcut :alt :shift #\V} action-handler: {Event-Handler :together on-toggle-visualizer} description: "Toggle visualizer.")
      (<World-Action-Item> name: toggle-stress             title: "Stress" shortcut: {Shortcut :control :shift #\S} action-handler: {Event-Handler :together on-toggle-stress} description: "Toggle stress.")
      (<World-Action-Item> name: request-evolutions        title: "Request evolutions" shortcut: {Shortcut :alt :shift #\E} action-handler: {Event-Handler :together on-request-evolutions} description: "Request evolutions.")
      (<World-Action-Item> name: request-replays           title: "Request replays" shortcut: {Shortcut :alt :shift #\R} action-handler: {Event-Handler :together on-request-replays} description: "Request replays.")
      (<World-Action-Item> name: request-captures          title: "Request captures" shortcut: {Shortcut :alt :shift #\K} action-handler: {Event-Handler :together on-request-captures} description: "Request captures.")
      (<World-Action-Item> name: show-captures             title: "Show captures" shortcut: {Shortcut :alt :shift #\J} action-handler: {Event-Handler :together on-show-captures} description: "Show captures.")
      (<World-Action-Item> name: add-bookmark              title: "Add bookmark" action-handler: {Event-Handler :application on-add-bookmark} shortcut: {Shortcut :alt #\B} description: "Add bookmark.")
      (<World-Action-Item> name: test                      title: "Test" action-handler: {Event-Handler :application on-test} shortcut: {Shortcut :control #\T} description: "Test."))))


;;;
;;;; Bindings
;;;


(class Together-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      ;; Application
      (<!>                           name: text
        (<!>                         name: move-backward-char   visible?: #t)
        (<!>                         name: extend-backward-char visible?: #t)
        (<!>                         name: move-forward-char    visible?: #t)
        (<!>                         name: extend-forward-char  visible?: #t)
        (<!>                         name: delete-char          visible?: #t)
        (<!>                         name: home                 visible?: #t)
        (<!>                         name: extend-home          visible?: #t)
        (<!>                         name: end                  visible?: #t)
        (<!>                         name: extend-end           visible?: #t))
      (<!>                           name: tree
        (<!>                         name: move-upward          visible?: #t)
        (<!>                         name: move-downward        visible?: #t))
      (<!>                           name: view
        (<!>                         name: escape               visible?: #t)
        (<!>                         name: backspace            visible?: #t)
        (<!>                         name: return               visible?: #t)
        (<!>                         name: undo                 visible?: #t)
        (<!>                         name: redo                 visible?: #t)
        (<!>                         name: cut                  visible?: #t)
        (<!>                         name: copy                 visible?: #t)
        (<!>                         name: paste                visible?: #t)
        (<!>                         name: select-all           visible?: #t)
        (<!>                         name: move-left            visible?: #t)
        (<!>                         name: extend-left          visible?: #t)
        (<!>                         name: move-up              visible?: #t)
        (<!>                         name: extend-up            visible?: #t)
        (<!>                         name: move-right           visible?: #t)
        (<!>                         name: extend-right         visible?: #t)
        (<!>                         name: move-down            visible?: #t)
        (<!>                         name: extend-down          visible?: #t))
      ;; Scripting
      (<Code-Text-Actions>           name: code-text)
      (<Lisp-Text-Actions>           name: lisp-text)
      (<Jazz-Text-Actions>           name: jazz-text)
      (<Script-Text-Actions>         name: script-text)
      (<Search-Mode-Actions>         name: search-mode)
      (<Highlight-Mode-Actions>      name: highlight-mode)
      (<Extended-Mode-Actions>       name: extended-mode)
      (<Execute-Mode-Actions>        name: execute-mode)
      (<Find-Mode-Actions>           name: find-mode)
      ;; Menu
      (<Together-Menu-Actions>       name: together-menu)
      ;; World
      (<World-Main-Actions>          name: world-main
        (<!>                         name: open-welcome         title: "Go back to the gathering" shortcut: {Shortcut :alt :shift #\G} action-handler: {Event-Handler :together on-goto-gathering} description: "Open the gathering screen.")
        (<!>                         name: quit-world           title: "Quit Together"))
      (<World-Graphics-Actions>      name: world-graphics)
      (<World-Sound-Actions>         name: world-sound)
      (<World-Interface-Actions>     name: world-interface)
      (<World-Zone-Actions>          name: world-zone)
      (<World-Movement-Actions>      name: world-movement)
      (<World-Camera-Actions>        name: world-camera)
      (<World-Game-Actions>          name: world-game)
      (<World-Spell-Actions>         name: world-spell)
      (<World-People-Actions>        name: world-people)
      (<World-Chat-Actions>          name: world-chat)
      (<World-Showcase-Actions>      name: world-showcase)
      (<World-Build-Actions>         name: world-build)
      (<World-Target-Actions>        name: world-target)
      (<World-History-Actions>       name: world-history)
      (<World-Tile-Actions>          name: world-tile)
      (<World-Script-Actions>        name: world-script)
      (<World-Debug-Actions>         name: world-debug)
      (<World-Tutorial-Actions>      name: world-tutorial)
      (<World-Objective-Actions>     name: world-objective)
      (<World-Anonymous-Actions>     name: world-anonymous)
      ;; Together
      (<Together-Audio-Actions>      name: together-audio)
      (<Together-Video-Actions>      name: together-video)
      (<Together-Circle-Actions>     name: together-circle)
      (<Together-View-Actions>       name: together-view)
      (<Together-Record-Actions>     name: together-record)
      (<Together-Share-Actions>      name: together-share)
      @wait
      (<Together-Navigate-Actions>   name: together-navigate)
      (<Together-Profile-Actions>    name: together-profile)
      (<Together-Experiment-Actions> name: together-experiment)
      (<Together-Script-Actions>     name: together-script)
      (<Together-Debug-Actions>      name: together-debug))))


;;;
;;;; Unverified
;;;


(define-trait unverified-bindings Bindings
  (<Role-Trait>        name: user
    (<install>
      (<world-main!>
        (<!>                 name: graphics-options           visible?: #t)
        (<!>                 name: bindings-viewer            visible?: #t)
        @wait-having-news!
        (<!>                 name: view-news                  visible?: #t)
        (<!>                 name: open-about                 visible?: #t)
        (<!>                 name: open-welcome               visible?: #t)
        (<!>                 name: quit-world                 visible?: #t))
      (<world-interface!>
        (<!>                 name: toggle-windowed-mode       visible?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              visible?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                visible?: #t)
        (<!>                 name: command-message            visible?: #t)
        (<!>                 name: repeat-previous            visible?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               visible?: #t)
        (<!>                 name: leave-group                visible?: #t)
        (<!>                 name: leave-circle               visible?: #t)
        (<!>                 name: goto-login                 visible?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          visible?: #t)
        (<!>                 name: toggle-push-to-talk        visible?: #t)
        (<!>                 name: talk                       visible?: #t)
        (<!>                 name: toggle-rndenoise           visible?: #t)
        (<!>                 name: audio-options              visible?: #t))
      (<together-video!>
        (<!>                 name: toggle-camera              visible?: #t)
        (<!>                 name: change-quality             visible?: #t)
        (<!>                 name: video-options              visible?: #t))
      (<together-circle!>
        (<!>                 name: presence-mode              visible?: #t)
        (<!>                 name: focus-mode                 visible?: #t)
        (<!>                 name: gallery-mode               visible?: #t)
        (<!>                 name: bring-to-front             visible?: #t)
        (<!>                 name: backspace-press            visible?: #t)
        (<!>                 name: enter-press                visible?: #t)
        (<!>                 name: left-press                 visible?: #t)
        (<!>                 name: right-press                visible?: #t)
        (<!>                 name: up-press                   visible?: #t)
        (<!>                 name: down-press                 visible?: #t)
        (<!>                 name: tab-press                  visible?: #t)
        (<!>                 name: number-press               visible?: #t)))))


;;;
;;;; User
;;;


(define-trait user-bindings Bindings
  (<Role-Trait>        name: user
    (<install>
      (<world-main!>
        (<!>                 name: graphics-options           visible?: #t)
        @version1 (<!>                 name: sound-options              visible?: #t)
        @version1 (<!>                 name: interface-options          visible?: #t)
        (<!>                 name: bindings-viewer            visible?: #t)
        (<!>                 name: unstuck-character          visible?: #t)
        @wait-having-news!
        (<!>                 name: view-news                  visible?: #t)
        @version1 (<!>                 name: view-roadmap               visible?: #t)
        @version1 (<!>                 name: view-help                  visible?: #t)
        (<!>                 name: open-about                 visible?: #t)
        (<!>                 name: open-welcome               visible?: #t)
        (<!>                 name: quit-world                 visible?: #t))
      (<world-interface!>
        @version0
        (<!>                 name: toggle-interface           visible?: #t)
        (<!>                 name: toggle-windowed-mode       visible?: #t))
      (<world-movement!>
        (<!>                 name: rotate-player              visible?: #t)
        (<!>                 name: move-forward               visible?: #t)
        (<!>                 name: move-backward              visible?: #t)
        (<!>                 name: move-left                  visible?: #t)
        (<!>                 name: move-right                 visible?: #t))
      (<world-camera!>
        (<!>                 name: rotate-camera              visible?: #t)
        (<!>                 name: zoom-in/out                visible?: #t))
      (<world-game!>
        (<!>                 name: jump                       visible?: #t)
        (<!>                 name: action                     visible?: #t)
        (<!>                 name: toggle-glow                visible?: #t)
        (<!>                 name: compass-panel              visible?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              visible?: #t)
        (<!>                 name: toggle-invite              visible?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                visible?: #t)
        (<!>                 name: command-message            visible?: #t)
        @version1 (<!>                 name: command-slash              visible?: #t)
        (<!>                 name: repeat-previous            visible?: #t))
      (<world-debug!>
        @version1 (<!>                 name: toggle-info                visible?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               visible?: #t)
        (<!>                 name: create-circle              visible?: #t)
        (<!>                 name: leave-group                visible?: #t)
        (<!>                 name: leave-circle               visible?: #t)
        (<!>                 name: goto-login                 visible?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          visible?: #t)
        (<!>                 name: toggle-push-to-talk        visible?: #t)
        (<!>                 name: talk                       visible?: #t)
        @wait-live-change (<!>                 name: toggle-echo-cancel         visible?: #t)
        @wait-live-change (<!>                 name: toggle-noise-suppress      visible?: #t)
        (<!>                 name: toggle-rndenoise           visible?: #t)
        (<!>                 name: audio-options              visible?: #t))
      (<together-video!>
        (<!>                 name: toggle-camera              visible?: #t)
        (<!>                 name: change-quality             visible?: #t)
        (<!>                 name: video-options              visible?: #t))
      (<together-circle!>
        (<!>                 name: avatar-mode                visible?: #t)
        (<!>                 name: presence-mode              visible?: #t)
        (<!>                 name: focus-mode                 visible?: #t)
        (<!>                 name: gallery-mode               visible?: #t)
        (<!>                 name: bring-to-front             visible?: #t)
        (<!>                 name: backspace-press            visible?: #t)
        (<!>                 name: enter-press                visible?: #t)
        (<!>                 name: left-press                 visible?: #t)
        (<!>                 name: right-press                visible?: #t)
        (<!>                 name: up-press                   visible?: #t)
        (<!>                 name: down-press                 visible?: #t)
        (<!>                 name: tab-press                  visible?: #t)
        (<!>                 name: number-press               visible?: #t)
        (<!>                 name: circle-options             visible?: #t))
      @wait
      (<together-record!>
        (<!>                 name: start-recording            visible?: #t)
        (<!>                 name: stop-recording             visible?: #t)
        (<!>                 name: process-recording          visible?: #t))
      (<together-share!>
        (<!>                 name: toggle-streams             visible?: #t)
        (<!>                 name: toggle-screen-share        visible?: #t)
        (<!>                 name: toggle-view-share          visible?: #t)
        (<!>                 name: capture-view               visible?: #t))
      (<together-profile!>
        (<!>                 name: test-network               visible?: #t)))))


;;;
;;;; Builder
;;;


(define-trait builder-bindings Bindings
  (<Role-Trait>              name: builder
    (<install>
      (<world-main!>
        (<!>                 name: graphics-options           visible?: #t)
        @version1 (<!>                 name: sound-options              visible?: #t)
        @version1 (<!>                 name: interface-options          visible?: #t)
        (<!>                 name: bindings-viewer            visible?: #t)
        (<!>                 name: unstuck-character          visible?: #t)
        @wait-having-news!
        (<!>                 name: view-news                  visible?: #t)
        @version1 (<!>                 name: view-roadmap               visible?: #t)
        @version1 (<!>                 name: view-help                  visible?: #t)
        (<!>                 name: open-about                 visible?: #t)
        (<!>                 name: open-welcome               visible?: #t)
        (<!>                 name: quit-world                 visible?: #t))
      (<world-graphics!>
        @version1 (<!>                 name: toggle-occlusion           visible?: #t)
        @version1 (<!>                 name: toggle-wireframe           visible?: #t)
        @version1 (<!>                 name: toggle-x-rays              visible?: #t)
        @too-much (<!>                 name: toggle-draw-me             visible?: #t)
        @too-much (<!>                 name: toggle-blocks              visible?: #t)
        @too-much (<!>                 name: toggle-models              visible?: #t))
      @version1
      (<world-sound!>
        (<!>                 name: toggle-music               visible?: #t)
        (<!>                 name: change-music               visible?: #t)
        (<!>                 name: display-music              visible?: #t)
        (<!>                 name: toggle-ambience            visible?: #t)
        (<!>                 name: toggle-sound               visible?: #t))
      (<world-interface!>
        @version0
        (<!>                 name: toggle-interface           visible?: #t)
        (<!>                 name: toggle-windowed-mode       visible?: #t))
      (<world-movement!>
        (<!>                 name: rotate-player              visible?: #t)
        (<!>                 name: move-forward               visible?: #t)
        (<!>                 name: move-backward              visible?: #t)
        (<!>                 name: move-left                  visible?: #t)
        (<!>                 name: move-right                 visible?: #t)
        @broken-by-action-on-e
        (<!>                 name: rotate-left                visible?: #t)
        @broken-by-action-on-e
        (<!>                 name: rotate-right               visible?: #t))
      (<world-camera!>
        (<!>                 name: rotate-camera              visible?: #t)
        (<!>                 name: zoom-in/out                visible?: #t)
        @version1 (<!>                 name: move-up                    visible?: #t)
        @version1 (<!>                 name: move-down                  visible?: #t)
        @version1 (<!>                 name: person-motion              visible?: #t)
        @version1 (<!>                 name: orbit-motion               visible?: #t)
        @version1 (<!>                 name: free-motion                visible?: #t)
        (<!>                 name: toggle-autotrack-mode      visible?: #t))
      (<world-game!>
        (<!>                 name: jump                       visible?: #t)
        (<!>                 name: action                     visible?: #t)
        @too-much (<!>                 name: toggle-ride                visible?: #t)
        @version1 (<!>                 name: toggle-fly                 visible?: #t)
        @version1 (<!>                 name: toggle-vehicle             visible?: #t)
        (<!>                 name: toggle-glow                visible?: #t)
        (<!>                 name: compass-panel              visible?: #t)
        @too-much (<!>                 name: combat-panel               visible?: #t)
        @too-much (<!>                 name: character-panel            visible?: #t)
        @version1 (<!>                 name: bag-panel                  visible?: #t)
        (<!>                 name: belt-panel                 visible?: #t))
      @too-much
      (<world-spell!>
        (<!>                 name: bullet                     visible?: #t)
        (<!>                 name: arrow                      visible?: #t)
        (<!>                 name: sprint                     visible?: #t)
        (<!>                 name: warp                       visible?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              visible?: #t)
        (<!>                 name: toggle-invite              visible?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                visible?: #t)
        (<!>                 name: command-message            visible?: #t)
        @version1 (<!>                 name: command-slash              visible?: #t)
        (<!>                 name: repeat-previous            visible?: #t))
      (<world-showcase!>
        (<!>                 name: no-showcase                visible?: #t)
        (<!>                 name: blocks-showcase            visible?: #t)
        (<!>                 name: models-showcase            visible?: #t)
        @too-much (<!>                 name: gadgets-showcase           visible?: #t)
        @too-much (<!>                 name: shaders-showcase           visible?: #t)
        @too-much (<!>                 name: animations-showcase        visible?: #t)
        @too-much (<!>                 name: skyboxes-showcase          visible?: #t))
      (<world-build!>
        (<!>                 name: add-element                visible?: #t)
        (<!>                 name: remove-element             visible?: #t)
        (<!>                 name: change-element             visible?: #t)
        (<!>                 name: select-target              visible?: #t)
        (<!>                 name: delete-target              visible?: #t)
        @too-much (<!>                 name: toggle-grid                visible?: #t)
        @too-much (<!>                 name: toggle-grid-z              visible?: #t)
        @too-much (<!>                 name: toggle-grid-y              visible?: #t)
        @too-much (<!>                 name: toggle-grid-x              visible?: #t)
        @too-much (<!>                 name: move-grid                  visible?: #t)
        @too-much (<!>                 name: decrease-grid              visible?: #t)
        @too-much (<!>                 name: increase-grid              visible?: #t)
        @too-much (<!>                 name: change-editor-mode         visible?: #t))
      @too-much
      (<world-target!>
        (<!>                 name: select-target-mode         visible?: #t)
        (<!>                 name: move-target-mode           visible?: #t)
        (<!>                 name: rotate-target-mode         visible?: #t)
        (<!>                 name: scale-target-mode          visible?: #t)
        (<!>                 name: skeleton-target-mode       visible?: #t))
      (<world-debug!>
        @too-much (<!>                 name: toggle-info                visible?: #t)
        @too-much (<!>                 name: toggle-profiler            visible?: #t)
        @too-much (<!>                 name: toggle-axes                visible?: #t)
        @version1 (<!>                 name: toggle-orientation         visible?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               visible?: #t)
        (<!>                 name: create-circle              visible?: #t)
        (<!>                 name: leave-group                visible?: #t)
        (<!>                 name: leave-circle               visible?: #t)
        (<!>                 name: goto-login                 visible?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          visible?: #t)
        (<!>                 name: toggle-push-to-talk        visible?: #t)
        (<!>                 name: talk                       visible?: #t)
        @wait-live-change (<!>                 name: toggle-echo-cancel         visible?: #t)
        @wait-live-change (<!>                 name: toggle-noise-suppress      visible?: #t)
        (<!>                 name: toggle-rndenoise           visible?: #t)
        (<!>                 name: audio-options              visible?: #t))
      (<together-video!>
        (<!>                 name: toggle-camera              visible?: #t)
        (<!>                 name: change-quality             visible?: #t)
        (<!>                 name: video-options              visible?: #t))
      (<together-circle!>
        (<!>                 name: avatar-mode                visible?: #t)
        (<!>                 name: presence-mode              visible?: #t)
        (<!>                 name: focus-mode                 visible?: #t)
        (<!>                 name: gallery-mode               visible?: #t)
        (<!>                 name: bring-to-front             visible?: #t)
        (<!>                 name: backspace-press            visible?: #t)
        (<!>                 name: enter-press                visible?: #t)
        (<!>                 name: left-press                 visible?: #t)
        (<!>                 name: right-press                visible?: #t)
        (<!>                 name: up-press                   visible?: #t)
        (<!>                 name: down-press                 visible?: #t)
        (<!>                 name: tab-press                  visible?: #t)
        (<!>                 name: number-press               visible?: #t)
        (<!>                 name: circle-options             visible?: #t))
      @wait
      (<together-record!>
        (<!>                 name: start-recording            visible?: #t)
        (<!>                 name: stop-recording             visible?: #t)
        (<!>                 name: process-recording          visible?: #t))
      (<together-share!>
        (<!>                 name: toggle-streams             visible?: #t)
        (<!>                 name: toggle-screen-share        visible?: #t)
        (<!>                 name: toggle-view-share          visible?: #t)
        (<!>                 name: capture-view               visible?: #t))
      (<together-profile!>
        (<!>                 name: test-network               visible?: #t)))))


;;;
;;;; Developer
;;;


(define-trait developer-bindings Bindings
  (<Role-Trait>              name: developer
    (<install>
      (<application!>
        (<!>                 name: backward-history           visible?: #t)
        (<!>                 name: forward-history            visible?: #t))
      (<view!>
        (<!>                 name: select-all                 visible?: #t shortcut: {Shortcut :control :alt #\A}))
      (<text!>
        (<!>                 name: move-backward-word         visible?: #t)
        (<!>                 name: extend-backward-word       visible?: #t)
        (<!>                 name: move-forward-word          visible?: #t)
        (<!>                 name: extend-forward-word        visible?: #t)
        (<!>                 name: move-upward                visible?: #t)
        (<!>                 name: extend-upward              visible?: #t)
        (<!>                 name: move-downward              visible?: #t)
        (<!>                 name: extend-downward            visible?: #t)
        (<!>                 name: delete-char                visible?: #t)
        (<!>                 name: delete-word                visible?: #t)
        (<!>                 name: home                       visible?: #t)
        (<!>                 name: extend-home                visible?: #t)
        (<!>                 name: end                        visible?: #t)
        (<!>                 name: extend-end                 visible?: #t)
        (<!>                 name: document-home              visible?: #t alternate-shortcut: {Shortcut :meta Up})
        (<!>                 name: document-end               visible?: #t alternate-shortcut: {Shortcut :meta Down})
        (<!>                 name: paste&next                 visible?: #t)
        (<!>                 name: paste-cycle-ring           visible?: #t shortcut: {Shortcut :alt #\V})
        (<!>                 name: paste-cycle-ring-reversed  visible?: #t shortcut: {Shortcut :alt :shift #\V})
        (<!>                 name: kill-line                  visible?: #t)
        (<!>                 name: center-caret               visible?: #t)
        (<!>                 name: top-caret                  visible?: #t)
        (<!>                 name: one/no-space               visible?: #t))
      (<code-text!>
        (<!>                 name: evaluate                   visible?: #t)
        (<!>                 name: backward-outline           visible?: #t)
        (<!>                 name: forward-outline            visible?: #t))
      (<lisp-text!>
        (<!>                 name: tabulate                   visible?: #t)
        (<!>                 name: highlight-declaration      visible?: #t)
        (<!>                 name: remove-highlights          visible?: #t))
      (<script-text!>
        (<Action-Item>       name: search-forward-mode        visible?: #t action-handler: {Event-Handler :focus on-search-forward-mode} shortcut: {Shortcut :control #\S})
        (<Action-Item>       name: search-backward-mode       visible?: #t action-handler: {Event-Handler :focus on-search-backward-mode} shortcut: {Shortcut :control #\R})
        (<Action-Item>       name: search-current             visible?: #t action-handler: {Event-Handler :focus on-search-current} shortcut: {Shortcut :alt #\S})
        (<Action-Item>       name: select-outer               visible?: #t action-handler: {Event-Handler :focus on-select-outer} shortcut: {Shortcut :control Space}))
      (<search-mode!>
        (<!>                 name: whole-words                visible?: #t)
        (<!>                 name: ignore-case                visible?: #t)
        (<!>                 name: regexp                     visible?: #t)
        (<!>                 name: forward                    visible?: #t)
        (<!>                 name: backward                   visible?: #t)
        (<!>                 name: current                    visible?: #t)
        (<!>                 name: widen                      visible?: #t)
        (<!>                 name: center-caret               visible?: #t)
        (<!>                 name: home                       visible?: #t)
        (<!>                 name: end                        visible?: #t)
        (<!>                 name: highlight                  visible?: #t)
        (<!>                 name: finish                     visible?: #t)
        (<!>                 name: cancel                     visible?: #t))
      (<highlight-mode!>
        (<!>                 name: highlight                  visible?: #t))
      (<world-main!>
        (<!>                 name: graphics-options           visible?: #t)
        (<!>                 name: sound-options              visible?: #t)
        (<!>                 name: interface-options          visible?: #t)
        (<!>                 name: bindings-viewer            visible?: #t)
        (<!>                 name: unstuck-character          visible?: #t)
        @wait-having-news!
        (<!>                 name: view-news                  visible?: #t)
        (<!>                 name: view-roadmap               visible?: #t)
        (<!>                 name: view-help                  visible?: #t)
        (<!>                 name: open-about                 visible?: #t)
        (<!>                 name: open-welcome               visible?: #t)
        (<!>                 name: quit-world                 visible?: #t))
      (<world-graphics!>
        (<!>                 name: toggle-occlusion           visible?: #t)
        (<!>                 name: toggle-wireframe           visible?: #t)
        (<!>                 name: toggle-fog                 visible?: #t)
        (<!>                 name: toggle-gadgets             visible?: #t)
        (<!>                 name: toggle-normals             visible?: #t)
        (<!>                 name: toggle-x-rays              visible?: #t)
        (<!>                 name: toggle-redstone-x-rays     visible?: #t)
        (<!>                 name: toggle-draw-me             visible?: #t)
        (<!>                 name: toggle-blocks              visible?: #t)
        (<!>                 name: toggle-models              visible?: #t)
        (<!>                 name: toggle-multisampling       visible?: #t))
      (<world-sound!>
        (<!>                 name: toggle-music               visible?: #t)
        (<!>                 name: change-music               visible?: #t)
        (<!>                 name: display-music              visible?: #t)
        (<!>                 name: toggle-ambience            visible?: #t)
        (<!>                 name: toggle-sound               visible?: #t))
      (<world-interface!>
        (<!>                 name: toggle-interface           visible?: #t)
        (<!>                 name: toggle-windowed-mode       visible?: #t)
        (<!>                 name: toggle-user                visible?: #t))
      (<world-zone!>
        (<!>                 name: zone-reload                visible?: #t)
        (<!>                 name: zone-regenerate            visible?: #t))
      (<world-movement!>
        (<!>                 name: rotate-player              visible?: #t)
        (<!>                 name: move-forward               visible?: #t)
        (<!>                 name: move-backward              visible?: #t)
        (<!>                 name: move-left                  visible?: #t)
        (<!>                 name: move-right                 visible?: #t)
        @broken-by-action-on-e
        (<!>                 name: rotate-left                visible?: #t)
        @broken-by-action-on-e
        (<!>                 name: rotate-right               visible?: #t)
        (<!>                 name: toggle-run                 visible?: #t))
      (<world-camera!>
        (<!>                 name: rotate-camera              visible?: #t)
        (<!>                 name: zoom-in/out                visible?: #t)
        (<!>                 name: move-up                    visible?: #t)
        (<!>                 name: move-down                  visible?: #t)
        (<!>                 name: person-motion              visible?: #t)
        (<!>                 name: orbit-motion               visible?: #t)
        (<!>                 name: free-motion                visible?: #t)
        @needs-a-lot-more-work
        (<!>                 name: toggle-camera-smoothing    visible?: #t)
        (<!>                 name: toggle-camera-follow       visible?: #t)
        (<!>                 name: toggle-autotrack-mode      visible?: #t))
      (<world-game!>
        (<!>                 name: jump                       visible?: #t)
        (<!>                 name: action                     visible?: #t)
        (<!>                 name: mind-control               visible?: #t)
        (<!>                 name: toggle-aim                 visible?: #t)
        (<!>                 name: toggle-free-aim            visible?: #t)
        (<!>                 name: toggle-ride                visible?: #t)
        (<!>                 name: toggle-fly                 visible?: #t)
        (<!>                 name: toggle-vehicle             visible?: #t)
        (<!>                 name: toggle-glow                visible?: #t)
        (<!>                 name: compass-panel              visible?: #t)
        (<!>                 name: map-panel                  visible?: #t)
        (<!>                 name: combat-panel               visible?: #t)
        (<!>                 name: character-panel            visible?: #t)
        (<!>                 name: bag-panel                  visible?: #t)
        (<!>                 name: belt-panel                 visible?: #t))
      (<world-spell!>
        (<!>                 name: bullet                     visible?: #t)
        (<!>                 name: arrow                      visible?: #t)
        @wait
        (<!>                 name: rapid-fire                 visible?: #t)
        (<!>                 name: sprint                     visible?: #t)
        (<!>                 name: warp                       visible?: #t)
        (<!>                 name: dash                       visible?: #t))
      (<world-people!>
        (<!>                 name: toggle-people              visible?: #t)
        (<!>                 name: toggle-invite              visible?: #t)
        (<!>                 name: who-panel                  visible?: #t))
      (<world-chat!>
        (<!>                 name: toggle-chat                visible?: #t)
        (<!>                 name: command-message            visible?: #t)
        (<!>                 name: command-slash              visible?: #t)
        (<!>                 name: repeat-previous            visible?: #t))
      (<world-showcase!>
        (<!>                 name: showcase-menu              visible?: #t)
        (<!>                 name: no-showcase                visible?: #t)
        (<!>                 name: blocks-showcase            visible?: #t)
        (<!>                 name: models-showcase            visible?: #t)
        (<!>                 name: gadgets-showcase           visible?: #t)
        (<!>                 name: tiles-showcase             visible?: #t)
        (<!>                 name: shaders-showcase           visible?: #t)
        (<!>                 name: animations-showcase        visible?: #t)
        (<!>                 name: meshes-showcase            visible?: #t)
        (<!>                 name: textures-showcase          visible?: #t)
        (<!>                 name: skyboxes-showcase          visible?: #t))
      (<world-build!>
        (<!>                 name: add-element                visible?: #t)
        (<!>                 name: remove-element             visible?: #t)
        (<!>                 name: change-element             visible?: #t)
        (<!>                 name: select-target              visible?: #t)
        (<!>                 name: delete-target              visible?: #t)
        (<!>                 name: toggle-grid                visible?: #t)
        (<!>                 name: toggle-grid-z              visible?: #t)
        (<!>                 name: toggle-grid-y              visible?: #t)
        (<!>                 name: toggle-grid-x              visible?: #t)
        (<!>                 name: move-grid                  visible?: #t)
        (<!>                 name: decrease-grid              visible?: #t)
        (<!>                 name: increase-grid              visible?: #t)
        (<!>                 name: reset-textures             visible?: #t)
        (<!>                 name: change-editor-mode         visible?: #t))
      (<world-target!>
        (<!>                 name: select-target-mode         visible?: #t)
        (<!>                 name: move-target-mode           visible?: #t)
        (<!>                 name: rotate-target-mode         visible?: #t)
        (<!>                 name: scale-target-mode          visible?: #t)
        (<!>                 name: skeleton-target-mode       visible?: #t))
      (<world-history!>
        (<!>                 name: toggle-paused              visible?: #t)
        (<!>                 name: backward-history           visible?: #t)
        (<!>                 name: forward-history            visible?: #t)
        (<!>                 name: step-backward              visible?: #t)
        (<!>                 name: step-forward               visible?: #t)
        (<!>                 name: step-over                  visible?: #t)
        (<!>                 name: toggle-evaluate-future     visible?: #t))
      (<world-script!>
        (<!>                 name: test1                      visible?: #t)
        (<!>                 name: test2                      visible?: #t)
        (<!>                 name: test3                      visible?: #t)
        (<!>                 name: test4                      visible?: #t)
        (<!>                 name: test5                      visible?: #t)
        (<!>                 name: test6                      visible?: #t)
        (<!>                 name: test7                      visible?: #t)
        (<!>                 name: test8                      visible?: #t)
        (<!>                 name: test9                      visible?: #t)
        (<!>                 name: test0                      visible?: #t)
        (<!>                 name: run-script                 visible?: #t)
        (<!>                 name: run-last-script            visible?: #t)
        (<!>                 name: view-script                visible?: #t)
        (<!>                 name: view-workspace             visible?: #t)
        (<!>                 name: view-console               visible?: #t)
        (<!>                 name: view-debugger              visible?: #t)
        (<!>                 name: view-toolbox               visible?: #t)
        (<!>                 name: target-script              visible?: #t)
        (<!>                 name: cycle-panes                visible?: #t)
        (<!>                 name: zoom-horizontally          visible?: #t)
        (<!>                 name: zoom-vertically            visible?: #t)
        (<!>                 name: zoom-fullscreen            visible?: #t)
        (<!>                 name: run-selected-script        visible?: #t)
        (<!>                 name: clear-console              visible?: #t)
        (<!>                 name: clear-terminal             visible?: #t))
      (<world-debug!>
        (<!>                 name: toggle-info                visible?: #t)
        (<!>                 name: toggle-profiler            visible?: #t)
        (<!>                 name: toggle-profiler-all        visible?: #t)
        (<!>                 name: reset-profiler             visible?: #t)
        (<!>                 name: toggle-history             visible?: #t)
        (<!>                 name: all-chronology             visible?: #t)
        (<!>                 name: toggle-target              visible?: #t)
        (<!>                 name: toggle-gc-sound            visible?: #t)
        (<!>                 name: toggle-axes                visible?: #t)
        (<!>                 name: toggle-orientation         visible?: #t)
        (<!>                 name: toggle-debug-sections      visible?: #t)
        (<!>                 name: toggle-debug-sectors       visible?: #t)
        (<!>                 name: toggle-debug-areas         visible?: #t)
        (<!>                 name: garbage-collect            visible?: #t)
        (<!>                 name: explore-interface          visible?: #t))
      (<together-menu!>
        (<!>                 name: central-menu               visible?: #t)
        (<!>                 name: create-circle              visible?: #t)
        (<!>                 name: leave-group                visible?: #t)
        (<!>                 name: leave-circle               visible?: #t)
        (<!>                 name: goto-login                 visible?: #t))
      (<together-audio!>
        (<!>                 name: toggle-microphone          visible?: #t)
        (<!>                 name: toggle-push-to-talk        visible?: #t)
        (<!>                 name: talk                       visible?: #t)
        @wait-live-change (<!>                 name: toggle-echo-cancel         visible?: #t)
        @wait-live-change (<!>                 name: toggle-noise-suppress      visible?: #t)
        (<!>                 name: toggle-rndenoise           visible?: #t)
        (<!>                 name: audio-options              visible?: #t))
      (<together-video!>
        (<!>                 name: toggle-camera              visible?: #t)
        (<!>                 name: change-quality             visible?: #t)
        (<!>                 name: video-options              visible?: #t))
      (<together-circle!>
        (<!>                 name: avatar-mode                visible?: #t)
        (<!>                 name: presence-mode              visible?: #t)
        (<!>                 name: focus-mode                 visible?: #t)
        (<!>                 name: gallery-mode               visible?: #t)
        (<!>                 name: bring-to-front             visible?: #t)
        (<!>                 name: backspace-press            visible?: #t)
        (<!>                 name: enter-press                visible?: #t)
        (<!>                 name: left-press                 visible?: #t)
        (<!>                 name: right-press                visible?: #t)
        (<!>                 name: up-press                   visible?: #t)
        (<!>                 name: down-press                 visible?: #t)
        (<!>                 name: tab-press                  visible?: #t)
        (<!>                 name: number-press               visible?: #t)
        (<!>                 name: circle-options             visible?: #t))
      (<together-view!>
        (<!>                 name: toggle-paused              visible?: #t)
        (<!>                 name: seek-backward              visible?: #t)
        (<!>                 name: seek-forward               visible?: #t))
      (<together-record!>
        (<!>                 name: start-recording            visible?: #t)
        (<!>                 name: stop-recording             visible?: #t)
        (<!>                 name: process-recording          visible?: #t))
      (<together-share!>
        (<!>                 name: toggle-streams             visible?: #t)
        (<!>                 name: add-image                  visible?: #t)
        (<!>                 name: add-video                  visible?: #t)
        (<!>                 name: add-music                  visible?: #t)
        (<!>                 name: remove-stream              visible?: #t)
        (<!>                 name: toggle-screen-share        visible?: #t)
        (<!>                 name: toggle-view-share          visible?: #t)
        (<!>                 name: capture-view               visible?: #t))
      (<together-profile!>
        (<!>                 name: profile-pulse              visible?: #t)
        (<!>                 name: profile-bandwidth          visible?: #t)
        (<!>                 name: profile-network            visible?: #t)
        (<!>                 name: test-network               visible?: #t)
        (<!>                 name: test-bbr                   visible?: #t))
      (<together-experiment!>
        (<!>                 name: toggle-experiment          visible?: #t)
        (<!>                 name: run-experiment7            visible?: #t)
        (<!>                 name: run-experiment8            visible?: #t)
        (<!>                 name: run-experiment9            visible?: #t)
        (<!>                 name: run-experiment0            visible?: #t))
      (<together-script!>
        (<!>                 name: update-catalogs            visible?: #t)
        (<!>                 name: edit-definition            visible?: #t)
        (<!>                 name: edit-script                visible?: #t)
        (<!>                 name: edit-script1               visible?: #t)
        (<!>                 name: edit-script2               visible?: #t)
        (<!>                 name: edit-script3               visible?: #t)
        (<!>                 name: edit-script4               visible?: #t)
        (<!>                 name: edit-script5               visible?: #t)
        (<!>                 name: edit-script6               visible?: #t)
        (<!>                 name: edit-script7               visible?: #t)
        (<!>                 name: edit-script8               visible?: #t)
        (<!>                 name: edit-script9               visible?: #t)
        (<!>                 name: edit-script0               visible?: #t))
      (<together-debug!>
        (<!>                 name: toggle-mode                visible?: #t)
        (<!>                 name: toggle-hide                visible?: #t)
        (<!>                 name: toggle-debug               visible?: #t)
        (<!>                 name: toggle-debug-energy        visible?: #t)
        (<!>                 name: toggle-debug-audio         visible?: #t)
        (<!>                 name: toggle-debug-video         visible?: #t)
        (<!>                 name: toggle-debug-media         visible?: #t)
        (<!>                 name: toggle-debug-flow          visible?: #t)
        (<!>                 name: toggle-debug-live          visible?: #t)
        (<!>                 name: toggle-evolution           visible?: #t)
        (<!>                 name: toggle-stress              visible?: #t)
        (<!>                 name: add-bookmark               visible?: #t)
        (<!>                 name: test                       visible?: #t)))))


;;;
;;;; Admin
;;;


(define-trait admin-bindings Bindings
  (<Role-Trait>              name: admin
    (<install>
      (<together-share!>
        (<!>                 name: preprocess-streams         visible?: #t)
        (<!>                 name: preprocess-qualities       visible?: #t))
      (<together-debug!>
        (<!>                 name: toggle-admin               visible?: #t)
        (<!>                 name: toggle-visualizer          visible?: #t)
        (<!>                 name: request-evolutions         visible?: #t)
        (<!>                 name: request-replays            visible?: #t)
        (<!>                 name: request-captures           visible?: #t)
        (<!>                 name: show-captures              visible?: #t)))))


;;;
;;;; Windows
;;;


(define-trait windows-bindings Bindings
  (<Trait>            name: windows
    (<install>
      (<application~>
        (<!>          name: new                          shortcut: {Shortcut :control #\N})
        (<!>          name: close                        shortcut: {Shortcut :control F4})
        (<!>          name: print                        shortcut: {Shortcut :control #\P})
        (<!>          name: print-layout                 shortcut: {Shortcut :control :shift #\P})
        (<!>          name: print-preview                shortcut: {Shortcut :alt #\P})
        (<!>          name: quit                         shortcut: {Shortcut :alt F4})
        (<!>          name: next-frame                   shortcut: {Shortcut :control F6})
        (<!>          name: previous-frame               shortcut: {Shortcut :control :shift F6})
        (<!>          name: current-frame                shortcut: {Shortcut F6}))
      (<guest~>
        (<!>          name: save                         shortcut: {Shortcut :control #\S}))
      (<view~>
        (<!>          name: redo                         shortcut: {Shortcut :control #\Y}))
      (<text~>
        (<!>          name: delete-char                  alternate-shortcut: {Shortcut :control #\D}))
      (<world-main~>
        (<!>          name: quit-world                   shortcut: {Shortcut :alt F4}))
      (<world-interface~>
        (<!>          name: toggle-windowed-mode         shortcut: {Shortcut F11}))))))
