;;;============
;;;  Together
;;;============
;;;
;;;; Together Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.appl jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.command)
        (jazz.component)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.debugger.stub)
        (jazz.editor)
        (jazz.editor.commonlisp)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.editor.scheme)
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.listener)
        (jazz.markup)
        (jazz.menu)
        (jazz.opengl.window)
        (jazz.platform)
        (jazz.presence)
        (jazz.project)
        (jazz.reference)
        (jazz.resource)
        (jazz.search)
        (jazz.snapshot)
        (jazz.stream)
        (jazz.text)
        (jazz.time)
        (jazz.tree)
        (jazz.view)
        (jazz.window)
        (world)
        (world.appl)
        (world.asset)
        (world.assets)
        (world.build)
        (world.capabilities)
        (world.circle)
        (world.client.actions)
        (world.client.bars)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.hook)
        (world.interface)
        (world.interface.actions)
        (world.interface.bars)
        (world.interface.history)
        (world.interface.menu)
        (world.interface.timeline)
        (world.io)
        (world.parameters)
        (world.role)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task)
        (world.udp)
        (world.video)
        (world.window)
        (together)
        (together.debugger)
        (together.exception)
        (together.gathering)
        (together.script)
        (together.settings)
        (together.window)
        (together.zone))


(class Together-Application extends World-Application
  
  
  (slot local-debugger initialize #f)
  (slot catalogs-mutex initialize (make-mutex 'catalogs))

  
  (method override (process-name self)
    "Together")
  
  
  (method override (process-version self)
    together-version)
  
  
  (method override (process-email self)
    "barbarasamson@gmail.com")
  
  
  (method override (process-release self)
    (build-short-date))
  
  
  (method override (process-debugger self)
    ;; already installed in settings
    #f)
  
  
  (method override (new-toplevel self)
    (let ((fullscreen? window-fullscreen?)
          (pos (world-setting 'world.position {Point 150 50}))
          (size (world-setting 'world.size {Dimension 1100 750})))
      (let ((toplevel (new-opengl-window class: Together-Window fullscreen?: fullscreen? position: pos size: size visible?: #f)))
        (set-caption-base toplevel "Together")
        toplevel)))
  
  
  (method override (initialize-settings self)
    (nextmethod self)
    (register-world))
  
  
  (method override (default-preferences self)
    (new Together-Preferences))
  
  
  (method override (default-bindings self)
    (new Together-Bindings))
  
  
  ;; copy-pasted from IDE
  (method override (get-local-debugger self)
    (if (developer?)
        local-debugger
      (nextmethod self)))
  
  
  ;; copy-pasted from IDE
  (method override (install-process self)
    (nextmethod self)
    (start-socket-server)
    ;; quick hack for starting two togethers locally
    (unless (and (developer?)
                 (world-setting 'world.inhibit-empty-fifos? #f))
      (empty-fifo-directory feedback?: (developer?)))
    (when (developer?)
      (start-debuggers self)))
  
  
  (method override (finish-process self)
    (nextmethod self)
    (set-safe-explore-action 'ignore)
    (set-exceeds-tooltips? #f)
    (set-shortcut-hook self (~ call-shortcut-hook self))
    (set-setup-catalogs-hook (~ setup-catalogs self))
    @wait
    ;; this takes a lot of memory and thus has a large
    ;; impact on garbage collect times so i think that
    ;; cataloging should be offloaded to the worker...
    (when (developer?)
      (let ((thread
              (new-thread
                (lambda ()
                  (setup-catalogs self))
                'catalogs)))
        (thread-base-priority-set! thread background-priority)
        (thread-start! thread)))
    ;; a try
    (when (developer?)
      (set-debugger-manager (new Together-Debugger-Manager))))
  
  
  ;; copy-pasted from IDE
  (method override (conclude-environment self)
    (nextmethod self)
    (when (developer?)
      ;; do this at the last moment possible because any error beyond this point
      ;; will be handled by the IDE itself which must thus be fully functional
      (if (get-controller-debugger)
          (attach-process local-debugger (get-local-process) #t)
        (when (controlling-terminal?) ;; (and kernel-source-access? (world-setting 'world.debugger? #f))
          (attach-to-controller (get-local-register 'debugging) #t)
          (with-system-exception-debugger
            (lambda ()
              (ready-to-controller)
              (transmit-runtime-information (get-local-process) 'all)
              (current-input-port (console-input-port))
              (current-output-port (console-output-port))))))))
  
  
  (method override (close-environment self)
    (set-shortcut-hook self #f)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (save-script manager))))
    (when (developer?)
      (let ((cataloguer (get-cataloguer)))
        (when cataloguer
          (save-catalogs cataloguer))))
    (nextmethod self))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (import (world.script.asset))
  (import (world.interface.script))
  (import (world.scriptum))
  (method override (activate self)
    ;; super mega quicky
    (let ((interface (current-interface))
          (world (current-world))
          (zone (current-zone)))
      (when edited-entity
        (let ((edited-path (get-path (get-asset edited-entity))))
          (let ((script (find-script world edited-path)))
            (when script
              (let ((content (load-text script)))
                (when (not (equal? (digest-string content 'SHA-1)
                                   (digest-string (get-text (get-script edited-entity)) 'SHA-1)))
                  (let ((panel (child interface 'script)))
                    (let ((manager (locate panel 'manager)))
                      (let ((text (locate manager '(script text))))
                        (call-setup-catalogs)
                        (let ((entity (register-asset-script script)))
                          (set-edited-entity entity)
                          (set-edited manager entity)
                          (set-string-content text content)
                          (set-text (get-script entity) content)
                          @a-bit-too-much-especially-when-errors
                          (execute-script world edited-path))))))))))))
    (nextmethod self))
  
  
  ;;;
  ;;;; Sleep
  ;;;
  
  
  (method override (sleep-process self)
    (let ((together (current-together)))
      (when together
        (sleep-process together)))
    (nextmethod self))
  
  
  (method override (wake-process self)
    (nextmethod self)
    (let ((together (current-together)))
      (when together
        (wake-process together))))
  

  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (get-resource self type name)
    (case type
      ((icon) (new-file (icon-dir self) (format "{a}.png" name)))
      (else (nextmethod self type name))))
  
  
  (method protected (icon-dir self)
    {Directory Application-World "assets" "world" "icon"})


  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method override (setup-nicknames self)
    (nextmethod self)
    (register-nickname :together (lambda () (current-together))))

  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method (call-shortcut-hook self shortcut)
    (let ((together (current-together)))
      (if together
          (shortcut-press-circle together shortcut)
        #f)))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  ;; a try
  (method override (allow-orphaned-action? self action-item)
    #t)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-enter-press self evt)
    (let ((space (current-space)))
      (enter-press space)))
  
  
  (method (on-tab-press self evt)
    (let ((space (current-space)))
      (tab-press space)))
  
  
  (method (on-add-bookmark self evt)
    (let ((world (current-world)))
      (record-event udp-id-bookmark
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.)
      (display-message world "Bookmarked!")))
  
  
  (method (on-garbage-collect self evt)
    (let ((world (current-world)))
      (let ((timer (new Timer)))
        (gc)
        (display-message world (format "Garbage collect ({a}ms)" (real-duration-in-milliseconds timer))))))
  
  
  (method (on-show-info self evt)
    (let ((world (current-world)))
      (let ((duration (estimate-garbage-collect)))
        (display-message world (format "Garbage collect {a}ms" (seconds->milliseconds duration))))))
  
  
  (method (on-update-catalogs self evt)
    (update-catalogs self))
  
  
  (method (on-edit-definition self evt)
    (let ((world (current-world)))
      (let ((text (active-focus)))
        (when (is? text Together-Script-Text-View)
          (let ((form (current-expr text)))
            (when (symbol? form)
              (let ((target (standardize-form text form #t)))
                (let ((definitions (get-coalesced-definitions (get-cataloguer) target)))
                  (if (null? definitions)
                      (bell)
                    (case (length definitions)
                      ((1) (let ((history-item (current-history-item text))
                                 (entry (car definitions)))
                             (let ((file (get-moniker entry))
                                   (range (get-range entry)))
                               (add-history self history-item)
                               (edit-document self file selection: range))))
                      (else (display-message world (format "Ambiguous definition: {a}" target)))))))))))))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (edit-document self moniker . rest)
    (bind-keywords ((selection #f)) rest
      (let ((together (current-together)))
        ;; quick hack
        (let ((assets (new Assets #f #f (get-parent moniker))))
          (let ((asset (new Asset assets '() (list (get-name moniker)))))
            (edit-script together asset selection: selection))))))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item self)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (and (get-visible? panel)
             (let ((manager (locate panel 'manager)))
               (let ((text (locate manager '(script text))))
                 (current-history-item text)))))))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (news-file self)
    (world-file '("devel" "together" "News.ftx") 'Resources))
  
  
  (method override (roadmap-file self)
    (world-file '("devel" "together" "Roadmap.ftx") 'Resources))
  
  
  (method override (help-file self)
    (world-file '("devel" "together" "Help.ftx") 'Resources))
  
  
  (method override (about-file self)
    (world-file '("devel" "together" "About.ftx") 'Resources))
  
  
  ;;;
  ;;;; Services
  ;;;
  
  
  (method override (provide-services self)
    (nextmethod self)
    ;; feedback
    (provide-service 'user-message (~ user-message-service self))
    (provide-service 'user-feedback (~ user-feedback-service self))
    (provide-service 'clear-user-message (~ clear-user-message-service self))
    (provide-service 'clear-user-feedback (~ clear-user-feedback-service self))
    (provide-service 'console-feedback (~ console-feedback-service self))
    (provide-service 'modal-feedback (~ modal-feedback-service self))
    ;; edition
    @comment
    (provide-service 'edit-document (~ edit-document-service self)))
  
  
  (method (user-message-service self obj . rest)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (display-status world (apply format obj rest))))))
  
  
  (method (user-feedback-service self obj . rest)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (display-status world (apply format obj rest))))))
  
  
  (method (clear-user-message-service self)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (clear-message world)))))
  
  
  (method (clear-user-feedback-service self)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (clear-message world)))))
  
  
  (method (console-feedback-service self . rest)
    (apply format :console rest))
  
  
  (method (modal-feedback-service self text . rest)
    (terminal text))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  ;; copy-pasted from IDE
  (method override (register-base-objects self)
    (nextmethod self)
    (when (developer?)
      (register-object (get-local-register 'debugging) 'debugger (new Jazz-Debugger-Local-Proxy (require-presence 'debugging) local-debugger))))
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-console self)
    (if (or (remote-proxy? (get-controller-debugger))
            (not (developer?)))
        (nextmethod self)
      ;; no REPL until Together internal consoles
      (select-console self)))
  
  
  ;; copy-pasted from IDE
  (method (start-debuggers self)
    (when (developer?)
      (when (not local-debugger)
        ;; quicky until the local debugger is fully operational
        (when (not (get-controller-debugger))
          (use-debugger? #f))
        (set! local-debugger (new Together-Debugger))
        (start-debugger local-debugger)
        (register-debugger local-debugger)
        (set-current-debugger local-debugger))))
  
  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method protected (setup-catalogs self)
    (define (world-catalog)
      (let ((output {File Settings "work" "catalogs" "world.jcat"})
            (directories {Directory Application-World})
            (extensions :jazz))
        (new Filing-Catalog 'world output directories extensions #f #f #t)))
    
    (define (user-catalog)
      (let ((output {File Settings "work" "catalogs" "user.jcat"})
            (directories {Directory Settings})
            (extensions :jazz))
        (new Filing-Catalog 'user output directories extensions #f #f #t)))
    
    (mutex-lock! catalogs-mutex)
    (unless (get-cataloguer)
      (let ((cataloguer (new Cataloguer)))
        (define (add-project-catalogs file)
          (let ((project (instantiate-file file)))
            (for-each-project project
              (lambda (project)
                (let ((catalog (require-catalog project)))
                  (add-catalog cataloguer catalog))))))
        
        (set-cataloguer cataloguer)
        (add-catalog cataloguer (world-catalog))
        (add-catalog cataloguer (user-catalog))
        (when kernel-source-access?
          ;; quicky to test
          (register-alias 'Profile '(Settings "work"))
          (add-project-catalogs {File Together "lib" ".project"})
          (add-project-catalogs {File World "lib" ".project"})
          (add-project-catalogs {File Jazz "lib" ".project"}))
        (for-each-active-catalog cataloguer #f
          (lambda (catalog)
            (load-content catalog report?: #f)))))
    (mutex-unlock! catalogs-mutex))
  
  
  (method protected (update-catalogs self)
    (let ((window (current-window))
          (world (current-world)))
      (display-message world "Updating catalogs...")
      (render-scene window)
      (setup-catalogs self)
      (for-each-active-catalog (get-cataloguer) #f
        (lambda (catalog)
          (post-catalog
            (lambda ()
              (update catalog)))))
      (display-message world "Done")
      (render-scene window)))
  
  
  ;;;
  ;;;; Sites
  ;;;
  
  
  (method override (register-site-looks self)
    (let ((dark-purple {Color red: .464 green: .141 blue: .732})
          (purple {Color Purple})
          (cyan {Color red: .120 green: .624 blue: .616}))
      ;; origin
      (register-site-look 'udp-release 10 chronology-orange)
      (register-site-look 'audio 9 chronology-yellow)
      (register-site-look 'video 8 chronology-green) ;; SERVER
      ;; receiver
      (register-site-look 'udp-state 7 chronology-cyan)
      (register-site-look 'udp-receive 6 chronology-blue)  ;; SERVER
      (register-site-look 'udp-process 5 chronology-purple)
      (register-site-look 'video-output 4 chronology-magenta)
      ;; internal
      (register-site-look 'alive 3 {Color Yellow})
      (register-site-look 'network 3 {Color Yellow})
      (register-site-look 'tick 3 {Color Green})
      (register-site-look 'render 3 {Color Blue})
      (register-site-look 'render-world #f #f)
      (register-site-look 'render-interface #f #f)
      (register-site-look 'render-sync #f #f)
      ;; message
      (register-site-look 'message 2 {Color Orange})
      (register-site-look 'event #f #f)
      ;; memory
      (register-site-look 'memory 1 {Color Red})
      ;; other
      (default-site-look 10 {Color Dark-Gray})))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (register-event-looks self)
    (register-event-look udp-id-state-ok         0 chronology-magenta)  ;   R
    (register-event-look udp-id-state-late       0 chronology-purple)   ;   R
    (register-event-look udp-id-state-waiting    0 chronology-blue)     ;   R
    (register-event-look udp-id-packet-gap       0 chronology-cyan)     ;  SR
    (register-event-look udp-id-duplicate-packet 0 chronology-green)    ;  SR
    (register-event-look udp-id-lost-packet      0 chronology-yellow)   ;   R
    (register-event-look udp-id-discard-packet   0 chronology-orange)   ;   R
    (register-event-look udp-id-missing-packet   1 chronology-blue)     ;  SR
    (register-event-look udp-id-got-packet       1 chronology-green)    ;  SR
    (register-event-look udp-id-giveup-packet    1 chronology-orange)   ;  SR
    (register-event-look udp-id-resend-packet    1 chronology-purple)   ; OS
    (register-event-look udp-id-absent-packet    2 chronology-magenta)  ; OS
    (register-event-look udp-id-reject-packet    2 chronology-purple)   ;  SR
    (register-event-look udp-id-connecting       3 chronology-yellow)   ; O
    (register-event-look udp-id-connected        3 chronology-green)    ; O
    (register-event-look udp-id-connect          3 chronology-green)    ;  S
    (register-event-look udp-id-unconnect        3 chronology-blue)     ;  S
    (register-event-look udp-id-reconnect        3 chronology-orange)   ;  S
    (register-event-look udp-id-throttle-on      3 chronology-yellow)   ; OS
    (register-event-look udp-id-throttle-off     3 chronology-green)    ; OS
    (register-event-look udp-id-bookmark         3 chronology-magenta)  ;   R
    (register-event-look udp-id-write-failure    3 chronology-red)      ; OSR
    (register-event-look udp-id-ring-overflow    3 chronology-red))     ; OSR
  
  
  ;;;
  ;;;; Interface
  ;;;

  
  (method override (setup-application-interface self)
    (let ((interface (current-interface)))
      (new History-Slider name: 'slider parent: interface visible?: #f)
      (let ((menu (new Together-Main-Menu visible?: #t)))
        (let ((panel (new World-Menu parent: interface name: 'main-menu size: (nu+ (get-size menu) {Dimension 2 2}) location: 'center layout-type: 'border visible?: #f)))
          (let ((content (locate panel 'content)))
            (set-parent menu content))))
      (install-bars
        `((,World-Models-Bar       models       horizontal none #f)
          (,World-Blocks-Bar       blocks       horizontal none #f)
          (,Together-Media-Bar     mediabar     horizontal (10 10) #f)
          (,Together-Layout-Bar    layoutbar    horizontal (attach mediabar) #f)
          (,Together-Showcases-Bar showcasesbar horizontal (attach layoutbar) #f)
          (,Together-View-Bar      viewbar      horizontal (attach showcasesbar) #f)
          (,Together-Share-Bar     sharebar     horizontal (attach viewbar) #f)
          (,Together-Debug-TopBar  debugbar     horizontal (attach sharebar) #f)
          (,Together-Window-Bar    windowbar    horizontal (attach debugbar) #f)
          (,Together-Main-Bar      mainbar      horizontal (attach windowbar) #f)
          (,Together-Showcase-Menu showcasemenu radial     center #f)
          (,Together-Debug-Menu    debugmenu    radial     center #f)))
      (set-layouter (child interface 'models) models-bar-layouter)
      (set-layouter (child interface 'blocks) blocks-bar-layouter)))


  ;;;
  ;;;; Roles
  ;;;
  
  
  (method override (role-traits self role)
    (let ((platform (cond-expand
                      (windows (list windows-bindings))
                      (else '()))))
      (case role
        ((user) `((:bindings ,user-bindings ,@platform)))
        ((developer) developer-role @YOWNU `((,@developer-role ,@platform)))
        (else (nextmethod self role)))))


  ;;;
  ;;;; User
  ;;;


  (define-trait user-bindings Bindings
    (<Role-Trait>        name: user
      (<install>)))


  ;;;
  ;;;; Developer
  ;;;


  (define-trait developer-bindings Bindings
    (<Role-Trait>              name: developer
      (<install>
        (<application!>
          (<!>                 name: backward-history          visible?: #t)
          (<!>                 name: forward-history           visible?: #t))
        (<view!>
          (<!>                 name: select-all                visible?: #t shortcut: {Shortcut :control :alt #\A}))
        (<text!>
          (<!>                 name: move-backward-word        visible?: #t)
          (<!>                 name: extend-backward-word      visible?: #t)
          (<!>                 name: move-forward-word         visible?: #t)
          (<!>                 name: extend-forward-word       visible?: #t)
          (<!>                 name: move-upward               visible?: #t)
          (<!>                 name: extend-upward             visible?: #t)
          (<!>                 name: move-downward             visible?: #t)
          (<!>                 name: extend-downward           visible?: #t)
          (<!>                 name: delete-char               visible?: #t)
          (<!>                 name: delete-word               visible?: #t)
          (<!>                 name: home                      visible?: #t)
          (<!>                 name: extend-home               visible?: #t)
          (<!>                 name: end                       visible?: #t)
          (<!>                 name: extend-end                visible?: #t)
          (<!>                 name: document-home             visible?: #t alternate-shortcut: {Shortcut :meta Up})
          (<!>                 name: document-end              visible?: #t alternate-shortcut: {Shortcut :meta Down})
          (<!>                 name: paste&next                visible?: #t)
          (<!>                 name: paste-cycle-ring          visible?: #t shortcut: {Shortcut :alt #\V})
          (<!>                 name: paste-cycle-ring-reversed visible?: #t shortcut: {Shortcut :alt :shift #\V})
          (<!>                 name: kill-line                 visible?: #t)
          (<!>                 name: center-caret              visible?: #t)
          (<!>                 name: top-caret                 visible?: #t)
          (<!>                 name: one/no-space              visible?: #t))
        (<code-text!>
          (<!>                 name: evaluate                  visible?: #t)
          (<!>                 name: backward-outline          visible?: #t)
          (<!>                 name: forward-outline           visible?: #t))
        (<lisp-text!>
          (<!>                 name: tabulate                  visible?: #t)
          (<!>                 name: highlight-declaration     visible?: #t)
          (<!>                 name: remove-highlights         visible?: #t))
        (<script-text!>
          (<Action-Item>       name: search-forward-mode       visible?: #t action-handler: {Event-Handler :focus on-search-forward-mode} shortcut: {Shortcut :control #\S})
          (<Action-Item>       name: search-backward-mode      visible?: #t action-handler: {Event-Handler :focus on-search-backward-mode} shortcut: {Shortcut :control #\R})
          (<Action-Item>       name: search-current            visible?: #t action-handler: {Event-Handler :focus on-search-current} shortcut: {Shortcut :alt #\S})
          (<Action-Item>       name: select-outer              visible?: #t action-handler: {Event-Handler :focus on-select-outer} shortcut: {Shortcut :control Space}))
        (<search-mode!>
          (<!>                 name: whole-words               visible?: #t)
          (<!>                 name: ignore-case               visible?: #t)
          (<!>                 name: regexp                    visible?: #t)
          (<!>                 name: forward                   visible?: #t)
          (<!>                 name: backward                  visible?: #t)
          (<!>                 name: current                   visible?: #t)
          (<!>                 name: widen                     visible?: #t)
          (<!>                 name: center-caret              visible?: #t)
          (<!>                 name: home                      visible?: #t)
          (<!>                 name: end                       visible?: #t)
          (<!>                 name: highlight                 visible?: #t)
          (<!>                 name: finish                    visible?: #t)
          (<!>                 name: cancel                    visible?: #t))
        (<highlight-mode!>
          (<!>                 name: highlight                 visible?: #t))
        (<world-camera!>
          (<!>                 name: toggle-cursor-mode        visible?: #t))
        (<world-edition!>
          (<!>                 name: toggle-grid               visible?: #t))
        (<world-debug!>
          (<!>                 name: debug-menu                visible?: #t)
          (<!>                 name: toggle-info               visible?: #t)
          (<!>                 name: toggle-profiler           visible?: #t)
          (<!>                 name: reset-profiling           visible?: #t)
          ;(<!>                 name: toggle-evolution          visible?: #t)
          (<!>                 name: view-workspace            visible?: #t)
          (<!>                 name: clear-console             visible?: #t)
          (<!>                 name: clear-terminal            visible?: #t)
          (<!>                 name: toggle-gc-sound           visible?: #t)
          (<!>                 name: explore-interface         visible?: #t)
          (<!>                 name: toggle-axes               visible?: #t)
          (<!>                 name: garbage-collect           visible?: #t)
          (<World-Action-Item> name: toggle-mode               visible?: #t shortcut: {Shortcut :alt #\M} title: "Toggle mode" action-handler: {Event-Handler :together on-toggle-mode} description: "Toggle mode.")
          (<World-Action-Item> name: toggle-hide               visible?: #t shortcut: {Shortcut :alt :shift #\H} title: "Toggle hide" action-handler: {Event-Handler :space on-toggle-hide} description: "Toggle hide.")
          (<World-Action-Item> name: toggle-debug              visible?: #t shortcut: {Shortcut :control :shift #\D} title: "Toggle debug" action-handler: {Event-Handler :together on-toggle-debug} description: "Toggle debug.")
          (<World-Action-Item> name: toggle-debug-media        visible?: #t shortcut: {Shortcut :control :shift #\M} title: "Toggle debug media" action-handler: {Event-Handler :together on-toggle-debug-media} description: "Toggle debug media.")
          (<World-Action-Item> name: toggle-debug-flow         visible?: #t shortcut: {Shortcut :control :shift #\F} title: "Toggle debug flow" action-handler: {Event-Handler :together on-toggle-debug-flow} description: "Toggle debug flow.")
          (<World-Action-Item> name: toggle-admin              visible?: #t shortcut: {Shortcut :alt :shift #\A} title: "Toggle admin" action-handler: {Event-Handler :together on-toggle-admin} description: "Toggle admin.")
          (<World-Action-Item> name: toggle-timeline           visible?: #t shortcut: {Shortcut :alt #\T} title: "Toggle timeline" action-handler: {Event-Handler :together on-toggle-timeline} description: "Toggle timeline.")
          (<World-Action-Item> name: toggle-visualizer         visible?: #t shortcut: {Shortcut :alt :shift #\V} title: "Toggle visualizer" action-handler: {Event-Handler :together on-toggle-visualizer} description: "Toggle visualizer.")
          (<World-Action-Item> name: toggle-denoise            visible?: #t title: "Toggle denoise" action-handler: {Event-Handler :together on-toggle-denoise} shortcut: {Shortcut :alt :shift #\D} description: "Toggle denoise.")
          (<World-Action-Item> name: request-replays           visible?: #t shortcut: {Shortcut :alt :shift #\E} title: "Request replays" action-handler: {Event-Handler :together on-request-replays} description: "Request replays.")
          (<World-Action-Item> name: add-bookmark              visible?: #t title: "Add bookmark" action-handler: {Event-Handler :application on-add-bookmark} shortcut: {Shortcut :alt #\B} description: "Add bookmark.")
          (<World-Action-Item> name: configure-settings        visible?: #t shortcut: {Shortcut :control :shift #\Z} title: "Configure settings" action-handler: {Event-Handler :together on-configure-settings} description: "Configure settings.")
          (<World-Action-Item> name: show-info                 visible?: #t shortcut: {Shortcut :control :shift #\I} title: "Show info" action-handler: {Event-Handler :application on-show-info} description: "Show info.")))))
  
  (define-trait developer-edition World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: no-showcase             visible?: #t)
        (<!>             name: blocks-showcase         visible?: #t)
        (<!>             name: models-showcase         visible?: #t)
        (<!>             name: gadgets-showcase        visible?: #t))))
  
  (define-trait developer-interface World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: run-script              visible?: #t)
        (<!>             name: run-last-script         visible?: #t)
        (<!>             name: toggle-glow             visible?: #t))))
  
  (define-trait developer-media World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-mic              visible?: #t)
        (<!>             name: toggle-camera           visible?: #t))))
  
  (define-trait developer-layout World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: avatar-space            visible?: #t)
        (<!>             name: circle-space            visible?: #t)
        (<!>             name: focus-space             visible?: #t)
        (<!>             name: gallery-space           visible?: #t))))
  
  (define-trait developer-showcases World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: showcase-menu           visible?: #t))))
  
  (define-trait developer-showcasemenu World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: showcase-menu           visible?: #t)
        (<!>             name: no-showcase             visible?: #t)
        (<!>             name: blocks-showcase         visible?: #t)
        (<!>             name: models-showcase         visible?: #t)
        (<!>             name: gadgets-showcase        visible?: #t))))
  
  (define-trait developer-view World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-people           visible?: #t)
        (<!>             name: toggle-chat             visible?: #t))))
  
  (define-trait developer-share World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-screen-share     visible?: #t))))
  
  (define-trait developer-debug World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: debug-menu              visible?: #t))))
  
  (define-trait developer-window World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-fullscreen       visible?: #t))))
  
  (define-trait developer-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: main-menu               visible?: #t))))
  
  @w
  (define-trait developer-debug World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-info             visible?: #t)
        (<!>             name: toggle-timeline         visible?: #t)
        (<!>             name: toggle-profiler         visible?: #t)
        (<!>             name: toggle-script           visible?: #t)
        (<!>             name: toggle-axes             visible?: #t)
        (<!>             name: clear-terminal          visible?: #t)
        (<!>             name: clear-console           visible?: #t)
        (<!>             name: explore-interface       visible?: #t))))
  
  (definition developer-role
    `((:bindings ,developer-bindings)
      (edition ,developer-edition)
      (interface ,developer-interface)
      (mediabar ,developer-media)
      (layoutbar ,developer-layout)
      (showcasesbar ,developer-showcases)
      (showcasemenu ,developer-showcasemenu)
      (viewbar ,developer-view)
      (sharebar ,developer-share)
      (debugbar ,developer-debug)
      (windowbar ,developer-window)
      (mainbar ,developer-main)
      @w
      (debug ,developer-debug)))
  

  ;;;
  ;;;; Windows
  ;;;

  
  (define-trait windows-bindings Bindings
    (<Trait>            name: windows
      (<install>
        (<application~>
          (<!>          name: new                          shortcut: {Shortcut :control #\N})
          (<!>          name: close                        shortcut: {Shortcut :control F4})
          (<!>          name: print                        shortcut: {Shortcut :control #\P})
          (<!>          name: print-layout                 shortcut: {Shortcut :control :shift #\P})
          (<!>          name: print-preview                shortcut: {Shortcut :alt #\P})
          (<!>          name: quit                         shortcut: {Shortcut :alt F4})
          (<!>          name: next-frame                   shortcut: {Shortcut :control F6})
          (<!>          name: previous-frame               shortcut: {Shortcut :control :shift F6})
          (<!>          name: current-frame                shortcut: {Shortcut F6}))
        (<guest~>
          (<!>          name: save                         shortcut: {Shortcut :control #\S}))
        (<view~>
          (<!>          name: redo                         shortcut: {Shortcut :control #\Y}))
        (<text~>
          (<!>          name: delete-char                  alternate-shortcut: {Shortcut :control #\D}))
        (<world-menu~>
          (<!>          name: quit-world                   shortcut: {Shortcut :alt F4}))
        (<world-window~>
          (<!>          name: toggle-windowed-mode         shortcut: {Shortcut F11}))))))


;;;
;;;; Parameter
;;;


(define-parameter people
  (new World-Parameter
    (lambda ()
      (let ((interface (current-interface)))
        (get-visible? (child interface 'people))))))


(define-parameter streams
  (new World-Parameter
    (lambda ()
      (let ((interface (current-interface)))
        (get-visible? (child interface 'streams))))))


(define-parameter chat
  (new World-Parameter
    (lambda ()
      (let ((interface (current-interface)))
        (get-visible? (child interface 'chat))))))


(define-parameter avatar-space
  (new World-Parameter
    (lambda ()
      (is? (current-space) Avatar-Space))))


(define-parameter circle-space
  (new World-Parameter
    (lambda ()
      (is? (current-space) Circle-Space))))


(define-parameter focus-space
  (new World-Parameter
    (lambda ()
      (is? (current-space) Focus-Space))))


(define-parameter gallery-space
  (new World-Parameter
    (lambda ()
      (is? (current-space) Gallery-Space))))


;;;
;;;; Debugger
;;;


(class Together-Debugger-Manager extends Debugger-Manager
  
  
  (method override (report-message self format-string . rest)
    (let ((world (current-world)))
      (let ((message (apply format format-string rest)))
        (display-message world message))))
  
  
  (method override (report-status self format-string . rest)
    (let ((world (current-world)))
      (let ((message (apply format format-string rest)))
        (display-status world message))))
  
  
  (method override (process-evaluate-when self process)
    'always))


;;;
;;;; Main
;;;


(class Together-Main-Menu extends Menu
  
  
  (form
    (<install>          title: "Help" display-shortcuts?: #f
      (<Label-Item>     title: "Resume" action-handler: {Action world-anonymous resume-world})
      (<Separator-Item>)
      (<Label-Item>     title: "Video Options" action-handler: {Action world-menu video-options})
      (<Label-Item>     title: "Audio Options" action-handler: {Action world-menu audio-options})
      (<Label-Item>     title: "Interface Options" action-handler: {Action world-menu interface-options})
      (<Label-Item>     title: "Keyboard Shortcuts" action-handler: {Action world-menu bindings-viewer})
      (<Separator-Item>)
      (<Label-Item>     title: "News" action-handler: {Action world-menu view-news})
      (<Label-Item>     title: "Roadmap" action-handler: {Action world-menu view-roadmap})
      (<Label-Item>     title: "About" action-handler: {Action world-menu open-about})
      @wait
      (<Label-Item>     title: "Help" action-handler: {Action world-menu view-help})
      (<Separator-Item>)
      (<Label-Item>     title: "Gathering Screen" action-handler: {Action together-circle leave-circle})
      (<Label-Item>     name: quit title: "Quit Together" action-handler: {Action world-menu quit-world})))
  
  
  (method override (destroy self)
    (nextmethod self)
    (let ((world (current-world)))
      (main-menu-destroyed world))))


;;;
;;;; Iconbar
;;;


(class Together-Iconbar extends World-Actionbar
  
  
  (form
    (<install> background: #f))
  
  
  (method override (bar-height self)
    38))


;;;
;;;; Media
;;;


(class Together-Media-Bar extends Together-Iconbar


  (form
    (<install>
      (<World-Parameter-Button> name: toggle-mic    resource: {Icon-Resource "Logogram/Tornado"} action-handler: {Action together-circle toggle-mic} parameter: mic)
      (<World-Parameter-Button> name: toggle-camera resource: {Icon-Resource "Logogram/Seeker"} action-handler: {Action together-circle toggle-camera} parameter: camera))))


;;;
;;;; Layout
;;;


(class Together-Layout-Bar extends Together-Iconbar


  (form
    (<install>
      (<World-Parameter-Button> name: avatar-space   resource: {Icon-Resource "Logogram/Shapes"} action-handler: {Action together-space avatar-space} parameter: avatar-space)
      (<World-Parameter-Button> name: circle-space   resource: {Icon-Resource "Logogram/Logogram-Five"} action-handler: {Action together-space circle-space} parameter: circle-space)
      (<World-Parameter-Button> name: focus-space    resource: {Icon-Resource "Logogram/Logogram-Shapes-Three"} action-handler: {Action together-space focus-space} parameter: focus-space)
      (<World-Parameter-Button> name: gallery-space  resource: {Icon-Resource "Logogram/Circular-Logogram"} action-handler: {Action together-space gallery-space} parameter: gallery-space))))


;;;
;;;; Showcases
;;;


(class Together-Showcases-Bar extends Together-Iconbar
  
  
  (form
    (<install>
      (<World-Action-Button> name: showcase-menu resource: {Icon-Resource "Logogram/Flower-Floral"} action-handler: {Action world-edition showcase-menu}))))


;;;
;;;; Radial
;;;


(class Radial-Iconbar extends Together-Iconbar
  
  
  (form
    (<install> layout-type: radial layout-insets: {Rect 20 20 20 20}))
  
  
  (method override (draw-children self surface nodes context)
    (set-font surface {Font Label-User})
    (for-each (lambda (child)
                (let ((bounds (inflate-rect (acquire self child (get-bounds child)) 9 9)))
                  (ellipse surface bounds {Color Black alpha: .0} {Color Black alpha: .45})
                  (unless (eq? child (car children))
                    (let ((action-item (require-action-item (get-action-handler child))))
                      (let ((title (get-title action-item)))
                        (let ((width (get-text-width surface title)))
                          (let ((h (+ (get-left bounds) (center width (rect-width bounds)))))
                            (draw-text surface h (get-bottom bounds) title {Color World-Ochre}))))))))
              children)
    (nextmethod self surface nodes context)))


;;;
;;;; Showcase
;;;


(class Together-Showcase-Menu extends Radial-Iconbar
  
  
  (form
    (<install>
      (<World-Action-Button>    name: showcase-menu    resource: {Icon-Resource "Logogram/Flower-Floral"} action-handler: {Action world-edition showcase-menu})
      (<World-Parameter-Button> name: no-showcase      resource: {Icon-Resource "Interface/No-Showcase"} action-handler: {Action world-edition no-showcase} parameter: no-showcase)
      (<World-Parameter-Button> name: blocks-showcase  resource: {Icon-Resource "Interface/Blocks-Showcase"} action-handler: {Action world-edition blocks-showcase} parameter: blocks-showcase)
      (<World-Parameter-Button> name: models-showcase  resource: {Icon-Resource "Interface/Models-Showcase"} action-handler: {Action world-edition models-showcase} parameter: models-showcase)
      (<World-Parameter-Button> name: gadgets-showcase resource: {Icon-Resource "Interface/Gadgets-Showcase"} action-handler: {Action world-edition gadgets-showcase} parameter: gadgets-showcase))))


;;;
;;;; View
;;;


(class Together-View-Bar extends Together-Iconbar
  
  
  (form
    (<install>
      (<World-Parameter-Button> name: toggle-people  resource: {Icon-Resource "Sacred Geometry/Hexahedron"} action-handler: {Action together-view toggle-people} parameter: people)
      (<World-Parameter-Button> name: toggle-chat    resource: {Icon-Resource "Symbol/Symbol-Two"} action-handler: {Action together-view toggle-chat} parameter: chat))))


;;;
;;;; Share
;;;


(class Together-Share-Bar extends Together-Iconbar
  
  
  (form
    (<install>
      (<World-Parameter-Button> name: toggle-screen-share    resource: {Icon-Resource "Symbol/Circles-Symbol-Twelve"} action-handler: {Action together-share toggle-screen-share} parameter: screen-share))))


;;;
;;;; Main
;;;


(class Together-Main-Bar extends Together-Iconbar
  
  
  (form
    (<install>
      (<World-Action-Button> name: main-menu    resource: {Icon-Resource "Beliefs Symbols/Hinduism"} action-handler: {Action world-menu main-menu}))))


;;;
;;;; Window
;;;


(class Together-Window-Bar extends Together-Iconbar
  
  
  (form
    (<install>
      (<World-Parameter-Button> name: toggle-fullscreen   resource: {Icon-Resource "Symbol/Cultural-Symbol-Eight"} action-handler: {Action world-window toggle-windowed-mode} parameter: fullscreen-mode))))


;;;
;;;; Debug
;;;


(class Together-Debug-TopBar extends Together-Iconbar


  (form
    (<install>
      (<World-Action-Button> name: debug-menu resource: {Icon-Resource "Chemistry/Science"} action-handler: {Action world-debug debug-menu}))))


;;;
;;;; Debug
;;;


(class Together-Debug-Menu extends Radial-Iconbar
  
  
  (form
    (<install>
      (<World-Action-Button>    name: debug-menu              resource: {Icon-Resource "Chemistry/Science"} action-handler: {Action world-debug debug-menu})
      (<World-Parameter-Button> name: toggle-info             resource: {Icon-Resource "Web and Apps/Light"} action-handler: {Action world-debug toggle-info} parameter: info)
      (<World-Parameter-Button> name: toggle-profiler         resource: {Icon-Resource "Audio/Specifics"} action-handler: {Action world-debug toggle-profiler} parameter: profiler)
      (<World-Parameter-Button> name: toggle-timeline         resource: {Icon-Resource "Audio/Music-Specifics"} action-handler: {Action world-debug toggle-timeline} parameter: timeline)
      ;(<World-Parameter-Button> name: toggle-evolution        resource: {Image-Resource "Preview"} action-handler: {Action world-debug toggle-evolution} parameter: evolution)
      (<World-Action-Button>    name: clear-terminal          resource: {Icon-Resource "Photography UI/No-Flash"} action-handler: {Action world-debug clear-terminal})
      (<World-Action-Button>    name: clear-console           resource: {Icon-Resource "Created/RedX"} action-handler: {Action world-debug clear-console})
      (<World-Action-Button>    name: explore-interface       resource: {Icon-Resource "Games/Visual"} action-handler: {Action world-debug explore-interface}))))


;;;
;;;; Preferences
;;;


(class Together-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                         toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        ;; Scripting
        (<Jazz-Text-Preferences>       name: jazz-text)
        (<Scheme-Text-Preferences>     name: scheme-text)
        (<CommonLisp-Text-Preferences> name: commonlisp-text)
        (<Command-Text-Preferences>    name: command-text))
      (<Debug-Preferences>             name: debug evaluate-when: always)
      (<Inspector-Preferences>         name: inspector))))


;;;
;;;; Bindings
;;;


(class Together-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      ;; Application
      (<!>                           name: text
        (<!>                         name: move-backward-char   visible?: #t)
        (<!>                         name: extend-backward-char visible?: #t)
        (<!>                         name: move-forward-char    visible?: #t)
        (<!>                         name: extend-forward-char  visible?: #t)
        (<!>                         name: delete-char          visible?: #t)
        (<!>                         name: home                 visible?: #t)
        (<!>                         name: extend-home          visible?: #t)
        (<!>                         name: end                  visible?: #t)
        (<!>                         name: extend-end           visible?: #t))
      (<!>                           name: tree
        (<!>                         name: move-upward          visible?: #t)
        (<!>                         name: move-downward        visible?: #t))
      (<!>                           name: view
        (<!>                         name: escape               visible?: #t)
        (<!>                         name: backspace            visible?: #t)
        (<!>                         name: return               visible?: #t)
        (<!>                         name: undo                 visible?: #t)
        (<!>                         name: redo                 visible?: #t)
        (<!>                         name: cut                  visible?: #t)
        (<!>                         name: copy                 visible?: #t)
        (<!>                         name: paste                visible?: #t)
        (<!>                         name: select-all           visible?: #t)
        (<!>                         name: move-left            visible?: #t)
        (<!>                         name: extend-left          visible?: #t)
        (<!>                         name: move-up              visible?: #t)
        (<!>                         name: extend-up            visible?: #t)
        (<!>                         name: move-right           visible?: #t)
        (<!>                         name: extend-right         visible?: #t)
        (<!>                         name: move-down            visible?: #t)
        (<!>                         name: extend-down          visible?: #t))
      ;; Scripting
      (<Code-Text-Actions>           name: code-text)
      (<Lisp-Text-Actions>           name: lisp-text)
      (<Jazz-Text-Actions>           name: jazz-text)
      (<Script-Text-Actions>         name: script-text)
      (<Search-Mode-Actions>         name: search-mode)
      (<Highlight-Mode-Actions>      name: highlight-mode)
      (<Extended-Mode-Actions>       name: extended-mode)
      (<Execute-Mode-Actions>        name: execute-mode)
      (<Find-Mode-Actions>           name: find-mode)
      ;; World
      (<World-Menu-Actions>          name: world-menu
        (<!>                         name: main-menu            visible?: #t)
        (<!>                         name: bindings-viewer      visible?: #t)
        (<!>                         name: open-welcome         visible?: #t title: "Gathering Screen" shortcut: {Shortcut :alt :shift #\G} action-handler: {Event-Handler :together on-goto-gathering})
        (<!>                         name: quit-world           visible?: #t title: "Quit Together"))
      (<World-Interface-Actions>     name: world-interface)
      (<World-Graphics-Actions>      name: world-graphics)
      (<World-Sound-Actions>         name: world-sound)
      (<World-Media-Actions>         name: world-media)
      (<World-Client-Actions>        name: world-client)
      (<World-World-Actions>         name: world-world)
      (<World-Zone-Actions>          name: world-zone)
      (<World-Movement-Actions>      name: world-movement)
      (<World-Camera-Actions>        name: world-camera)
      (<World-Game-Actions>          name: world-game)
      (<World-Spell-Actions>         name: world-spell)
      (<World-Edition-Actions>       name: world-edition)
      (<World-History-Actions>       name: world-history)
      (<World-Window-Actions>        name: world-window
        (<!>                         name: toggle-windowed-mode visible?: #t))
      ;; Together
      (<Together-Call-Actions>       name: together-call)
      (<Together-Chat-Actions>       name: together-chat)
      (<Together-View-Actions>       name: together-view)
      (<Together-Gathering-Actions>  name: together-gathering)
      (<Together-Space-Actions>      name: together-space)
      (<Together-Circle-Actions>     name: together-circle)
      (<Together-Share-Actions>      name: together-share)
      (<Together-Lookat-Actions>     name: together-lookat)
      (<Together-Viewer-Actions>     name: together-viewer)
      (<Together-Stream-Actions>     name: together-stream)
      (<Together-Navigate-Actions>   name: together-navigate)
      (<Together-Profile-Actions>    name: together-profile)
      (<Together-Experiment-Actions> name: together-experiment)
      (<Together-Script-Actions>     name: together-script)
      ;; World
      (<World-Debug-Actions>         name: world-debug)
      (<World-Tutorial-Actions>      name: world-tutorial)
      (<World-Objective-Actions>     name: world-objective)
      (<World-Anonymous-Actions>     name: world-anonymous)
      (<World-User-Actions>          name: world-user))))


;;;
;;;; Actions
;;;


(class Together-Call-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Call"
      (<World-Action-Item> name: change-quality       title: "Change call quality" visible?: #t shortcut: {Shortcut "Click call quality"}))))


(class Together-Chat-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Chat"
      (<World-Action-Item> name: send-message         title: "Send message" visible?: #t action-handler: {Event-Handler :together on-message} shortcut: {Shortcut :alt Return} description: "Message."))))


(class Together-View-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "View"
      (<World-Action-Item> name: toggle-people        title: "Toggle people" visible?: #t action-handler: {Event-Handler :space on-toggle-people} shortcut: {Shortcut :alt :shift #\P} description: "Toggle people.")
      (<World-Action-Item> name: toggle-chat          title: "Toggle chat" visible?: #t action-handler: {Event-Handler :space on-toggle-chat} shortcut: {Shortcut :alt :shift #\C} description: "Toggle chat."))))


(class Together-Gathering-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Gathering"
      (<World-Action-Item> name: goto-login           title: "Go to Login screen" visible?: #t shortcut: {Shortcut "Click your name"} description: "Login."))))


(class Together-Space-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Space"
      (<World-Action-Item> name: avatar-space         title: "Avatar" visible?: #t action-handler: {Event-Handler :together on-avatar-space} shortcut: {Shortcut :alt #\D} description: "Avatar space.")
      (<World-Action-Item> name: circle-space         title: "Circle" visible?: #t action-handler: {Event-Handler :together on-circle-space} shortcut: {Shortcut :alt #\C} description: "Circle space.")
      (<World-Action-Item> name: focus-space          title: "Focus" visible?: #t action-handler: {Event-Handler :together on-focus-space} shortcut: {Shortcut :alt #\F} description: "Focus space.")
      (<World-Action-Item> name: gallery-space        title: "Gallery" visible?: #t action-handler: {Event-Handler :together on-gallery-space} shortcut: {Shortcut :alt #\G} description: "Gallery space."))))


(class Together-Circle-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Circle"
      (<World-Action-Item> name: toggle-mic           title: "Toggle audio" visible?: #t action-handler: {Event-Handler :together on-toggle-mic} shortcut: {Shortcut :alt #\A} description: "Toggle audio.")
      (<World-Action-Item> name: toggle-camera        title: "Toggle video" visible?: #t action-handler: {Event-Handler :together on-toggle-camera} shortcut: {Shortcut :alt #\V} description: "Toggle video.")
      (<World-Action-Item> name: leave-circle         title: "Leave circle" visible?: #t action-handler: {Event-Handler :together on-leave-circle} description: "Leave circle."))))


(class Together-Share-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Share"
      (<World-Action-Item> name: toggle-screen-share  title: "Toggle screen share" visible?: #t shortcut: {Shortcut :alt :shift #\Y} action-handler: {Event-Handler :together on-toggle-screen-share} description: "Toggle screen share."))))


(class Together-Lookat-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Lookat"
      (<World-Action-Item> name: bring-to-front       title: "Bring to front" visible?: #t shortcut: {Shortcut "Click image"})
      (<World-Action-Item> name: enter-press          title: "Go to home view" visible?: #t action-handler: {Event-Handler :application on-enter-press} shortcut: {Shortcut Return} description: "Enter.")
      (<World-Action-Item> name: space-press          title: "Toggle rotation" visible?: #t shortcut: {Shortcut Space} description: "Space.")
      (<World-Action-Item> name: left-press           title: "Rotate left" visible?: #t shortcut: {Shortcut "Left Arrow"} description: "Left.")
      (<World-Action-Item> name: right-press          title: "Rotate right" visible?: #t shortcut: {Shortcut "Right Arrow"} description: "Right.")
      (<World-Action-Item> name: up-press             title: "Increase speed" visible?: #t shortcut: {Shortcut "Up Arrow"} description: "Up.")
      (<World-Action-Item> name: down-press           title: "Decrease speed" visible?: #t shortcut: {Shortcut "Down Arrow"} description: "Down.")
      (<World-Action-Item> name: tab-press            title: "Cycle focus" visible?: #t shortcut: {Shortcut "Tab / shift Tab"} description: "Tab Right or Left")
      (<World-Action-Item> name: number-press         title: "Change focus" visible?: #t shortcut: {Shortcut "1, 2, 3, 4, 5"} description: "Number of Image"))))


(class Together-Stream-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Stream"
      (<World-Action-Item> name: toggle-streams       visible?: #t shortcut: {Shortcut :alt :shift #\S} title: "Toggle streams" action-handler: {Event-Handler :space on-toggle-streams} description: "Toggle streams.")
      (<World-Action-Item> name: add-image            visible?: #t shortcut: {Shortcut :alt :shift #\7} title: "Add image" action-handler: {Event-Handler :together on-add-image} description: "Add image.")
      (<World-Action-Item> name: add-video            visible?: #t shortcut: {Shortcut :alt :shift #\8} title: "Add video" action-handler: {Event-Handler :together on-add-video} description: "Add video.")
      (<World-Action-Item> name: add-music            visible?: #t shortcut: {Shortcut :alt :shift #\9} title: "Add music" action-handler: {Event-Handler :together on-add-music} description: "Add music.")
      (<World-Action-Item> name: remove-stream        visible?: #t shortcut: {Shortcut :alt :shift #\0} title: "Remove stream" action-handler: {Event-Handler :together on-remove-stream} description: "Remove stream."))))


(class Together-Navigate-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Navigate"
      @wait
      (<World-Action-Item> name: goto-script          visible?: #t shortcut: {Shortcut :alt :shift #\S} title: "Goto script" action-handler: {Event-Handler :together on-goto-script} description: "Goto script.")
      (<World-Action-Item> name: goto-replay          visible?: #t shortcut: {Shortcut :alt :shift #\R} title: "Goto replay" action-handler: {Event-Handler :together on-goto-replay} description: "Goto replay.")
      @wait
      (<World-Action-Item> name: goto-simulate        visible?: #t shortcut: {Shortcut :alt :shift #\T} title: "Goto simulate" action-handler: {Event-Handler :together on-goto-simulate} description: "Goto simulate."))))


(class Together-Profile-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Profile"
      (<World-Action-Item> name: profile-pulse        title: "Profile pulse" visible?: #t shortcut: {Shortcut :control :shift #\P} action-handler: {Event-Handler :together on-profile-pulse} description: "Profile pulse.")
      (<World-Action-Item> name: profile-network      title: "Profile network" visible?: #t shortcut: {Shortcut :control :shift #\N} action-handler: {Event-Handler :together on-profile-network} description: "Profile network."))))


(class Together-Experiment-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Experiment"
      (<World-Action-Item> name: toggle-experiment    title: "Toggle experiment panel" visible?: #t action-handler: {Event-Handler :together on-toggle-experiment} description: "Toggle experiment panel.")
      (<World-Action-Item> name: run-experiment7      title: "Run experiment #7" visible?: #t action-handler: {Event-Handler :together on-run-experiment7} shortcut: {Shortcut :control #\7} description: "Run experiment #7.")
      (<World-Action-Item> name: run-experiment8      title: "Run experiment #8" visible?: #t action-handler: {Event-Handler :together on-run-experiment8} shortcut: {Shortcut :control #\8} description: "Run experiment #8.")
      (<World-Action-Item> name: run-experiment9      title: "Run experiment #9" visible?: #t action-handler: {Event-Handler :together on-run-experiment9} shortcut: {Shortcut :control #\9} description: "Run experiment #9.")
      (<World-Action-Item> name: run-experiment0      title: "Run experiment #0" visible?: #t action-handler: {Event-Handler :together on-run-experiment0} shortcut: {Shortcut :control #\0} description: "Run experiment #0."))))


(class Together-Script-Actions extends World-Script-Actions
  
  
  (form
    (<install>                                        title: "Script"
      (<!>                 name: test1                visible?: #t)
      (<!>                 name: test2                visible?: #t)
      (<!>                 name: test3                visible?: #t)
      (<!>                 name: test4                visible?: #t)
      (<!>                 name: test5                visible?: #t)
      (<!>                 name: test6                visible?: #t)
      (<!>                 name: test7                visible?: #t)
      (<!>                 name: test8                visible?: #t)
      (<!>                 name: test9                visible?: #t)
      (<!>                 name: test0                visible?: #t)
      (<!>                 name: view-script          visible?: #t)
      (<World-Action-Item> name: update-catalogs      title: "Update catalogs" visible?: #t shortcut: {Shortcut :control :alt #\U} action-handler: {Event-Handler :application on-update-catalogs} description: "Update catalogs.")
      (<World-Action-Item> name: edit-definition      title: "Edit definition" visible?: #t shortcut: {Shortcut F12} alternate-shortcut: {Shortcut :alt #\.} action-handler: {Event-Handler :application on-edit-definition} description: "Edit definition.")
      (<World-Action-Item> name: edit-script1         title: "Edit script #1" visible?: #t shortcut: {Shortcut :control :alt #\1} action-handler: {Event-Handler :together on-edit-script1} description: "Edit test #1.")
      (<World-Action-Item> name: edit-script2         title: "Edit script #2" visible?: #t shortcut: {Shortcut :control :alt #\2} action-handler: {Event-Handler :together on-edit-script2} description: "Edit test #2.")
      (<World-Action-Item> name: edit-script3         title: "Edit script #3" visible?: #t shortcut: {Shortcut :control :alt #\3} action-handler: {Event-Handler :together on-edit-script3} description: "Edit test #3.")
      (<World-Action-Item> name: edit-script4         title: "Edit script #4" visible?: #t shortcut: {Shortcut :control :alt #\4} action-handler: {Event-Handler :together on-edit-script4} description: "Edit test #4.")
      (<World-Action-Item> name: edit-script5         title: "Edit script #5" visible?: #t shortcut: {Shortcut :control :alt #\5} action-handler: {Event-Handler :together on-edit-script5} description: "Edit test #5.")
      (<World-Action-Item> name: edit-script6         title: "Edit script #6" visible?: #t shortcut: {Shortcut :control :alt #\6} action-handler: {Event-Handler :together on-edit-script6} description: "Edit test #6.")
      (<World-Action-Item> name: edit-script7         title: "Edit script #7" visible?: #t shortcut: {Shortcut :control :alt #\7} action-handler: {Event-Handler :together on-edit-script7} description: "Edit test #7.")
      (<World-Action-Item> name: edit-script8         title: "Edit script #8" visible?: #t shortcut: {Shortcut :control :alt #\8} action-handler: {Event-Handler :together on-edit-script8} description: "Edit test #8.")
      (<World-Action-Item> name: edit-script9         title: "Edit script #9" visible?: #t shortcut: {Shortcut :control :alt #\9} action-handler: {Event-Handler :together on-edit-script9} description: "Edit test #9.")
      (<World-Action-Item> name: edit-script0         title: "Edit script #0" visible?: #t shortcut: {Shortcut :control :alt #\0} action-handler: {Event-Handler :together on-edit-script0} description: "Edit test #0.")
      (<World-Action-Item> name: toggle-script        title: "Toggle script" visible?: #t shortcut: {Shortcut :control :alt #\S} action-handler: {Event-Handler :together on-toggle-script} description: "Toggle script.")))))
