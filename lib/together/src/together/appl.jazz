;;;============
;;;  Together
;;;============
;;;
;;;; Together Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.appl jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.command)
        (jazz.component)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.debugger.stub)
        (jazz.editor)
        (jazz.editor.commonlisp)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.editor.scheme)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.opengl.window)
        (jazz.project)
        (jazz.reference)
        (jazz.remote)
        (jazz.resource)
        (jazz.search)
        (jazz.stream)
        (jazz.text)
        (jazz.tree)
        (jazz.view)
        (world)
        (world.appl)
        (world.asset)
        (world.assets)
        (world.capabilities)
        (world.client.actions)
        (world.client.bars)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.hook)
        (world.interface)
        (world.interface.actions)
        (world.interface.bars)
        (world.interface.history)
        (world.interface.timeline)
        (world.io)
        (world.role)
        (world.settings)
        (world.task)
        (world.udp)
        (world.window)
        (together)
        (together.community)
        (together.debugger)
        (together.script)
        (together.settings)
        (together.window)
        (together.zone))


(class Together-Application extends World-Application
  
  
  (slot local-debugger initialize #f)

  
  (method override (process-name self)
    "Together")
  
  
  (method override (process-version self)
    together-version)
  
  
  (method override (process-release self)
    together-release)
  
  
  (method override (process-debugger self)
    ;; already installed in settings
    #f)
  
  
  (method override (new-toplevel self)
    (let ((fullscreen? window-fullscreen?)
          (pos (world-setting 'world.position {Point 150 50}))
          (size (world-setting 'world.size {Dimension 1100 750})))
      (new-opengl-window class: Together-Window fullscreen?: fullscreen? position: pos size: size render?: #f visible?: #f)))
  
  
  (method override (initialize-settings self)
    (nextmethod self)
    (register-world))
  
  
  (method override (default-preferences self)
    (new Together-Preferences))
  
  
  (method override (default-bindings self)
    (new Together-Bindings))
  
  
  ;; copy-pasted from IDE
  (method override (get-local-debugger self)
    (if (developer?)
        local-debugger
      (nextmethod self)))
  
  
  ;; copy-pasted from IDE
  (method override (install-process self)
    (nextmethod self)
    ;; quick hack for starting two togethers locally
    (unless (and (developer?)
                 (world-setting 'world.inhibit-empty-fifos? #f))
      (empty-fifo-directory feedback?: (developer?)))
    (when (developer?)
      (start-debuggers self)))
  
  
  (method override (finish-process self)
    (nextmethod self)
    (set-safe-explore-action 'ignore)
    (set-exceeds-tooltips? #f)
    (set-shortcut-hook self (~ call-shortcut-hook self))
    (set-setup-catalogs-hook (~ setup-catalogs self))
    ;; a try
    (when (developer?)
      (set-debugger-manager (new Together-Debugger-Manager))))
  
  
  ;; copy-pasted from IDE
  (method override (conclude-environment self)
    (nextmethod self)
    (when (developer?)
      ;; do this at the last moment possible because any error beyond this point
      ;; will be handled by the IDE itself which must thus be fully functional
      (if (get-controller-debugger)
          (attach-process local-debugger (get-local-process) #t)
        (when #t;(and kernel-source-access? (world-setting 'world.debugger? #f))
          (attach-to-controller (get-local-register) #t)
          (with-system-exception-debugger
            (lambda ()
              (ready-to-controller)
              (transmit-runtime-information (get-local-process) 'all)
              (current-input-port (console-input-port))
              (current-output-port (console-output-port))))))))
  
  
  (method override (close-environment self)
    (set-shortcut-hook self #f)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (let ((manager (locate panel 'manager)))
          (save-script manager))))
    (when (developer?)
      (let ((cataloguer (get-cataloguer)))
        (when cataloguer
          (save-catalogs cataloguer))))
    (nextmethod self))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (import (world.script.asset))
  (import (world.interface.script))
  (import (world.scriptum))
  (method override (activate self)
    ;; super mega quicky
    (let ((interface (current-interface))
          (world (current-world))
          (zone (current-zone)))
      (when edited-entity
        (let ((edited-path (get-path (get-asset edited-entity))))
          (let ((script (find-script world edited-path)))
            (when script
              (let ((content (load-asset-text script)))
                (when (not (equal? (digest-string content 'SHA-1)
                                   (digest-string (get-text (get-script edited-entity)) 'SHA-1)))
                  (let ((panel (child interface 'script)))
                    (let ((manager (locate panel 'manager)))
                      (let ((text (locate manager '(script text))))
                        (let ((entity (register-asset-script script)))
                          (set-edited-entity entity)
                          (set-edited manager entity)
                          (set-string-content text content)
                          (set-text (get-script entity) content)
                          (execute-script world edited-path))))))))))))
    (nextmethod self))

  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method (call-shortcut-hook self shortcut)
    (if shortcut-press-hook
        (with-safe-hook shortcut-press-hook
          (lambda (procedure)
            (procedure shortcut)))
      #f))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions self)
    (append (list (find-actions 'together))
            (nextmethod self)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-enter-press self evt)
    (let ((zone (current-zone)))
      (enter-press zone)))
  
  
  (method (on-tab-press self evt)
    (let ((zone (current-zone)))
      (tab-press zone)))
  
  
  (method (on-toggle-people self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-people zone evt))))
  
  
  (method (on-toggle-chat self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-chat zone evt))))
  
  
  (method (on-message self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-message zone evt))))
  
  
  (method (on-leave-circle self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-leave-circle zone evt))))
  
  
  (method (on-toggle-denoise self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-denoise zone evt))))
  
  
  (method (on-toggle-audio self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-audio zone evt))))
  
  
  (method (on-toggle-video self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-video zone evt))))
  
  
  (method (on-cycle-layouts self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-cycle-layouts zone evt))))
  
  
  (method (on-add-bookmark self evt)
    (let ((world (current-world)))
      (record-event udp-id-bookmark
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.)
      (display-message world "Bookmarked!")))
  
  
  (method (on-toggle-debug self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-debug zone evt))))
  
  
  (method (on-toggle-admin self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-admin zone evt))))
  
  
  (method (on-toggle-script self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-script zone evt))))
  
  
  (method (on-toggle-timeline self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-timeline zone evt))))
  
  
  (method (on-toggle-visualizer self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-visualizer zone evt))))
  
  
  (method (on-goto-gathering self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-goto-gathering zone evt))))
  
  
  (method (on-goto-script self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-goto-script zone evt))))
  
  
  (method (on-goto-replay self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-goto-replay zone evt))))
  
  
  @wait
  (method (on-goto-simulate self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-goto-simulate zone evt))))
  
  
  (method (on-request-replays self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-request-replays zone evt))))
  
  
  (method (on-toggle-screen-share self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-screen-share zone evt))))
  
  
  (method (on-toggle-mode self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-toggle-mode zone evt))))
  
  
  (method (on-configure-settings self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-configure-settings zone evt))))
  
  
  (method (on-show-info self evt)
    (let ((world (current-world)))
      (let ((duration (estimate-garbage-collect)))
        (display-message world (format "Garbage collect {a}ms" (seconds->milliseconds duration))))))
  
  
  (method (on-update-catalogs self evt)
    (update-catalogs self))
  
  
  (method (on-edit-definition self evt)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((focus (active-focus)))
        (when (is? focus Together-Script-Text-View)
          (let ((form (current-expr focus)))
            (when (symbol? form)
              (let ((target (standardize-form focus form #t)))
                (let ((definitions (get-coalesced-definitions (get-cataloguer) target)))
                  (if (null? definitions)
                      (bell)
                    (case (length definitions)
                      ((1) (let ((file (get-moniker (car definitions))))
                             (let ((assets (new Assets #f #f (get-parent file))))
                               (let ((asset (new Asset assets '() (list (get-name file)))))
                                 (edit-script zone asset)))))
                      (else (display-message world (format "Ambiguous definition: {a}" target)))))))))))))
  
  
  (method (on-edit-script1 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script1 zone evt))))
  
  
  (method (on-edit-script2 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script2 zone evt))))
  
  
  (method (on-edit-script3 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script3 zone evt))))
  
  
  (method (on-edit-script4 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script4 zone evt))))
  
  
  (method (on-edit-script5 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script5 zone evt))))
  
  
  (method (on-edit-script6 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script6 zone evt))))
  
  
  (method (on-edit-script7 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script7 zone evt))))
  
  
  (method (on-edit-script8 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script8 zone evt))))
  
  
  (method (on-edit-script9 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script9 zone evt))))
  
  
  (method (on-edit-script0 self evt)
    (let ((zone (current-zone)))
      (when (is? zone Community-Zone)
        (on-edit-script0 zone evt))))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (news-file self)
    (world-file '("devel" "together" "News.ftx") 'Resources))
  
  
  (method override (roadmap-file self)
    (world-file '("devel" "together" "Roadmap.ftx") 'Resources))
  
  
  (method override (help-file self)
    (world-file '("devel" "together" "Help.ftx") 'Resources))
  
  
  (method override (about-file self)
    (world-file '("devel" "together" "About.ftx") 'Resources))
  
  
  ;;;
  ;;;; Services
  ;;;
  
  
  (method override (provide-services self)
    (nextmethod self)
    ;; feedback
    (provide-service 'user-message (~ user-message-service self))
    (provide-service 'user-feedback (~ user-feedback-service self))
    (provide-service 'clear-user-message (~ clear-user-message-service self))
    (provide-service 'clear-user-feedback (~ clear-user-feedback-service self))
    (provide-service 'console-feedback (~ console-feedback-service self))
    (provide-service 'modal-feedback (~ modal-feedback-service self))
    ;; edition
    @comment
    (provide-service 'edit-document (~ edit-document-service self)))
  
  
  (method (user-message-service self obj . rest)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (display-status world (apply format obj rest))))))
  
  
  (method (user-feedback-service self obj . rest)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (display-status world (apply format obj rest))))))
  
  
  (method (clear-user-message-service self)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (clear-message world)))))
  
  
  (method (clear-user-feedback-service self)
    @wait
    (let ((world (current-world)))
      (with-reentrant-task-mutex
        (lambda ()
          (clear-message world)))))
  
  
  (method (console-feedback-service self . rest)
    (apply format :console rest))
  
  
  (method (modal-feedback-service self text . rest)
    (terminal text))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  ;; copy-pasted from IDE
  (method override (register-base-objects self)
    (nextmethod self)
    (when (developer?)
      (register-object (get-local-register) 'debugger (new Jazz-Debugger-Local-Proxy local-debugger))))
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-console self)
    (if (or (remote-proxy? (get-controller-debugger))
            (not (developer?)))
        (nextmethod self)
      ;; no REPL until Together internal consoles
      (select-console self)))
  
  
  ;; copy-pasted from IDE
  (method (start-debuggers self)
    (when (developer?)
      (when (not local-debugger)
        (set! local-debugger (new Together-Debugger))
        (start-debugger local-debugger)
        (register-debugger local-debugger)
        (set-current-debugger local-debugger))))
  
  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method protected (setup-catalogs self)
    (define (world-catalog)
      (let ((output {File Settings "work" "catalogs" "world.jcat"})
            (directories {Directory Application-World})
            (extensions :jazz))
        (new Filing-Catalog 'world output directories extensions #f #f #t)))
    
    (define (user-catalog)
      (let ((output {File Settings "work" "catalogs" "user.jcat"})
            (directories {Directory Settings})
            (extensions :jazz))
        (new Filing-Catalog 'user output directories extensions #f #f #t)))
    
    (unless (get-cataloguer)
      (let ((cataloguer (new Cataloguer)))
        (define (add-project-catalogs file)
          (let ((project (instantiate-file file)))
            (for-each-project project
              (lambda (project)
                (let ((catalog (require-catalog project)))
                  (add-catalog cataloguer catalog))))))
        
        (set-cataloguer cataloguer)
        (add-catalog cataloguer (world-catalog))
        (add-catalog cataloguer (user-catalog))
        (when kernel-source-access?
          ;; quicky to test
          (register-alias 'Profile '(Settings "work"))
          (add-project-catalogs {File Together "lib" ".project"})
          (add-project-catalogs {File World "lib" ".project"})
          (add-project-catalogs {File Jazz "lib" ".project"}))
        (for-each-active-catalog cataloguer #f
          (lambda (catalog)
            (load-content catalog report?: #f))))))
  
  
  (method protected (update-catalogs self)
    (delay-event
      (lambda ()
        (let ((world (current-world)))
          (with-task-mutex
            (lambda ()
              (display-message world "Updating catalogs...")))
          (sleep .1)
          (with-task-mutex
            (lambda ()
              (setup-catalogs self)
              (for-each-active-catalog (get-cataloguer) #f
                (lambda (catalog)
                  (post-catalog
                    (lambda ()
                      (update catalog)))))
              (display-message world "Done")))))))
  
  
  ;;;
  ;;;; Sites
  ;;;
  
  
  (method override (register-site-looks self)
    (let ((dark-purple {Color red: .464 green: .141 blue: .732})
          (purple {Color Purple})
          (cyan {Color red: .120 green: .624 blue: .616}))
      ;; origin
      (register-site-look 'udp-release 10 chronology-orange)
      (register-site-look 'audio 9 chronology-yellow)
      (register-site-look 'video 8 chronology-green) ;; SERVER
      ;; receiver
      (register-site-look 'udp-state 7 chronology-cyan)
      (register-site-look 'udp-receive 6 chronology-blue)  ;; SERVER
      (register-site-look 'udp-process 5 chronology-purple)
      (register-site-look 'video-output 4 chronology-magenta)
      ;; internal
      (register-site-look 'alive 3 {Color Yellow})
      (register-site-look 'network 3 {Color Yellow})
      (register-site-look 'tick 3 {Color Green})
      (register-site-look 'render 3 {Color Blue})
      (register-site-look 'render-world #f #f)
      (register-site-look 'render-interface #f #f)
      (register-site-look 'render-sync #f #f)
      ;; message
      (register-site-look 'message 2 {Color Orange})
      (register-site-look 'event #f #f)
      ;; memory
      (register-site-look 'memory 1 {Color Red})
      ;; other
      (register-site-look #f 10 {Color Dark-Gray})))
  
  
  ;;;
  ;;;; Interface
  ;;;

  
  (method override (setup-application-interface self)
    (let ((interface (current-interface)))
      (new History-Slider name: 'slider parent: interface visible?: #f)
      (install-bars
        `((,World-Main-Bar      main      horizontal none #f)
          (,World-Universe-Bar  universe  horizontal none #f)
          (,World-Window-Bar    window    horizontal none #f)
          (,World-Media-Bar     media     horizontal none #f)
          (,World-Camera-Bar    camera    horizontal none #f)
          (,World-History-Bar   history   horizontal none #f)
          (,World-Models-Bar    models    horizontal none #f)
          (,World-Blocks-Bar    blocks    horizontal none #f)
          (,World-Target-Bar    target    vertical   none #f)
          (,World-Edition-Bar   edition   horizontal none #f)
          (,World-Interface-Bar interface horizontal none #f)
          ,(case current-role
             ((developer)
              `(,Together-Debug-Bar debug horizontal (center tail) #f))
             (else
              `(,Together-Debug-Bar debug horizontal none #f)))))
      (set-layouter (child interface 'models) models-bar-layouter)
      (set-layouter (child interface 'blocks) blocks-bar-layouter)))


  ;;;
  ;;;; Roles
  ;;;
  
  
  (method override (role-traits self role)
    (case role
      ((user) user-role)
      ((developer) developer-role)
      (else (nextmethod self role))))


  ;;;
  ;;;; User
  ;;;


  (define-trait user-bindings Bindings
    (<Role-Trait>        name: user
      (<install>)))

  (definition user-role
    `((:bindings ,user-bindings)))


  ;;;
  ;;;; Developer
  ;;;


  (define-trait developer-bindings Bindings
    (<Role-Trait>              name: developer
      (<install>
        ;; not working because it is shadowned by toggle video
        ;; paste-cycle-ring should of course be a text action...
        (<application!>
          (<!>                 name: paste-cycle-ring          visible?: #t shortcut: {Shortcut :alt #\V})
          (<!>                 name: paste-cycle-ring-reversed visible?: #t shortcut: {Shortcut :alt :shift #\V}))
        (<view!>
          (<!>                 name: select-all                visible?: #t shortcut: {Shortcut :control :alt #\A}))
        (<text!>
          (<!>                 name: move-backward-word        visible?: #t)
          (<!>                 name: extend-backward-word      visible?: #t)
          (<!>                 name: move-forward-word         visible?: #t)
          (<!>                 name: extend-forward-word       visible?: #t)
          (<!>                 name: move-upward               visible?: #t)
          (<!>                 name: extend-upward             visible?: #t)
          (<!>                 name: move-downward             visible?: #t)
          (<!>                 name: extend-downward           visible?: #t)
          (<!>                 name: delete-char               visible?: #t)
          (<!>                 name: delete-word               visible?: #t)
          (<!>                 name: home                      visible?: #t)
          (<!>                 name: extend-home               visible?: #t)
          (<!>                 name: end                       visible?: #t)
          (<!>                 name: extend-end                visible?: #t)
          (<!>                 name: document-home             visible?: #t alternate-shortcut: {Shortcut :meta Up})
          (<!>                 name: document-end              visible?: #t alternate-shortcut: {Shortcut :meta Down})
          (<!>                 name: paste&next                visible?: #t)
          (<!>                 name: kill-line                 visible?: #t)
          (<!>                 name: search-forward-mode       visible?: #t)
          (<!>                 name: search-backward-mode      visible?: #t)
          (<!>                 name: search-current            visible?: #t)
          (<!>                 name: select-outer              visible?: #t)
          (<!>                 name: center-caret              visible?: #t)
          (<!>                 name: top-caret                 visible?: #t)
          (<!>                 name: one/no-space              visible?: #t))
        (<code-text!>
          (<!>                 name: evaluate                  visible?: #t)
          (<!>                 name: backward-outline          visible?: #t)
          (<!>                 name: forward-outline           visible?: #t))
        (<lisp-text!>
          (<!>                 name: tabulate                  visible?: #t)
          (<!>                 name: highlight-declaration     visible?: #t)
          (<!>                 name: remove-highlights         visible?: #t))
        (<search-mode!>
          (<!>                 name: whole-words               visible?: #t)
          (<!>                 name: ignore-case               visible?: #t)
          (<!>                 name: regexp                    visible?: #t)
          (<!>                 name: forward                   visible?: #t)
          (<!>                 name: backward                  visible?: #t)
          (<!>                 name: current                   visible?: #t)
          (<!>                 name: widen                     visible?: #t)
          (<!>                 name: center-caret              visible?: #t)
          (<!>                 name: home                      visible?: #t)
          (<!>                 name: end                       visible?: #t)
          (<!>                 name: highlight                 visible?: #t)
          (<!>                 name: finish                    visible?: #t)
          (<!>                 name: cancel                    visible?: #t))
        (<highlight-mode!>
          (<!>                 name: highlight                 visible?: #t))
        (<world-edition!>
          (<!>                 name: toggle-grid               visible?: #t shortcut: {Shortcut :alt #\G}))
        (<world-debug!>
          (<!>                 name: toggle-info               visible?: #t)
          (<!>                 name: toggle-profiler           visible?: #t)
          (<!>                 name: reset-profiling           visible?: #t)
          (<!>                 name: toggle-evolution          visible?: #t)
          (<!>                 name: view-workspace            visible?: #t)
          (<!>                 name: view-console              visible?: #t)
          (<!>                 name: view-debugger             visible?: #t)
          (<!>                 name: clear-console             visible?: #t)
          (<!>                 name: clear-terminal            visible?: #t)
          (<!>                 name: explore-interface         visible?: #t)
          (<!>                 name: toggle-axes               visible?: #t)
          (<!>                 name: test                      visible?: #t)
          (<!>                 name: test1                     visible?: #t shortcut: {Shortcut :alt #\1})
          (<!>                 name: test2                     visible?: #t shortcut: {Shortcut :alt #\2})
          (<!>                 name: test3                     visible?: #t shortcut: {Shortcut :alt #\3})
          (<!>                 name: test4                     visible?: #t shortcut: {Shortcut :alt #\4})
          (<!>                 name: test5                     visible?: #t shortcut: {Shortcut :alt #\5})
          (<!>                 name: test6                     visible?: #t shortcut: {Shortcut :alt #\6})
          (<!>                 name: test7                     visible?: #t shortcut: {Shortcut :alt #\7})
          (<!>                 name: test8                     visible?: #t shortcut: {Shortcut :alt #\8})
          (<!>                 name: test9                     visible?: #t shortcut: {Shortcut :alt #\9})
          (<!>                 name: test0                     visible?: #t shortcut: {Shortcut :alt #\0})
          (<World-Action-Item> name: update-catalogs           visible?: #t shortcut: {Shortcut :control :alt #\U} title: "Update catalogs" action-handler: {Event-Handler :application on-update-catalogs})
          (<World-Action-Item> name: edit-definition           visible?: #t shortcut: {Shortcut F12} alternate-shortcut: {Shortcut :alt #\.} title: "Edit definition" action-handler: {Event-Handler :application on-edit-definition})
          (<World-Action-Item> name: edit-script1              visible?: #t shortcut: {Shortcut :control :alt #\1} title: "Edit script #1" action-handler: {Event-Handler :application on-edit-script1})
          (<World-Action-Item> name: edit-script2              visible?: #t shortcut: {Shortcut :control :alt #\2} title: "Edit script #2" action-handler: {Event-Handler :application on-edit-script2})
          (<World-Action-Item> name: edit-script3              visible?: #t shortcut: {Shortcut :control :alt #\3} title: "Edit script #3" action-handler: {Event-Handler :application on-edit-script3})
          (<World-Action-Item> name: edit-script4              visible?: #t shortcut: {Shortcut :control :alt #\4} title: "Edit script #4" action-handler: {Event-Handler :application on-edit-script4})
          (<World-Action-Item> name: edit-script5              visible?: #t shortcut: {Shortcut :control :alt #\5} title: "Edit script #5" action-handler: {Event-Handler :application on-edit-script5})
          (<World-Action-Item> name: edit-script6              visible?: #t shortcut: {Shortcut :control :alt #\6} title: "Edit script #6" action-handler: {Event-Handler :application on-edit-script6})
          (<World-Action-Item> name: edit-script7              visible?: #t shortcut: {Shortcut :control :alt #\7} title: "Edit script #7" action-handler: {Event-Handler :application on-edit-script7})
          (<World-Action-Item> name: edit-script8              visible?: #t shortcut: {Shortcut :control :alt #\8} title: "Edit script #8" action-handler: {Event-Handler :application on-edit-script8})
          (<World-Action-Item> name: edit-script9              visible?: #t shortcut: {Shortcut :control :alt #\9} title: "Edit script #9" action-handler: {Event-Handler :application on-edit-script9})
          (<World-Action-Item> name: edit-script0              visible?: #t shortcut: {Shortcut :control :alt #\0} title: "Edit script #0" action-handler: {Event-Handler :application on-edit-script0})
          (<World-Action-Item> name: toggle-script             visible?: #t shortcut: {Shortcut :control :alt #\S} title: "Toggle script" action-handler: {Event-Handler :application on-toggle-script} description: "Toggle script.")
          (<World-Action-Item> name: toggle-screen-share       visible?: #t shortcut: {Shortcut :alt #\S} title: "Toggle screen share" action-handler: {Event-Handler :application on-toggle-screen-share} description: "Toggle screen share.")
          (<World-Action-Item> name: toggle-mode               visible?: #t shortcut: {Shortcut :alt #\M} title: "Toggle mode" action-handler: {Event-Handler :application on-toggle-mode} description: "Toggle mode.")
          (<World-Action-Item> name: toggle-debug              visible?: #t shortcut: {Shortcut :alt :shift #\D} title: "Toggle debug" action-handler: {Event-Handler :application on-toggle-debug} description: "Toggle debug.")
          (<World-Action-Item> name: toggle-admin              visible?: #t shortcut: {Shortcut :alt :shift #\A} title: "Toggle admin" action-handler: {Event-Handler :application on-toggle-admin} description: "Toggle admin.")
          (<World-Action-Item> name: toggle-timeline           visible?: #t shortcut: {Shortcut :alt #\T} title: "Toggle timeline" action-handler: {Event-Handler :application on-toggle-timeline} description: "Toggle timeline.")
          (<World-Action-Item> name: toggle-visualizer         visible?: #t shortcut: {Shortcut :alt :shift #\V} title: "Toggle visualizer" action-handler: {Event-Handler :application on-toggle-visualizer} description: "Toggle visualizer.")
          (<World-Action-Item> name: goto-gathering            visible?: #t shortcut: {Shortcut :alt :shift #\G} title: "Goto gathering" action-handler: {Event-Handler :application on-goto-gathering} description: "Goto gathering.")
          (<World-Action-Item> name: goto-script               visible?: #t shortcut: {Shortcut :alt :shift #\W} title: "Goto script" action-handler: {Event-Handler :application on-goto-script} description: "Goto script.")
          (<World-Action-Item> name: goto-replay               visible?: #t shortcut: {Shortcut :alt :shift #\R} title: "Goto replay" action-handler: {Event-Handler :application on-goto-replay} description: "Goto replay.")
          @wait
          (<World-Action-Item> name: goto-simulate             visible?: #t shortcut: {Shortcut :alt :shift #\T} title: "Goto simulate" action-handler: {Event-Handler :application on-goto-simulate} description: "Goto simulate.")
          (<World-Action-Item> name: request-replays           visible?: #t shortcut: {Shortcut :alt :shift #\E} title: "Request replays" action-handler: {Event-Handler :application on-request-replays} description: "Request replays.")
          (<World-Action-Item> name: configure-settings        visible?: #t shortcut: {Shortcut :alt :shift #\X} title: "Configure settings" action-handler: {Event-Handler :application on-configure-settings} description: "Configure settings.")
          (<World-Action-Item> name: show-info                 visible?: #t shortcut: {Shortcut :alt :shift #\I} title: "Show info" action-handler: {Event-Handler :application on-show-info} description: "Show info.")))))

  (definition developer-role
    `((:bindings ,developer-bindings))))


;;;
;;;; Debugger
;;;


(class Together-Debugger-Manager extends Debugger-Manager
  
  
  (method override (report-message self format-string . rest)
    (let ((world (current-world)))
      (let ((message (apply format format-string rest)))
        (display-message world message))))
  
  
  (method override (report-status self format-string . rest)
    (let ((world (current-world)))
      (let ((message (apply format format-string rest)))
        (display-status world message))))
  
  
  (method override (process-evaluate-when self process)
    'always))


;;;
;;;; Debug
;;;


(class Together-Debug-Bar extends World-Actionbar
  
  
  (form
    (<install>
      (<World-Parameter-Button> name: toggle-info             resource: {Image-Resource "Library"} action-handler: {Action world-debug toggle-info} parameter: info)
      (<World-Parameter-Button> name: toggle-profiler         resource: {Image-Resource "Memory"} action-handler: {Action world-debug toggle-profiler} parameter: profiler)
      (<World-Parameter-Button> name: toggle-timeline         resource: {Image-Resource "AlignmentCenter"} action-handler: {Action world-debug toggle-timeline} parameter: timeline)
      (<World-Parameter-Button> name: toggle-evolution        resource: {Image-Resource "Preview"} action-handler: {Action world-debug toggle-evolution} parameter: evolution)
      (<World-Action-Button>    name: clear-terminal          resource: {Image-Resource "Cancel"} action-handler: {Action world-debug clear-terminal})
      (<World-Action-Button>    name: clear-console           resource: {Image-Resource "ClearResults"} action-handler: {Action world-debug clear-console})
      (<World-Action-Button>    name: explore-interface       resource: {Image-Resource "Watch"} action-handler: {Action world-debug explore-interface}))))


;;;
;;;; Preferences
;;;


(class Together-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                         toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        ;; Scripting
        (<Jazz-Text-Preferences>       name: jazz-text)
        (<Scheme-Text-Preferences>     name: scheme-text)
        (<CommonLisp-Text-Preferences> name: commonlisp-text)
        (<Command-Text-Preferences>    name: command-text))
      (<Debug-Preferences>             name: debug evaluate-when: always)
      (<Inspector-Preferences>         name: inspector))))


;;;
;;;; Bindings
;;;


(class Together-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      ;; Application
      (<!>                           name: text
        (<!>                         name: move-backward-char   visible?: #t)
        (<!>                         name: extend-backward-char visible?: #t)
        (<!>                         name: move-forward-char    visible?: #t)
        (<!>                         name: extend-forward-char  visible?: #t)
        (<!>                         name: delete-char          visible?: #t)
        (<!>                         name: home                 visible?: #t)
        (<!>                         name: extend-home          visible?: #t)
        (<!>                         name: end                  visible?: #t)
        (<!>                         name: extend-end           visible?: #t))
      (<!>                           name: tree
        (<!>                         name: move-upward          visible?: #t)
        (<!>                         name: move-downward        visible?: #t))
      (<!>                           name: view
        (<!>                         name: escape               visible?: #t)
        (<!>                         name: backspace            visible?: #t)
        (<!>                         name: return               visible?: #t)
        (<!>                         name: undo                 visible?: #t)
        (<!>                         name: redo                 visible?: #t)
        (<!>                         name: cut                  visible?: #t)
        (<!>                         name: copy                 visible?: #t)
        (<!>                         name: paste                visible?: #t)
        (<!>                         name: select-all           visible?: #t)
        (<!>                         name: move-left            visible?: #t)
        (<!>                         name: extend-left          visible?: #t)
        (<!>                         name: move-up              visible?: #t)
        (<!>                         name: extend-up            visible?: #t)
        (<!>                         name: move-right           visible?: #t)
        (<!>                         name: extend-right         visible?: #t)
        (<!>                         name: move-down            visible?: #t)
        (<!>                         name: extend-down          visible?: #t))
      ;; Scripting
      (<Code-Text-Actions>           name: code-text)
      (<Lisp-Text-Actions>           name: lisp-text)
      (<Jazz-Text-Actions>           name: jazz-text)
      (<Search-Mode-Actions>         name: search-mode)
      (<Highlight-Mode-Actions>      name: highlight-mode)
      (<Extended-Mode-Actions>       name: extended-mode)
      (<Execute-Mode-Actions>        name: execute-mode)
      (<Find-Mode-Actions>           name: find-mode)
      ;; World
      (<World-Menu-Actions>          name: world-menu)
      (<World-Interface-Actions>     name: world-interface)
      (<World-Graphics-Actions>      name: world-graphics)
      (<World-Sound-Actions>         name: world-sound)
      (<World-Media-Actions>         name: world-media)
      (<World-Client-Actions>        name: world-client)
      (<World-World-Actions>         name: world-world)
      (<World-Zone-Actions>          name: world-zone)
      (<World-Movement-Actions>      name: world-movement)
      (<World-Camera-Actions>        name: world-camera)
      (<World-Universe-Actions>      name: world-universe)
      (<World-Spell-Actions>         name: world-spell)
      (<World-Edition-Actions>       name: world-edition)
      (<World-History-Actions>       name: world-history)
      (<World-Window-Actions>        name: world-window)
      (<World-Debug-Actions>         name: world-debug)
      (<World-Tutorial-Actions>      name: world-tutorial)
      (<World-Objective-Actions>     name: world-objective)
      (<World-Collision-Actions>     name: world-collision)
      (<World-Anonymous-Actions>     name: world-anonymous)
      (<World-User-Actions>          name: world-user)
      ;; Together
      (<Together-Actions>            name: together))))


;;;
;;;; Actions
;;;


(class Together-Actions extends World-Actions
  
  
  (form
    (<install>                                        title: "Together"
      ;; application
      (<World-Action-Item> name: enter-press          title: "Enter" visible?: #t action-handler: {Event-Handler :application on-enter-press} shortcut: {Shortcut Return} description: "Enter.")
      (<World-Action-Item> name: tab-press            title: "Tab" visible?: #t action-handler: {Event-Handler :application on-tab-press} shortcut: {Shortcut Tab} description: "Tab.")
      (<World-Action-Item> name: toggle-people        title: "Toggle people" visible?: #t action-handler: {Event-Handler :application on-toggle-people} shortcut: {Shortcut :alt #\P} description: "Toggle people.")
      (<World-Action-Item> name: toggle-chat          title: "Toggle chat" visible?: #t action-handler: {Event-Handler :application on-toggle-chat} shortcut: {Shortcut :alt #\C} description: "Toggle chat.")
      (<World-Action-Item> name: message              title: "Message" visible?: #t action-handler: {Event-Handler :application on-message} shortcut: {Shortcut :alt Return} description: "Message.")
      ;; media
      (<World-Action-Item> name: leave-circle         title: "Leave circle" visible?: #t action-handler: {Event-Handler :application on-leave-circle} shortcut: {Shortcut :alt Backspace} description: "Leave circle.")
      (<World-Action-Item> name: toggle-denoise       title: "Toggle denoise" visible?: #t action-handler: {Event-Handler :application on-toggle-denoise} shortcut: {Shortcut :alt #\D} description: "Toggle denoise.")
      (<World-Action-Item> name: toggle-audio         title: "Toggle audio" visible?: #t action-handler: {Event-Handler :application on-toggle-audio} shortcut: {Shortcut :alt #\A} description: "Toggle audio.")
      (<World-Action-Item> name: toggle-video         title: "Toggle video" visible?: #t action-handler: {Event-Handler :application on-toggle-video} shortcut: {Shortcut :alt #\V} description: "Toggle video.")
      (<World-Action-Item> name: cycle-layouts        title: "Cycle layouts" visible?: #t action-handler: {Event-Handler :application on-cycle-layouts} shortcut: {Shortcut :alt #\L} description: "Cycle layouts.")
      (<World-Action-Item> name: add-bookmark         title: "Add bookmark" visible?: #t action-handler: {Event-Handler :application on-add-bookmark} shortcut: {Shortcut :alt #\B} description: "Add bookmark.")
      ;; window
      (<World-Action-Item> name: toggle-windowed-mode title: "Windowed / fullscreen" visible?: #t action-handler: {Event-Handler :world on-toggle-windowed-mode} shortcut: {Shortcut :meta #\F} alternate-shortcut: {Shortcut :alt #\F} description: "Toggle between windowed and fullscreen mode.")))))
