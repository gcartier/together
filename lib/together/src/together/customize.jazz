;;;============
;;;  Together
;;;============
;;;
;;;; Customize Space
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.customize jazz


(import (jazz.action)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.time)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (gaea.dye)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.build)
        (world.client)
        (world.context)
        (world.interface)
        (world.interface.avatars)
        (world.interface.color)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.exception)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.showcase)
        (world.interface.text)
        (world.io)
        (world.settings)
        (world.skybox)
        (world.space)
        (world.support)
        (world.task)
        (world.window)
        (together)
        (together.settings)
        (together.space)
        (together.zone))


(define-trait customize-bindings Bindings
  (<Trait>                   name: customize
    (<install>
      (<world-main!>
        (<!>                 name: bindings-viewer            active?: #t)
        (<!>                 name: quit-world                 active?: #t))
      (<world-interface!>
        (<!>                 name: toggle-windowed-mode       active?: #t)))))


(class Customize-Space extends Together-Space
  
  
  (slot zone getter generate)
  
  
  (method override (initialize self zone)
    (nextmethod self)
    (set! self.zone zone))
  
  
  (method override (space-name self)
    'customize)
  
  
  (method override (space-install self)
    (nextmethod self)
    (let ((interface (current-interface)))
      (let ((root (new Together-Root parent: interface location: 'fill size: (get-size interface) layout-type: 'justify)))
        (new Label-View name: 'welcome parent: root title: "Together" location: '(center 30) size: {Dimension 400 80} auto-size?: #t font: {Font font-name: tahoma point-size: 60 shadow: thin})
        (new Push-Button name: 'done parent: root title: "Done" location: '(center -30) size: {Dimension 160 26} font: {Font font-name: tahoma point-size: 13 shadow: thin} action-handler: (~ on-done self))
        (new Customize-Color name: 'color parent: root location: '(-10 center) size: {Dimension 430 110})
        (set! self.root root))
      (layout-view interface)
      (layout-view root)))
  
  
  (method override (space-activate self)
    (nextmethod self)
    (let ((world (current-world)))
      (goto-showcase world 'avatars)
      (select-avatar self)))
  
  
  (method override (space-uninstall self)
    (nextmethod self)
    (close root)
    (hide-interface)
    (reset-panel-stack))
  
  
  (method override (space-bindings self)
    (list customize-bindings))
  
  
  (method override (space-actions self)
    (append (list (find-actions 'world-main)
                  (find-actions 'world-interface))
            (nextmethod self)))
  
  
  (method override (application-activate self)
    (let ((world (current-world)))
      (install-vista)
      (animated (get-showcase world))))
  
  
  (method override (application-deactivate self)
    (let ((world (current-world)))
      (uninstall-vista)
      (unanimated (get-showcase world))))
  
  
  (method override (mouse-track self elapse dx dy)
    (let ((world (current-world)))
      (track-avatar (get-showcase world) dx dy))
    #t)
  
  
  (method override (show-me? self)
    #f)
  
  
  (method override (showcase-avatar? self)
    #t)
  
  
  (method override (showcase-avatar-y self avatar)
    (if orb-avatars?
        -3.1
      -2.93))
  
  
  (method override (showcase-avatar-scaling self avatar)
    (if orb-avatars?
        (nextmethod self avatar)
      (cond ((equal? avatar "warcraft/character/draeneifemale")
             .75)
            ((equal? avatar "warcraft/character/nightelffemale")
             .75)
            ((equal? avatar "warcraft/creature/cat")
             .85)
            (else
             .8))))
  
  
  (method override (showcase-avatars-vertical self)
    (if orb-avatars?
        80
      95))
  
  
  (method override (showcase-avatars-double-click self h v)
    (change-avatar self))
    
  
  (method override (enter-press self)
    (change-avatar self))
    
  
  (method override (escape-press self)
    (select-avatar self)
    (goto-space zone 'login)
    #t)
  
  
  (method (select-avatar self)
    (let ((world (current-world)))
      (let ((showcase (get-showcase world)))
        (let ((elements (get-elements showcase))
              (avatar (get-character-avatar (get-configuration zone)))
              (dye (get-character-dye (get-configuration zone))))
          (let ((element (find elements avatar key: get-model test: equal? return: 'item)))
            (when element
              (set-selection showcase element)
              (selection-update showcase element)
              (set-color (get-selection-entity showcase) dye)
              (let ((chooser (locate (child root 'color) 'chooser)))
                (set-color chooser (dye->color dye))
                (update chooser))))))))
  
  
  (method (on-done self evt)
    (change-avatar self))
  
  
  (method (change-avatar self)
    (let ((world (current-world)))
      (let ((entity (get-selection-entity (get-showcase world))))
        (let ((avatar (get-avatar entity))
              (dye (get-color entity)))
          (set-character-avatar (get-configuration zone) avatar)
          (set-character-dye (get-configuration zone) dye)
          (save-configuration zone)
          (goto-space zone 'login))))))


;;;
;;;; Customize-Color
;;;


(class Customize-Color extends World-Panel
  
  
  (form
    (<install>                             layout-type: fill
      (<World-Color-Chooser> name: chooser)))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (let ((chooser (locate self 'chooser)))
      (set-background chooser #f)
      (set-visible? (locate chooser 'saturation) #f)
      (set-visible? (locate chooser 'value) #f)
      (set-visible? (locate chooser 'color) #f)
      (update chooser)
      (set-feedback chooser (~ change-color self))))
  
  
  (method (change-color self color)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((entity (get-selection-entity (get-showcase world)))
            (dye (color->dye color)))
        (set-color entity dye))))))
