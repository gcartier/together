;;;============
;;;  Together
;;;============
;;;
;;;; Together Product
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.product jazz


(import (jazz.io)
        (jazz.product))


;;;
;;;; Build
;;;


(definition (build descriptor (unit: unit #f) (skip-references?: skip-references? #f) (force?: force? #f))
  (define (resources-dir)
    (let ((bundle (product-descriptor-build-bundle descriptor)))
      (if bundle
          (new-directory {Directory Build} (format "{a}.app/Contents/Resources" bundle))
        {Directory Build})))
  
  (let ((project-dir {Directory Together})
        (resources-dir (resources-dir)))
    (define (install-filename path)
      (let ((src (new-file project-dir path))
            (dst (new-file resources-dir path)))
        (install-file src dst
          feedback: (lambda (action pathname)
                      (build-feedback "; {a} {a}..." action (get-name pathname))))))
    
    (define (install-dirname path (src #f) (dst #f))
      (let ((src (new-directory project-dir (or src path)))
            (dst (new-directory resources-dir (or dst path))))
        (install-directory src dst
          feedback: (let ((first? #t))
                      (lambda (action pathname)
                        (when first?
                          (build-feedback "; {a} {a}..." action (get-name pathname))
                          (set! first? #f)))))))
    
    (define (copy-info)
      (install-filename '("README"))
      (install-filename '("devel" "together" "About.ftx"))
      (install-filename '("devel" "together" "Help.ftx"))
      (install-filename '("devel" "together" "News.ftx") )
      (install-filename '("devel" "together" "Roadmap.ftx")))
    
    (define (copy-assets)
      (install-dirname '("world" "lib" "world.client" "assets"))
      (install-dirname '("lib" "together" "assets")))
    
    (define (copy-templates)
      (install-dirname '("devel" "templates")))
    
    (build-product-descriptor descriptor unit: unit skip-references?: skip-references? force?: force?)
    (initialize-aliases)
    (copy-info)
    (copy-assets)
    (copy-templates)))


;;;
;;;; Install
;;;


(definition install-dir
  (cond-expand
    (windows
     {Directory Home "together" "install"})
    (else
     {Directory Home "Devel" "together" "install"})))


(definition install-name
  (cond-expand
    (mac
     (cond-expand (devel
                   "together-devel.app")
                  (test
                   "together-test.app")
                  (triage
                   "together-triage.app")
                  (prod
                   "together-prod.app")))
    (unix
     (cond-expand (devel
                   "Togetherd")
                  (else
                   "Together")))
    (else
     (cond-expand (devel
                   "together-devel")
                  (test
                   "together-test")
                  (triage
                   "together-triage")
                  (prod
                   "together-prod")))))


(definition (install descriptor)
  (initialize-aliases)
  ;; appl
  (install-application descriptor install-dir
    name: install-name
    scriptable?: #t
    platform?: #t
    opengl?: #t
    git?: #t
    gstreamer?: #t
    files: (cond-expand
             (windows '("README" @wait "together-server.exe" @wait "together-processor.exe" @wait "together-worker.exe"))
             (unix '("README" @wait "Together-Server" @wait "Together-Processor" @wait "Together-Worker"))
             (else '("README")))
    directories: '("devel")
    ignored-macosx: '("together-server.app"
                      "together-processor.app"
                      "together-worker.app"))
  ;; apps
  (cond-expand
    (mac
     (let ((app-dir (new-directory install-dir install-name)))
       @wait
       (install-directory {Directory Build "together-server.app"} (new-directory app-dir '("Contents" "MacOS" "together-server.app"))
         feedback: (lambda (action pathname)
                     (build-feedback "; {a} {a}..." action (get-name pathname))))
       @wait
       (install-directory {Directory Build "together-processor.app"} (new-directory app-dir '("Contents" "MacOS" "together-processor.app"))
         feedback: (lambda (action pathname)
                     (build-feedback "; {a} {a}..." action (get-name pathname))))
       @wait
       (install-directory {Directory Build "together-worker.app"} (new-directory app-dir '("Contents" "MacOS" "together-worker.app"))
         feedback: (lambda (action pathname)
                     (build-feedback "; {a} {a}..." action (get-name pathname))))))
    (else)))


;;;
;;;; Deploy
;;;


(definition (deploy descriptor)
  (initialize-aliases)
  ;; appl
  (deploy-application descriptor
                      (new-directory install-dir install-name)
                      make: 'together-all
                      install: 'together))


;;;
;;;; Register
;;;


(register-product 'together
  build: build
  install: install
  deploy: deploy))
