;;;============
;;;  Together
;;;============
;;;
;;;; Together Settings
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.settings jazz


(import (jazz.associative)
        (jazz.associative.client)
        (jazz.component)
        (jazz.debuggee)
        (jazz.io)
        (jazz.platform)
        (jazz.presence.transmission)
        (jazz.settings)
        (jazz.stream)
        (world)
        (world.asset)
        (world.assets)
        (world.audio)
        (world.autoload)
        (world.client)
        (world.context)
        (world.io)
        (world.problem)
        (world.profile)
        (world.settings)
        (world.sound)
        (world.space)
        (world.tier)
        (world.urgency)
        (together)
        (together.exception)
        (together.remote))


;;;
;;;; Arguments
;;;


(definition url-parameters
  (let ((url (string-argument "url" #f)))
    (and url
         (receive (scheme parameters) (parse-url url)
           parameters))))

(definition protected (url-parameter parameter default)
  (if (not url-parameters)
      default
    (let ((pair (assoc parameter url-parameters)))
      (if (not pair)
          default
        (let ((value (cdr pair)))
          (if (not value)
              default
            value))))))


(definition protected auto-create
  (world-setting 'together.auto-create #f))

(definition protected auto-join
  (world-setting 'together.auto-join (url-parameter "join" #f)))

(definition protected auto-enter
  (world-setting 'together.auto-enter (url-parameter "enter" #f)))


;;;
;;;; Welcome
;;;


(definition protected (present-login-problem obj)
  (cond ((is? obj Invalid-Code) "Together needs to be restarted")
        ((string? obj) obj)
        (else "Unable to connect to server")))


(definition protected (open-login-zone)
  (when (current-together)
    (together-exit (current-together)))
  (open-login (find-tier (copy-zone-template "welcome" 'login) 'login)))


(definition protected (open-client-enter remote-file (auto-enter: auto-enter #f) (from-login?: from-login? #f))
  (set-critical-retrieved? #f)
  (let ((obj (open-client remote-file auto-enter: auto-enter)))
    (if (is? obj Zone)
        (begin
          (retrieve-critical)
          (set-critical-retrieved? #t)
          (start-delayed-tasks obj)
          (prepare-skybox obj)
          (enter-together auto-enter))
      (let ((title (present-login-problem obj))
            (zone (if from-login? (current-zone) (open-login-zone))))
        (world.interface.exception:report-exception title obj)
        (check-invalid-key-exception zone title)
        zone))))


(definition protected (enter-together auto-enter)
  @obsoleted?
  (when remote-repository?
    (check-gstreamer-plugins))
  (preload-gstreamer-audio)
  (if (current-together)
      (together-enter (current-together) auto-enter)
    (let ((together (new together.gathering:Together)))
      (set-current-together together)
      (together-enter together auto-enter))))


(definition protected (retrieve-critical)
  (let ((client (current-client)))
    (let ((assets (get-universe-assets client))
          (avatar (get-character-avatar (get-configuration client))))
      (let ((critical (collect (lambda (path)
                                 (and (contains-file? assets path)
                                      (cons (new Asset assets path) (estimate-asset-size path))))
                               (critical-assets avatar))))
        (let ((assets-total (apply + (map cdr critical))))
          (let ((gstreamer-total (retrieve-gstreamer assets-total)))
            (let ((total (+ gstreamer-total assets-total)))
              (retrieve-critical-assets critical gstreamer-total total))))))))


(definition protected (retrieve-gstreamer assets-total)
  (let ((world (current-world)))
    (if (or (not remote-repository?)
            (have-set-locally? 'gstreamer))
        0
      (let ((gstreamer-total #f)
            (total 0)
            (downloaded 0)
            (estimated-size 400))
        (define (feedback stage . rest)
          (case stage
            ((progress)
             (when (not gstreamer-total)
               (set! gstreamer-total (* (car rest) estimated-size))
               (set! total (+ gstreamer-total assets-total)))
             (increase! downloaded estimated-size)
             (working-progress world "Downloading assets" (percentage downloaded total)))))
        
        (working-progress world "Downloading assets" 0.)
        (with-connected-client
          (lambda (client)
            (download-sets client '(gstreamer)))
          feedback: feedback)
        (or gstreamer-total 0)))))


(definition protected (retrieve-critical-assets critical downloaded total)
  (let ((world (current-world)))
    (unless (world-setting 'together.critical-assets? #f)
      (parameterize ((inhibit-working? #t))
        (let ((blocks (new-queue)))
          (for-each (lambda (info)
                      (bind (asset . size) info
                        (enqueue blocks (cons (request-file asset) size))))
                    critical)
          (for-each (lambda (info)
                      (bind (block . size) info
                        (working-progress world "Downloading assets" (percentage downloaded total))
                        (increase! downloaded size)
                        (block)))
                    (queue-list blocks))))
      (working-progress world "Downloading assets" 100.)
      (sleep .1)
      (set-setting options-settings 'together.critical-assets? #t)
      (save-content options-settings))))


(definition plugins-subdir
  (cond-expand
    (mac '("Contents" "Libraries" "gstreamer" "lib" "gstreamer-1.0"))
    (else '("gstreamer" "lib" "gstreamer-1.0"))))

(definition plugins-subpath
  (cond-expand
    (mac "Contents/Libraries/gstreamer/lib/gstreamer-1.0/")
    (else "gstreamer/lib/gstreamer-1.0/")))


(definition check-gstreamer-plugins
  (let ((checked? #f))
    (lambda ()
      (define (check-plugins)
        (define (collect-working dir)
          (let ((queue (new-queue)))
            (iterate-directory dir
              (lambda (path kind)
                (enqueue queue (join path "/")))
              full?: #f
              files?: #t
              directories?: #f
              recursive?: #t)
            (queue-list queue)))
        
        (define (collect-indexed index subpath)
          (let ((queue (new-queue))
                (start (string-length subpath)))
            (iterate-table (get-paths index)
              (lambda (entry-path entry)
                (when (starts-with? entry-path subpath ignore-case?: #t)
                  (enqueue queue (substring entry-path start (string-length entry-path))))))
            (queue-list queue)))
        
        (let ((repo (open-local-repository)))
          (let ((plugins (new-directory (get-working repo) plugins-subdir)))
            (let ((working (collect-working plugins))
                  (indexed (collect-indexed (get-index repo) plugins-subpath)))
              (let ((extraneous (difference working indexed test: filename=?)))
                (when (not-null? extraneous)
                  (snapshot-problem "Found extraneous gstreamer plugins")
                  (for-each (lambda (name)
                              (let ((file (new-file plugins name)))
                                (delete file)))
                            extraneous)))))))
      
      (unless checked?
        (check-plugins)
        (set! checked? #t)))))


(definition protected (verify-gstreamer-plugins)
  (let ((repo (open-local-repository)))
    (let ((diff (working-status repo dirpath: plugins-subpath ignore-set?: #t)))
      (values plugins-subpath diff))))


(definition protected (repair-gstreamer-plugins)
  (let ((repo (open-local-repository)))
    (let ((diff (discard repo dirpath: plugins-subpath ignore-set?: #t)))
      (values plugins-subpath diff))))


(definition protected (verify-together)
  (let ((repo (open-local-repository)))
    (let ((diff (working-status repo ignore-set?: #t)))
      (values #f diff))))


(definition protected (repair-together)
  (let ((repo (open-local-repository)))
    (let ((diff (discard repo ignore-set?: #t)))
      (values #f diff))))


(definition preload-gstreamer-audio
  (let ((preloaded? #f))
    (lambda ()
      (unless preloaded?
        (thread-start!
          (new-thread
            (lambda ()
              (let ((pipeline (gst_parse_launch speakersink)))
                (gst_element_set_state pipeline GST_STATE_READY)
                (gst_element_set_state pipeline GST_STATE_NULL)
                (gst_object_unref pipeline)))
            'preload-audio))
        (set! preloaded? #t)))))


(definition protected (open-login/client-enter (force-welcome?: force-welcome? #f))
  (if (cond-expand (devel (world-setting 'world.test? #f))
                   (else #f))
      (begin
        (load-unit 'world.test)
        (exit))
    (let ((file (user-client-file)))
      (let ((config (and (exists? file) (instantiate (read-form file)))))
        (if (or force-welcome?
                (not (exists? file))
                (and config (not (get-personal-key config)))
                (and config (not (get-character-avatar config)))
                (and config (not (get-character-dye config)))
                (world-setting 'together.login? #f)
                (and remote-repository? (not (have-set-locally? 'gstreamer)))
                (not (world-setting 'together.critical-assets? #f))
                (shift-down?))
            (open-login-zone)
          (open-client-enter file auto-enter: (and auto-enter (if (eq? auto-enter 'start) auto-enter (split auto-enter "/")))))))))


(welcome-zone-open-set! open-login/client-enter)


;;;
;;;; World
;;;


(definition protected (find-world)
  (define (determine-world)
    (let ((worlds (determine-worlds)))
      (and worlds
           (let ((world (new-directory worlds "together")))
             (and (exists? world)
                  world)))))
  
  (define (determine-worlds)
    (and (exists? {Directory Application})
         (let ((dir (up-two-levels {Directory Application})))
           (and dir
                (or (find-worlds dir)
                    (let ((dir (and (not kernel-source-access?) (serving?) (up-two-levels dir))))
                      (and dir
                           (find-worlds dir))))))))
  
  (define (up-two-levels dir)
    (let ((parent (get-parent dir)))
      (and (and parent (exists? parent) (not (meta-root? parent)))
           (let ((parent (get-parent parent)))
             (and (and parent (exists? parent) (not (meta-root? parent)))
                  parent)))))
  
  (define (find-worlds dir)
    (let ((worlds (new-directory dir "worlds")))
      (if (exists? worlds)
          worlds
        (let ((worlds (new-directory dir "Worlds")))
          (if (exists? worlds)
              worlds
            #f)))))
  
  (let ((world (determine-world)))
    (cond ((not world)
           (system-message "Unable to find Together's world"
                           type: 'problem
                           title: "Together")
           (exit 1))
          ((not (exists? world))
           (system-message (format "Unable to find Together's world: {a}" (parse world))
                           type: 'problem
                           title: "Together")
           (exit 1))
          (else
           world))))


(set-world-finder find-world)


;;;
;;;; Skybox
;;;


(definition protected (determine-together-skybox)
  (and (client?)
       (or (world-setting 'together.skybox (get-skybox (active-graphic-profile)))
           (cond ((world-setting 'together.first-use? #t)
                  (set-setting options-settings 'together.first-use? #f)
                  (save-content options-settings)
                  "world/earth")
                 ((unverified?)
                  "world/nebula")
                 (else
                  "world/earth"
                  @wait-all-nice-and-also-part-of-critical-assets
                  (random-element '("world/calm_sea" "world/dark_sea" "world/nebula")))))))


(definition protected together-skybox
  #f)

(definition protected (cache-together-skybox)
  (or together-skybox
      (let ((skybox (determine-together-skybox)))
        (set! together-skybox skybox)
        skybox)))

(definition protected (clear-together-skybox)
  (set! together-skybox #f))


(definition protected together-skybox?
  (and (client?)
       (world-setting 'together.skybox? #t)))


;;;
;;;; Urgency
;;;


(set-urgency-crash-feedback (together-exception-feedback))


;;;
;;;; Exceptions
;;;


(unless (or (using-debugger?) (controlling-terminal?))
  (setup-together-exception-debugger)))
