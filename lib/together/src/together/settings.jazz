;;;============
;;;  Together
;;;============
;;;
;;;; Together Settings
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.settings jazz


(import (jazz.component)
        (jazz.debuggee)
        (jazz.io)
        (jazz.platform)
        (jazz.settings)
        (world)
        (world.asset)
        (world.assets)
        (world.autoload)
        (world.client)
        (world.context)
        (world.io)
        (world.profile)
        (world.settings)
        (world.space)
        (world.tier)
        (together)
        (together.exception))


;;;
;;;; Welcome
;;;


(definition protected (open-login-zone)
  (when (current-together)
    (together-exit (current-together)))
  (open-login (find-tier (copy-zone-template "welcome" 'login) 'login)))


(definition protected (open-client-enter remote-file (auto-enter: auto-enter #f) (from-login?: from-login? #f))
  (let ((obj (open-client remote-file auto-enter: auto-enter)))
    (if (is? obj Zone)
        (begin
          (retrieve-critical-assets)
          (enter-together auto-enter))
      (let ((title (if (string? obj) obj "Unable to connect to server"))
            (zone (if from-login? (current-zone) (open-login-zone))))
        (world.interface.exception:report-exception title obj)
        zone))))


(definition protected (enter-together auto-enter)
  (if (current-together)
      (together-enter (current-together) auto-enter)
    (let ((together (new together.gathering:Together)))
      (set-current-together together)
      (together-enter together auto-enter))))


(definition protected (retrieve-critical-assets)
  (let ((client (current-client)))
    (let ((assets (get-universe-assets client))
          (avatar (get-character-avatar (get-configuration client))))
      (parameterize ((inhibit-working? #t))
        (for-each (lambda (path)
                    (when (contains-file? assets path)
                      (let ((asset (new Asset assets path)))
                        (retrieve-file asset))))
                  (critical-assets avatar)))))
  (when (not (world-setting 'together.critical-assets? #f))
    (set-setting options-settings 'together.critical-assets? #t)
    (save-content options-settings)))


(definition protected (open-login/client-enter (force-welcome?: force-welcome? #f))
  (let ((file (user-client-file)))
    (let ((config (and (exists? file) (instantiate (read-form file)))))
      (if (or force-welcome?
              (not (exists? file))
              (and config (not (get-personal-key config)))
              (and config (not (get-character-avatar config)))
              (world-setting 'together.login? #f)
              (not (world-setting 'together.critical-assets? #f))
              (shift-down?))
          (open-login-zone)
        (let ((auto-join (world-setting 'together.auto-join #f))
              (auto-enter (world-setting 'together.auto-enter #f)))
          (if (and auto-join auto-enter)
              (error "Auto join & enter are mutually exclusive")
            (open-client-enter file auto-enter: (and auto-enter (split auto-enter "/")))))))))


(welcome-zone-open-set! open-login/client-enter)


;;;
;;;; World
;;;


(definition protected (find-world)
  (define (determine-world)
    (let ((worlds (determine-worlds)))
      (and worlds
           (let ((world (new-directory worlds "together")))
             (and (exists? world)
                  world)))))
  
  (define (determine-worlds)
    (and (exists? {Directory Application})
         (let ((parent (get-parent {Directory Application})))
           (and (and parent (exists? parent) (not (meta-root? parent)))
                (let ((parent (get-parent parent)))
                  (and (and parent (exists? parent) (not (meta-root? parent)))
                       (let ((worlds (new-directory parent "worlds")))
                         (if (exists? worlds)
                             worlds
                           (let ((worlds (new-directory parent "Worlds")))
                             (if (exists? worlds)
                                 worlds
                               #f))))))))))
  
  (let ((world (determine-world)))
    (cond ((not world)
           (system-message "Unable to find Together's world"
                           type: 'problem
                           title: "Together")
           (exit 1))
          ((not (exists? world))
           (system-message (format "Unable to find Together's world: {a}" (parse world))
                           type: 'problem
                           title: "Together")
           (exit 1))
          (else
           world))))


(set-world-finder find-world)


;;;
;;;; Skybox
;;;


(definition protected together-skybox
  (or (world-setting 'together.skybox (get-skybox (active-graphic-profile)))
      (if (world-setting 'together.first-use? #t)
          (begin
            (set-setting options-settings 'together.first-use? #f)
            (save-content options-settings)
            "world/nebula")
        (random-element '("world/calm_sea" "world/dark_sea" "world/nebula")))))


;;;
;;;; Exceptions
;;;


(unless (or (using-debugger?) (controlling-terminal?))
  (setup-together-exception-debugger)))
