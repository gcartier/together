;;;============
;;;  Together
;;;============
;;;
;;;; Together Settings
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.settings jazz


(import (jazz.associative)
        (jazz.associative.client)
        (jazz.component)
        (jazz.debuggee)
        (jazz.io)
        (jazz.platform)
        (jazz.settings)
        (jazz.stream)
        (world)
        (world.asset)
        (world.assets)
        (world.audio)
        (world.autoload)
        (world.client)
        (world.context)
        (world.io)
        (world.profile)
        (world.settings)
        (world.sound)
        (world.space)
        (world.tier)
        (together)
        (together.exception)
        (together.remote))


;;;
;;;; Welcome
;;;


(definition protected (open-login-zone)
  (when (current-together)
    (together-exit (current-together)))
  (open-login (find-tier (copy-zone-template "welcome" 'login) 'login)))


(definition protected (open-client-enter remote-file (auto-enter: auto-enter #f) (from-login?: from-login? #f))
  (let ((obj (open-client remote-file auto-enter: auto-enter)))
    (if (is? obj Zone)
        (begin
          (retrieve-gstreamer)
          (retrieve-critical-assets)
          (enter-together auto-enter))
      (let ((title (if (string? obj) obj "Unable to connect to server"))
            (zone (if from-login? (current-zone) (open-login-zone))))
        (world.interface.exception:report-exception title obj)
        (check-invalid-key-exception zone title)
        zone))))


(definition protected (enter-together auto-enter)
  (preload-gstreamer-audio)
  (if (current-together)
      (together-enter (current-together) auto-enter)
    (let ((together (new together.gathering:Together)))
      (set-current-together together)
      (together-enter together auto-enter))))


(definition protected (retrieve-gstreamer)
  (let ((world (current-world)))
    (when remote-repository?
      (when (and remote-repository? (not (have-set-locally? 'gstreamer)))
        (working-progress world "Downloading gstreamer" #f)
        (with-connected-client
          (lambda (client)
            (download-sets client '(gstreamer))))))))


(definition protected (retrieve-critical-assets)
  (let ((client (current-client))
        (world (current-world)))
    (let ((assets (get-universe-assets client))
          (avatar (get-character-avatar (get-configuration client))))
      (parameterize ((inhibit-working? #t))
        (let ((critical (collect (lambda (path)
                                   (and (contains-file? assets path)
                                        (cons (new Asset assets path) (estimate-asset-size path))))
                                 (critical-assets avatar))))
          (let ((blocks (new-queue))
                (count (length critical))
                (total (apply + (map cdr critical))))
            (for-each (lambda (info)
                        (bind (asset . size) info
                          (enqueue blocks (cons (request-file asset) size))))
                      critical)
            (let ((downloaded 0))
              (for-each (lambda (info n)
                          (bind (block . size) info
                            (working-progress world "Downloading assets" (percentage downloaded total))
                            (increase! downloaded size)
                            (block)))
                        (queue-list blocks)
                        (naturals 0 count))))))))
  (when (not (world-setting 'together.critical-assets? #f))
    (set-setting options-settings 'together.critical-assets? #t)
    (save-content options-settings)))


(definition preload-gstreamer-audio
  (let ((preloaded? #f))
    (lambda ()
      (unless preloaded?
        (thread-start!
          (new-thread
            (lambda ()
              (let ((pipeline (gst_parse_launch speakersink)))
                (gst_element_set_state pipeline GST_STATE_READY)
                (gst_element_set_state pipeline GST_STATE_NULL)
                (gst_object_unref pipeline)))
            'preload-audio))
        (set! preloaded? #t)))))


(definition protected (open-login/client-enter (force-welcome?: force-welcome? #f))
  (if (cond-expand (devel (world-setting 'world.test? #f))
                   (else #f))
      (begin
        (load-unit 'world.test)
        (exit))
    (let ((file (user-client-file)))
      (let ((config (and (exists? file) (instantiate (read-form file)))))
        (if (or force-welcome?
                (not (exists? file))
                (and config (not (get-personal-key config)))
                (and config (not (get-character-avatar config)))
                (and config (not (get-character-dye config)))
                (world-setting 'together.login? #f)
                (and remote-repository? (not (have-set-locally? 'gstreamer)))
                (not (world-setting 'together.critical-assets? #f))
                (shift-down?))
            (open-login-zone)
          (let ((auto-enter (world-setting 'together.auto-enter #f)))
            (open-client-enter file auto-enter: (and auto-enter (if (eq? auto-enter 'start) auto-enter (split auto-enter "/"))))))))))


(welcome-zone-open-set! open-login/client-enter)


;;;
;;;; World
;;;


(definition protected (find-world)
  (define (determine-world)
    (let ((worlds (determine-worlds)))
      (and worlds
           (let ((world (new-directory worlds "together")))
             (and (exists? world)
                  world)))))
  
  (define (determine-worlds)
    (and (exists? {Directory Application})
         (let ((dir (up-two-levels {Directory Application})))
           (and dir
                (or (find-worlds dir)
                    (let ((dir (and (not kernel-source-access?) (serving?) (up-two-levels dir))))
                      (and dir
                           (find-worlds dir))))))))
  
  (define (up-two-levels dir)
    (let ((parent (get-parent dir)))
      (and (and parent (exists? parent) (not (meta-root? parent)))
           (let ((parent (get-parent parent)))
             (and (and parent (exists? parent) (not (meta-root? parent)))
                  parent)))))
  
  (define (find-worlds dir)
    (let ((worlds (new-directory dir "worlds")))
      (if (exists? worlds)
          worlds
        (let ((worlds (new-directory dir "Worlds")))
          (if (exists? worlds)
              worlds
            #f)))))
  
  (let ((world (determine-world)))
    (cond ((not world)
           (system-message "Unable to find Together's world"
                           type: 'problem
                           title: "Together")
           (exit 1))
          ((not (exists? world))
           (system-message (format "Unable to find Together's world: {a}" (parse world))
                           type: 'problem
                           title: "Together")
           (exit 1))
          (else
           world))))


(set-world-finder find-world)


;;;
;;;; Skybox
;;;


(definition protected (determine-together-skybox)
  (and (client?)
       (or (world-setting 'together.skybox (get-skybox (active-graphic-profile)))
           (cond ((world-setting 'together.first-use? #t)
                  (set-setting options-settings 'together.first-use? #f)
                  (save-content options-settings)
                  "world/earth")
                 ((unverified?)
                  "world/nebula")
                 (else
                  (random-element '("world/calm_sea" "world/dark_sea" "world/nebula")))))))


(definition protected together-skybox
  #f)

(definition protected (cache-together-skybox)
  (or together-skybox
      (let ((skybox (determine-together-skybox)))
        (set! together-skybox skybox)
        skybox)))

(definition protected (clear-together-skybox)
  (set! together-skybox #f))


(definition protected together-skybox?
  (and (client?)
       (world-setting 'together.skybox? #t)))


;;;
;;;; Exceptions
;;;


(unless (or (using-debugger?) (controlling-terminal?))
  (setup-together-exception-debugger)))
