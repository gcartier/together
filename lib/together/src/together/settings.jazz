;;;============
;;;  Together
;;;============
;;;
;;;; Together Settings
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.settings jazz


(import (jazz.appl)
        (jazz.associative)
        (jazz.associative.client)
        (jazz.component)
        (jazz.debuggee)
        (jazz.io)
        (jazz.platform)
        (jazz.presence.transmission)
        (jazz.settings)
        (jazz.stream)
        (world)
        (world.asset)
        (world.audio)
        (world.autoload)
        (world.client)
        (world.context)
        (world.io)
        (world.problem)
        (world.profile)
        (world.settings)
        (world.sound)
        (world.space)
        (world.tier)
        (world.urgency)
        (together)
        (together.autoload)
        (together.exception)
        (together.remote))


;;;
;;;; Arguments
;;;


(definition url-parameters
  (let ((url (or (launch-url) (string-argument "url" #f))))
    (and url
         (receive (scheme parameters) (parse-url url)
           parameters))))

(definition protected (url-parameter parameter default)
  (if (not url-parameters)
      default
    (let ((pair (assoc parameter url-parameters)))
      (if (not pair)
          default
        (let ((value (cdr pair)))
          (if (not value)
              default
            value))))))


(definition protected auto-create
  (world-setting 'together.auto-create #f))

(definition protected auto-join
  (world-setting 'together.auto-join (url-parameter "join" #f)))

(definition protected auto-enter
  (world-setting 'together.auto-enter (url-parameter "enter" #f)))


;;;
;;;; Welcome
;;;


(definition protected (present-login-problem obj)
  (cond ((is? obj Invalid-Code) "Together needs to be restarted")
        ((string? obj) obj)
        (else "Unable to connect to server")))


(definition protected (open-login-zone)
  (when (current-together)
    (together-exit (current-together)))
  (open-login (find-tier (copy-zone-template "welcome" 'login) 'login)))


(definition protected (open-client-enter remote-file (auto-enter: auto-enter #f) (from-login?: from-login? #f))
  (let ((obj (open-client remote-file auto-enter: auto-enter)))
    (if (is? obj Zone)
        (begin
          (retrieve-critical)
          (prepare-skybox obj)
          (enter-together auto-enter))
      (let ((title (present-login-problem obj))
            (zone (if from-login? (current-zone) (open-login-zone))))
        (world.interface.exception:report-exception title obj)
        (together.login:check-invalid-key-exception zone title)
        zone))))


(definition protected (enter-together auto-enter)
  (preload-gstreamer-audio)
  (if (current-together)
      (together-enter (current-together) auto-enter)
    (let ((together (new together.gathering:Together)))
      (set-current-together together)
      (together-enter together auto-enter))))


(definition protected (retrieve-critical)
  (let ((client (current-client)))
    (let ((assets (get-universe-assets client))
          (avatar (get-character-avatar (get-configuration client))))
      (let ((critical (collect (lambda (path)
                                 (and (contains-file? assets path)
                                      (cons (new Asset assets path) (estimate-asset-size path))))
                               (critical-assets avatar))))
        (let ((assets-total (apply + (map cdr critical))))
          (retrieve-critical-assets critical 0 assets-total))))))


(definition protected (retrieve-critical-assets critical downloaded total)
  (let ((world (current-world)))
    (unless (world-setting 'together.critical-assets? #f)
      (let ((blocks (new-queue)))
        (for-each (lambda (info)
                    (bind (asset . size) info
                      (let ((block/file (request-file asset)))
                        (when (procedure? block/file)
                          (enqueue blocks (cons block/file size))))))
                  critical)
        (for-each (lambda (info)
                    (bind (block . size) info
                      (working-progress world "Downloading assets" (percentage downloaded total))
                      (increase! downloaded size)
                      (block)))
                  (queue-list blocks)))
      (working-progress world "Downloading assets" 100.)
      (sleep .1)
      (set-setting options-settings 'together.critical-assets? #t)
      (save-content options-settings))))


(definition gstreamer-subpath
  (cond-expand
    (mac "Contents/Libraries/gstreamer/")
    (else "gstreamer/")))

(definition plugins-subpath
  (string-append gstreamer-subpath "lib/gstreamer-1.0/"))


(definition protected (verify-gstreamer-plugins)
  (let ((repo (open-local-repository)))
    (let ((diff (working-status repo dirpath: plugins-subpath ignore-set?: #t)))
      (values plugins-subpath diff))))


(definition protected (repair-gstreamer-plugins)
  (let ((repo (open-local-repository)))
    (let ((diff (discard repo dirpath: plugins-subpath ignore-set?: #t)))
      (values plugins-subpath diff))))


(definition protected (verify-gstreamer)
  (let ((repo (open-local-repository)))
    (let ((diff (working-status repo dirpath: gstreamer-subpath ignore-set?: #t)))
      (values gstreamer-subpath diff))))


(definition protected (repair-gstreamer)
  (let ((repo (open-local-repository)))
    (let ((diff (discard repo dirpath: gstreamer-subpath ignore-set?: #t)))
      (values gstreamer-subpath diff))))


(definition protected (verify-together)
  (let ((repo (open-local-repository)))
    (let ((diff (working-status repo ignore-set?: #t)))
      (values #f diff))))


(definition protected (repair-together)
  (let ((repo (open-local-repository)))
    (let ((diff (discard repo ignore-set?: #t)))
      (values #f diff))))


(definition preload-gstreamer-audio
  (let ((preloaded? #f))
    (lambda ()
      (unless preloaded?
        (thread-start!
          (new-thread
            (lambda ()
              (let ((pipeline (gst_parse_launch speakersink)))
                (gst_element_set_state pipeline GST_STATE_READY)
                (gst_element_set_state pipeline GST_STATE_NULL)
                (gst_object_unref pipeline)))
            'preload-audio))
        (set! preloaded? #t)))))


(definition protected (open-login/client-enter (force-welcome?: force-welcome? #f))
  (if (cond-expand (devel (world-setting 'world.test? #f))
                   (else #f))
      (begin
        (load-unit 'world.test)
        (exit))
    (let ((file (user-client-file)))
      (let ((config (and (exists? file) (instantiate (read-form file)))))
        (if (or force-welcome?
                (not (exists? file))
                (and config (not (get-personal-key config)))
                (and config (not (get-character-avatar config)))
                (and config (not (get-character-dye config)))
                (world-setting 'together.login? #f)
                (not (world-setting 'together.critical-assets? #f))
                (shift-down?))
            (open-login-zone)
          (open-client-enter file auto-enter: (and auto-enter (if (eq? auto-enter 'start) auto-enter (split auto-enter "/")))))))))


(welcome-zone-open-set! open-login/client-enter)


;;;
;;;; World
;;;


(definition protected (find-world)
  (define (determine-world)
    (if (and (client?) remote-repository?)
        (let ((dir (cond-expand
                     (mac "Contents/Worlds")
                     (else "worlds")))
              (dirname "together"))
          (new Directory (tokenise-filename (string-append kernel-root dir "/" dirname))))
      (let ((worlds (determine-worlds)))
        (and worlds
             (let ((world (new-directory worlds "together")))
               (and (exists? world)
                    world))))))
  
  (define (determine-worlds)
    (and (exists? {Directory Application})
         (let ((dir (up-two-levels {Directory Application})))
           (and dir
                (or (find-worlds dir)
                    (let ((dir (and (not kernel-source-access?) (serving?) (up-two-levels dir))))
                      (and dir
                           (find-worlds dir))))))))
  
  (define (up-two-levels dir)
    (let ((parent (get-parent dir)))
      (and (and parent (exists? parent) (not (meta-root? parent)))
           (let ((parent (get-parent parent)))
             (and (and parent (exists? parent) (not (meta-root? parent)))
                  parent)))))
  
  (define (find-worlds dir)
    (let ((worlds (new-directory dir "worlds")))
      (if (exists? worlds)
          worlds
        (let ((worlds (new-directory dir "Worlds")))
          (if (exists? worlds)
              worlds
            #f)))))
  
  (let ((world (determine-world)))
    (cond ((not world)
           (system-message "Unable to find Together's world"
                           type: 'problem
                           title: "Together")
           (exit 1))
          ((not (exists? world))
           (system-message (format "Unable to find Together's world: {a}" (parse world))
                           type: 'problem
                           title: "Together")
           (exit 1))
          (else
           world))))


(definition found-world
  (find-world))


(set-world-finder
  (lambda ()
    found-world))


;;;
;;;; Restricted
;;;


(when (client?)
  (filesystem-authorize-terminal)
  
  (filesystem-authorize (parse (jas-settings)))
  (filesystem-authorize (parse {Directory Settings}))
  (filesystem-authorize (parse {Directory Documents}))
  
  (when kernel-source-root
    (filesystem-authorize kernel-source-root))
  
  (filesystem-authorize kernel-root)
  
  (let ((repository (build-repository-get)))
    (when repository
      (filesystem-authorize (repository-directory repository))))
  
  (filesystem-authorize (parse found-world))
  
  (let ((authorized (world-setting 'together.authorized #f)))
    (when authorized
      (for-each (lambda (dir)
                  (filesystem-authorize (parse dir)))
                authorized)))
  
  (filesystem-restrictable)
  
  (when (get-controller-debugger)
    (filesystem-restrict)))


;;;
;;;; Skybox
;;;


(definition protected (determine-together-skybox)
  (and (client?)
       (or (world-setting 'together.skybox (get-skybox (active-graphic-profile)))
           (cond ((world-setting 'together.first-use? #t)
                  (set-setting options-settings 'together.first-use? #f)
                  (save-content options-settings)
                  "world/earth")
                 ((unverified?)
                  "world/nebula")
                 (else
                  "world/earth"
                  @wait-all-nice-and-also-part-of-critical-assets
                  (random-element '("world/calm_sea" "world/dark_sea" "world/nebula")))))))


(definition protected together-skybox
  #f)

(definition protected (cache-together-skybox)
  (or together-skybox
      (let ((skybox (determine-together-skybox)))
        (set! together-skybox skybox)
        skybox)))

(definition protected (clear-together-skybox)
  (set! together-skybox #f))


(definition protected together-skybox?
  (and (client?)
       (world-setting 'together.skybox? #t)))


;;;
;;;; Urgency
;;;


(set-urgency-crash-feedback (together-exception-feedback))


;;;
;;;; Exceptions
;;;


(unless (or (using-debugger?) (controlling-terminal?))
  (setup-together-exception-debugger)))
