;;;============
;;;  Together
;;;============
;;;
;;;; Together Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.zone jazz


(import (jazz.component)
        (jazz.event)
        (jazz.figure)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.process)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (gaea.geometry)
        (world)
        (world.audio)
        (world.autoload)
        (world.client.tier)
        (world.context)
        (world.interface)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.text)
        (world.interface.templates)
        (world.io)
        (world.music)
        (world.settings)
        (world.skybox)
        (world.space)
        (world.task)
        (world.video)
        (world.window)
        (together.settings))


;;;
;;;; Together-Root
;;;


(class Together-Root extends Layout-View
  
  
  (method override (get-transparent? self)
    #t))


;;;
;;;; Kind-Label
;;;


(class Kind-Label extends Label-View
  
  
  (method override (text-color self)
    (or color {Color World-Ochre})))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


;;;
;;;; Name-View
;;;


(class Name-View extends Border-View
  
  
  (property action-view  initialize #f accessors generate)
  (property invalid-view initialize #f accessors generate)
  (property option-view  initialize #f accessors generate)
  (property name-label   initialize #f accessors generate)
  (property max-length   initialize #f accessors generate)
  
  
  (form
    (<install>                    size: {Dimension 250 24} border-type: edge style: entry @border-type: solid @border-color: {Color Medium-Gray}
      (<Scroller-View>            hscroll?: #f vscroll?: #f
        (<content~>               layout-type: fill
          (<Name-Text> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method (on-content-change self evt)
    (content-changed self))
  
  
  (method (content-changed self)
    (let ((space (current-space)))
      (let ((invalid (name-invalid self)))
        (set-enabled? (brother self action-view) (not invalid))
        (set-title (brother self invalid-view) (or invalid ""))
        (when option-view
          (set-visible? (brother self option-view) (not invalid))))))
  
  
  (method package (name-invalid self)
    (let ((text (locate self 'text)))
      (let ((name (trim-whitespace (get-string-content text))))
        (cond ((empty-string? name)
               "")
              ((some? control-character? name)
               (format "{a} cannot contain control characters" name-label))
              ((> (string-length name) max-length)
               (format "{a} cannot be longer than {a} characters" name-label max-length))
              (else
               #f)))))
  
  
  (method (on-return self evt)
    (let ((space (current-space)))
      (let ((action-view (brother self action-view)))
        (when (get-enabled? action-view)
          (process-action action-view self))))))


;;;
;;;; Name-Text
;;;


(class Name-Text extends World-Text-View
  
  
  (method override (new-model self)
    (new Text-Model default-style: {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin}} left-padding: 12))
  
  
  (method override (handle-escape? self)
    #t)
  
  
  (method override (paste-clipboard-string self string)
    (let ((lines (split-lines string)))
      (let ((line (join (remove "" lines test: equal?) " ")))
        (replace-selection self (list line))))))


;;;
;;;; Name-Invalid
;;;


(class Name-Invalid extends Label-View
  
  
  (form
    (<install> justification: center))
  
  
  (method override (text-color self)
    {Color World-Red}))


;;;
;;;; Vista
;;;


(definition vista-tick
  #f)

(definition vista-angle
  2.0)


(definition package (install-vista)
  (let ((window (current-window))
        (zone (current-zone)))
    (unless vista-tick
      (let ((target (or circle-vista (get-vista-target zone) (vertex 0. 5. 0.)))
            (radius (if circle-vista 14. (or (get-vista-radius zone) 75.)))
            (elevation (if circle-vista 5. (or (get-vista-elevation zone) 20.))))
        (let ((tick (path-vista target radius elevation)))
          (set! vista-tick tick)
          (register-tick zone vista-tick)
          ;; removes tearing in the pathing
          (maybe-enable-vsync window)
          (tick 0.))))))


(definition package (uninstall-vista (zone #f))
  (let ((window (current-window))
        (zone (or zone (current-zone))))
    (when vista-tick
      (unregister-tick zone vista-tick)
      (maybe-disable-vsync window)
      (set! vista-tick #f))))


(definition package (reinstall-vista)
  (when (vista-active?)
    (uninstall-vista)
    (install-vista)))


(definition package (vista-active?)
  vista-tick)


(definition package (toggle-vista)
  (if vista-tick
      (uninstall-vista)
    (install-vista)))


(definition package (path-vista target radius elevation)
  (lambda (elapse)
    (let ((world (current-world)))
      (unless sleeping?
        (increase! vista-angle (/ elapse 10.))
        (let ((angle vista-angle))
          (let ((x (cos angle))
                (z (sin angle)))
            (let ((flat (vertex+ target (vertex-scalar*& (vertex x 0. z) radius))))
              (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
                (let ((dir (vertex-normalize (vertex-& target pos)))
                      (dir-flat (vertex-normalize (vertex-& target flat))))
                  (let ((vert-angle (vector-angle dir dir-flat)))
                    (let ((sight dir-flat)
                          (eye (get-eye world))
                          (up (get-world-up world)))
                      (let ((right (cross-product sight up)))
                        (let ((lookat (lookat sight up right)))
                          (free-motion world feedback?: #f)
                          (set-lookat eye (rotate-lookat-vertical& lookat (- vert-angle)))
                          (set-position eye pos)
                          (derive-target eye)
                          (camera-update eye)))))))))))))))
