;;;============
;;;  Together
;;;============
;;;
;;;; Together Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.zone jazz


(import (jazz.component)
        (jazz.event)
        (jazz.figure)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.process)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (gaea.geometry)
        (world)
        (world.audio)
        (world.autoload)
        (world.client.tier)
        (world.context)
        (world.interface)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.text)
        (world.interface.templates)
        (world.io)
        (world.music)
        (world.settings)
        (world.skybox)
        (world.space)
        (world.task)
        (world.video)
        (world.window)
        (together.settings)
        (together.zoom))


;;;
;;;; Together-Root
;;;


(class Together-Root extends Layout-View
  
  
  (property stops initialize #f accessors generate)
  
  
  (method override (get-transparent? self)
    #t)
  
  
  (method override (get-tab-stops self)
    stops))


;;;
;;;; Kind-Label
;;;


(class Kind-Label extends Label-View
  
  
  (method override (text-color self)
    (or color {Color World-Ochre})))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


;;;
;;;; Name-View
;;;


(class Name-View extends Border-View
  
  
  (property action-view  initialize #f accessors generate)
  (property invalid-view initialize #f accessors generate)
  (property brother-view initialize #f accessors generate)
  (property option-view  initialize #f accessors generate)
  (property name-label   initialize #f accessors generate)
  (property max-length   initialize #f accessors generate)
  
  
  (form
    (<install>                    size: {Dimension 250 24} border-type: edge style: entry
      (<Scroller-View>            hscroll?: #f vscroll?: #f
        (<content~>               layout-type: fill
          (<Name-Text> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method (on-content-change self evt)
    (content-changed self))
  
  
  (method (content-changed self)
    (let ((space (current-space)))
      (let ((invalid (name-invalid self)))
        (let ((action-invalid (or invalid (and brother-view (name-invalid (brother self brother-view))))))
          (when action-view
            (set-enabled? (brother self action-view) (not action-invalid)))
          (when invalid-view
            (set-title (brother self invalid-view) (or invalid "")))
          (when option-view
            (set-visible? (brother self option-view) (not action-invalid)))))))
  
  
  (method protected virtual (name-invalid self)
    (let ((text (locate self 'text)))
      (let ((name (trim-whitespace (get-string-content text))))
        (cond ((empty-string? name)
               "")
              ((some? control-character? name)
               (format "{a} cannot contain control characters" name-label))
              ((> (string-length name) max-length)
               (format "{a} cannot be longer than {a} characters" name-label max-length))
              (else
               #f)))))
  
  
  (method (on-return self evt)
    (let ((space (current-space)))
      (let ((action-view (brother self action-view)))
        (when (get-enabled? action-view)
          (process-action action-view self))))))


;;;
;;;; Name-Text
;;;


(class Name-Text extends World-Text-View
  
  
  (method override (new-model self)
    (new Text-Model default-style: {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin}} left-padding: 12))
  
  
  (method override (handle-escape? self)
    #t)
  
  
  (method override (paste-clipboard-string self string)
    (let ((lines (split-lines string)))
      (let ((line (join (remove "" lines test: equal?) " ")))
        (replace-selection self (list line))))))


;;;
;;;; Name-Invalid
;;;


(class Name-Invalid extends Label-View
  
  
  (form
    (<install> justification: center))
  
  
  (method override (text-color self)
    {Color World-Red}))


;;;
;;;; Description-View
;;;


(class Description-View extends Scroller-View
  
  
  (form
    (<install>                                  style: 'document hscroll?: #f vscroll?: #f
      (<content~>                               layout-type: fill
        (<World-Formatted-Text-View> name: text background: #f selectable?: #f editable?: #f))))
  
  
  (method protected (set-text self text)
    (let ((text-view (locate self 'text)))
      (let ((text-model (get-model text-view)))
        (set-text text-model text)
        (let ((size (scrollee-content-size text-view))
              (max-width 505))
          (cond ((< (get-width size) max-width)
                 (set-size self (scrollee-content-size text-view))
                 (set-wrap? text-model #t)
                 (wrap-content text-model '())
                 (set-wrap? text-model #f)
                 (set-size self (scrollee-content-size text-view)))
                (else
                 (set-size self (new Dimension max-width 10))
                 (set-wrap? text-model #t)
                 (wrap-content text-model '())
                 (set-wrap? text-model #f)
                 (set-size self (new Dimension 505 (get-height text-view))))))))))


;;;
;;;; Description-Edit
;;;


(class Description-Edit extends Border-View
  
  
  (form
    (<install>                           size: {Dimension 250 24} border-type: edge style: entry
      (<Scroller-View>                   hscroll?: #f vscroll?: #f
        (<content~>                      layout-type: fill
          (<Description-Text> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f))))))


;;;
;;;; Description-Text
;;;


(class Description-Text extends World-Text-View
  
  
  (method override (new-model self)
    (new Text-Model default-style: {Text-Style Text-Base font: {Font Description-Edit}} left-padding: 12))
  
  
  (method override (handle-escape? self)
    #t)
  
  
  (method override (paste-clipboard-string self string)
    (let ((lines (split-lines string)))
      (let ((line (join (remove "" lines test: equal?) " ")))
        (replace-selection self (list line))))))


;;;
;;;; Link-View
;;;


(class Link-View extends Name-View
  
  
  (method override (name-invalid self)
    (let ((text (locate self 'text)))
      (let ((link (trim-whitespace (get-string-content text))))
        (cond ((empty-string? link)
               #f)
              (else
               (catch (Invalid-Link exc
                        (exception-reason exc))
                 (parse-link link)
                 #f)))))))


;;;
;;;; Vista
;;;


(definition vista-tick
  #f)

(definition vista-angle
  2.0)


(definition package (install-vista)
  (let ((window (current-window))
        (zone (current-zone))
        (space (current-space))
        (me (current-me)))
    (define (vista)
      (if (vista-target? space)
          (values (or (effective-vista-target zone) (get-position me))
                  (or (get-vista-radius zone) 75.)
                  (or (get-vista-elevation zone) 20.))
        (values (vertex 0. 4. 0.)
                50.
                12.)))
    
    (unless vista-tick
      (receive (target radius elevation) (vista)
        (let ((tick (path-vista target radius elevation)))
          (set! vista-tick tick)
          (register-tick zone vista-tick)
          ;; removes tearing in the pathing
          (maybe-enable-vsync window)
          (tick 0.))))))


(definition package (uninstall-vista (zone #f))
  (let ((window (current-window))
        (zone (or zone (current-zone))))
    (when vista-tick
      (unregister-tick zone vista-tick)
      (maybe-disable-vsync window)
      (set! vista-tick #f))))


(definition package (reinstall-vista)
  (when (vista-active?)
    (uninstall-vista)
    (install-vista)))


(definition package (vista-active?)
  vista-tick)


(definition package (path-vista target radius elevation)
  (lambda (elapse)
    (let ((world (current-world)))
      (unless sleeping?
        (increase! vista-angle (/ elapse 20.))
        (let ((angle vista-angle))
          (let ((x (cos angle))
                (z (sin angle)))
            (let ((flat (vertex+ target (vertex-scalar*& (vertex x 0. z) radius))))
              (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
                (let ((dir (vertex-normalize (vertex-& target pos)))
                      (dir-flat (vertex-normalize (vertex-& target flat))))
                  (let ((vert-angle (vector-angle dir dir-flat)))
                    (let ((sight dir-flat)
                          (eye (get-eye world))
                          (up (get-world-up world)))
                      (let ((right (cross-product sight up)))
                        (let ((lookat (lookat sight up right)))
                          (vista-motion world target)
                          (set-lookat eye (rotate-lookat-vertical& lookat (- vert-angle)))
                          (set-position eye pos)
                          (derive-target eye)
                          (camera-update eye)))))))))))))))
