;;;============
;;;  Together
;;;============
;;;
;;;; Together Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.zone jazz


(import (jazz.component)
        (jazz.event)
        (jazz.figure)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.process)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.audio)
        (world.autoload)
        (world.context)
        (world.geometry)
        (world.interface.clients)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.servers)
        (world.interface.text)
        (world.interface.templates)
        (world.interface.tiers)
        (world.io)
        (world.music)
        (world.settings)
        (world.skybox)
        (world.task)
        (world.video)
        (world.window))


(definition protected stage
  #f)


(class Together-Zone extends Zone
  
  
  (slot preserved-music    initialize #f getter generate)
  (slot preserved-ambience initialize #f getter generate)
  (slot post-accept        initialize #f accessors generate)
  
  
  (form
    (<install> sun-cycle?: #f draw-grid?: #f))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (when (window?)
      (let ((window (current-window))
            (world (current-world)))
        (setup-stage self)
        (install-stage self)
        (set-draw-me? self #f)
        ;; remove tearing in the camera pathing
        (enable-vsync window))))
  
  
  (method override (destroy self)
    (when (window?)
      (let ((window (current-window))
            (world (current-world)))
        (uninstall-stage self)
        (no-showcase world)
        (set-draw-me? self #t)
        (uninstall-camera)
        (disable-vsync window)))
    (nextmethod self))
  
  
  (method (setup-stage self)
    (set! stage (cond ((memq? stage '(#f welcome new-circle)) 'welcome)
                      ((memq? stage '(remote customize)) 'remote)
                      ((memq? stage '(server new-server)) 'server))))
  
  
  (method override (setup-camera self)
    (nextmethod self)
    (when (window?)
      (install-camera)))
  
  
  (method override (show-belt? self)
    #f)
  
  
  (method override (show-compass? self)
    #f)
  
  
  (method override (show-combat? self)
    #f)
  
  
  (method override (show-chat? self)
    #f)
  
  
  (method (install-stage self)
    (let ((interface (current-interface))
          (world (current-world)))
      (for-each (lambda (child)
                  (set-visible? child #f))
                (get-children interface)))
    (case stage
      ((welcome)
       (install-welcome self))
      ((new-circle)
       (install-new-circle self))
      ((circle)
       (install-circle self))))
  
  
  (method (install-welcome self)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version (current-process)))
            (release (process-release (current-process))))
        (new Label-View name: 'welcome parent: interface title: tier-title location: '(40 30) size: {Dimension 400 80} font: {Font font-name: tahoma point-size: 60 shadow: thin})
@w        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present version)) location: '(10 -250) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
@w        (new Version-Label name: 'release parent: interface title: release location: '(10 -230) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(10 -200) action-handler: (~ on-quit self))
        (new Push-Button name: 'toggle-chat parent: interface title: "Chat" location: '(150 -200) action-handler: (~ on-chat self))
        (new Kind-Label name: 'kind parent: interface title: "Circles" location: '(center -130) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
@w        (new Push-Button name: 'open parent: interface title: "Join" location: '(center -140) size: {Dimension 130 22} action-handler: (~ on-join self))
        (new Push-Button name: 'new parent: interface title: "Create" location: '(-10 -140) action-handler: (~ on-new-circle self))
@w        (new Push-Button name: 'rename parent: interface title: "Edit" location: '(-10 -140) action-handler: (~ on-edit self))
        (new Circles-Panel name: 'circles parent: interface location: '(10 -10) proportion: '((bounds -20) 120) layout-type: 'border)
        (new Kind-Label name: 'foo parent: interface title: "People" location: '(-1 10) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (new People-Panel name: 'people parent: interface location: '(-10 50) proportion: '(180 (bounds -260)) layout-type: 'border)
@w        (new Kind-Label name: 'kind parent: interface title: "Chat" location: '(center (center -250)) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 16 shadow: thin} justification: 'center)
        (let ((chat (child interface 'chat)))
          (set-border-type (child chat 'border) 'solid)
          (set-border-color (child chat 'border) {Color Dark-Gray})
          (set-location chat '(center (center -30)))
          (set-proportion chat '(640 360)))
        (add-exception-view self)
        (layout-view interface)
        (no-showcase world)
        @w
        (delay-event
          (lambda ()
            (acquire-focus (tiers-tree self)))))))
  
  
  (method (install-new-circle self)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Label-View name: 'welcome parent: interface title: tier-title location: '(40 30) size: {Dimension 400 80} font: {Font font-name: tahoma point-size: 60 shadow: thin})
      ;(new Templates-Panel name: 'templates parent: interface size: {Dimension 266 488} location: '(-40 center) layout-type: 'border)
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: (~ on-back self))
      (new Push-Button name: 'create parent: interface title: "Enter" location: '(-40 -40) action-handler: (~ on-create-circle self))
      (set-create (locate (child interface 'templates) 'templates) (~ circle-create self))
      (add-exception-view self)
      (layout-view interface)
      (goto-showcase world 'avatars)
      (templates-update self)
      @w
      (delay-event
        (lambda ()
          (acquire-focus (templates-tree self))))))
  
  
  (method (install-circle self)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Push-Button name: 'leave parent: interface title: "Leave" location: '(40 -40) action-handler: (~ on-leave self))
      (new Push-Button name: 'audio parent: interface title: "Toggle Audio" location: '(240 -40) size: {Dimension 150 22} action-handler: (~ on-audio self))
      (new Push-Button name: 'video parent: interface title: "Toggle Video" location: '(400 -40) size: {Dimension 150 22} action-handler: (~ on-video self))
      (add-exception-view self)
      (layout-view interface)
      (no-showcase world)))
  
  
  (method (uninstall-stage self)
    (let ((interface (current-interface))
          (world (current-world)))
      (setup-interface world)))
  
  
  (method (add-exception-view self)
    (let ((interface (current-interface)))
      (new Exception-Label name: 'exception parent: interface title: "" location: '(center 67) size: {Dimension 600 40} font: {Font font-name: tahoma point-size: 28 shadow: thin} justification: 'center)))
  
  
  (method (find-exception-view self)
    (let ((interface (current-interface)))
      (child interface 'exception)))
  
  
  (method package (report-exception self title exc)
    (let ((view (find-exception-view self)))
      (set-title view title)
      (set-exception view exc)))
  
  
  (method (clear-exception self)
    (let ((view (find-exception-view self)))
      (set-title view "")
      (set-exception view #f)))
  
  
  (method (close-frame self)
    (let ((frame (top-frame)))
      (when frame
        (close frame)))
    #t)
  
  
  (method override (start-music self)
    (let ((music (current-music)))
      (when (get-music? music)
        (set! preserved-music (list (get-music-style music) (get-music-volume music)))
        (set-music-style music "minecraft/music/menu")
        (set-music-volume music .5)
        (change-music music))))
  
  
  (method override (start-ambience self)
    (let ((ambience (current-ambience)))
      (set! preserved-ambience (list (get-ambience? ambience)))
      (set-ambience? ambience #f)))
  
  
  (method override (stop-music self)
    (nextmethod self)
    (let ((music (current-music)))
      (when (get-music? music)
        (bind (music-style music-volume) preserved-music
          (set-music-style music music-style)
          (set-music-volume music music-volume)))))
  
  
  (method override (stop-ambience self)
    (nextmethod self)
    (let ((ambience (current-ambience)))
      (bind (ambience?) preserved-ambience
        (set-ambience? ambience ambience?))))
  
  
  (method override (prepare-skybox self)
    (set! skybox (let ((skybox (find-skybox "nebula")))
                   (prepare skybox)
                   skybox)))
  
  
  (method override (player-task self task <Task>)
    (with-task task
      (lambda (exit)
        (task-sleep task +infinity 0. exit))))
  
  
  (method (on-audio self evt)
    (toggle-audio (current-audio)))
  
  
  (method (on-video self evt)
    (toggle-video (current-video)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (circles-panel self)
    (let ((interface (current-interface)))
      (child interface 'circles)))
  
  
  (method (circles-view self)
    (locate (circles-panel self) 'circles))
  
  
  (method (circles-tree self)
    (get-tree (circles-view self)))
  
  
  (method (templates-panel self)
    (let ((interface (current-interface)))
      (child interface 'templates)))
  
  
  (method (templates-view self)
    (locate (templates-panel self) 'templates))
  
  
  (method (templates-tree self)
    (get-tree (templates-view self)))
  
  
  (method (determine-kind self)
    (case stage
      ((welcome) 'circle)
      ((remote) 'remote)
      ((server) 'server)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (circles-update self)
    @w
    (let ((interface (current-interface)))
      (let ((panel (find-component interface 'circles)))
        (when panel
          (let ((tree (get-tree (locate panel 'circles))))
            (let ((all-data (get-selected-data tree)))
              (let ((data (remove-false all-data)))
                (let ((count (length data)))
                  (set-enabled? (child interface 'open) #t @wait (= count 1))
                  (set-enabled? (child interface 'rename) (= count 1))
                  (set-enabled? (child interface 'delete) (> count 0))))))))))
  
  
  (method package (templates-update self)
    @w
    (let ((interface (current-interface)))
      (let ((panel (find-component interface 'templates)))
        (when panel
          (let ((tree (get-tree (locate panel 'templates))))
            (let ((all-data (get-selected-data tree)))
              (let ((data (remove-false all-data)))
                (let ((count (length data)))
                  (set-enabled? (child interface 'create) (= count 1))))))))))
  
  
  (method (change-update self)
    )
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-track self elapse dx dy)
    (when (memq? stage '(new-circle customize))
      (let ((world (current-world)))
        (let ((entity (get-selection-entity (get-showcase world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat entity))
                (up (get-world-up world)))
            (set-lookat entity (rotate-lookat& lookat angle up))
            (update-matrix entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-accept self evt)
    (if post-accept
        (post-accept)
      (goto-stage self 'login)))
  
  
  (method (on-decline self evt)
    (quit-process (current-process)))
  
  
  (method (on-enter self evt)
    (let ((file (together-file self)))
      (if (exists? file)
          (remote-open self file)
        (goto-stage self 'customize)
        (text-content-set self (info-text self 'client-name) "Together")
        (text-content-set self (info-text self 'server-port) "50000"))))
  
  
  (method (on-customize self evt)
    (change-remote self (together-file self) "Together" "50000"))
  
  
  (method (together-file self)
    {File Settings "clients" "Together" ".client"})
  
  
  (method (change-remote self file client-name server-port)
    (let ((world (current-world)))
      (when (exists? file)
        (let ((client (new-brother file ".client")))
          (let ((configuration (instantiate (read-form client))))
            (let ((name (get-character-name configuration))
                  (avatar (get-character-avatar configuration)))
              (goto-stage self 'customize)
              (text-content-set self (info-text self 'client-name) client-name)
              (text-content-set self (info-text self 'server-port) server-port)
              (text-content-set self (info-text self 'name) name)
              (let ((showcase (get-showcase world)))
                (let ((avatar (find-avatar showcase avatar)))
                  (when avatar
                    (set-selection showcase avatar)
                    (selection-update showcase avatar))))
              (delay-event
                (lambda ()
                  (acquire-focus (info-text self 'name))))))))))
  
  
  (method package (on-join self evt)
    (goto-stage self 'circle))
  
  
  (method (on-edit self evt)
    )
  
  
  (method (on-new-circle self evt)
    (goto-stage self 'new-circle))
  
  
  (method (on-back self evt)
    (goto-stage self (case stage
                       ((new-circle circle) 'welcome)
                       ((customize) 'login)
                       ((new-server) 'server))))
  
  
  (method (on-leave self evt)
    (let ((world (current-world)))
      (open-welcome world)))
  
  
  (method (goto-stage self what)
    (uninstall-stage self)
    (set! stage what)
    (install-stage self))
  
  
  (method (on-create-circle self evt)
    (create-circle self))
  
  
  (method (circle-create self from base)
    (create-new-zone from base
      replace?: #t
      open: (lambda (file)
              (let ((zone (open-circle file)))
                ;; get the current-me after opening the zone
                (let ((me (current-me))
                      (avatar (selected-avatar self)))
                  (set-avatar me avatar)
                  (update-model me)
                  zone)))))
  
  
  (method (selected-avatar self)
    (let ((world (current-world)))
      (get-model (get-selection-entity (find-showcase world 'avatars)))))
  
  
  (method (on-quit self evt)
    (quit-process (current-process)))
  
  
  (method (on-chat self evt)
    (let ((interface (current-interface)))
      (let ((chat (child interface 'chat)))
        (set-visible? chat (not (get-visible? chat))))))
  
  
  (method (create-circle self)
    (create-selected (templates-view self)))
  
  
  (method package (create-remote self)
    (let ((fields (remote-fields self)))
      (let ((contents (map (lambda (field)
                             (bind (label view) field
                               (text-content self (info-text self view))))
                           fields)))
        (bind (client-name server-address server-port name) contents
          (remote-open self (create-client-file client-name server-address server-port name (selected-avatar self)))))))
  
  
  (method (remote-fields self)
    '((client-name-label client-name #t)
      (server-address-label server-address #t)
      (server-port-label server-port #f)
      (name-label name #t)))
  
  
  (method (remote-stops self)
    (map (~ info-text self) (map second (remote-fields self))))
  
  
  (method (info-text self view)
    (let ((interface (current-interface)))
      (locate (child interface view) 'text)))
  
  
  (method (text-content self text)
    (let ((content (get-string-content text)))
      (if (empty-string? content)
          #f
        content)))
  
  
  (method (text-content-set self text content)
    (set-string-content text (->string content)))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method (circle-open self file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (let ((zone (open-circle file @start-script?: start-script?)))
            (display-message world (get-title zone))
            zone)))))
  
  
  (method (open-circle self file . rest)
    ))


;;;
;;;; Camera
;;;


(definition camera-tick
  #f)

(definition camera-angle
  2.0)


(definition (install-camera)
  (let ((zone (current-zone)))
    (set! camera-tick path-camera)
    (register-tick zone camera-tick))
  (path-camera 0.))


(definition (uninstall-camera)
  (let ((zone (current-zone)))
    (unregister-tick zone camera-tick)
    (set! camera-tick #f)))


(definition (path-camera elapse)
  (let ((world (current-world)))
    (increase! camera-angle (/ elapse 10.))
    (let ((target (vertex -11.500 8.500 -32.500))
          (angle camera-angle)
          (radius 75.)
          (elevation 20.))
      (let ((x (cos angle))
            (z (sin angle)))
        (let ((flat (vertex+ target (vertex-scalar*& (vertex x 0. z) radius))))
          (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
            (let ((dir (vertex-normalize (vertex-& target pos)))
                  (dir-flat (vertex-normalize (vertex-& target flat))))
              (let ((vert-angle (vector-angle dir dir-flat)))
                (let ((sight dir-flat)
                      (eye (get-eye world))
                      (up (get-world-up world)))
                  (let ((right (cross-product sight up)))
                    (let ((lookat (lookat sight up right)))
                      (free-motion world feedback?: #f)
                      (set-lookat eye (rotate-lookat-vertical& lookat (- vert-angle)))
                      (set-position eye pos)
                      (derive-target eye)
                      (camera-update eye))))))))))))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


;;;
;;;; Kind-Label
;;;


(class Kind-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


;;;
;;;; Exception-Label
;;;


(class Exception-Label extends Label-View
  
  
  (property exception initialize #f accessors generate)
  
  
  (method override (text-color self)
    {Color World-Red})
  
  
  (method override (get-tooltip? self)
    #t)
  
  
  (method override (get-tooltip-text self)
    (typecase exception
      ((Exception)
       (exception-reason exception))
      (else
       #f))))


;;;
;;;; People-Panel
;;;


(class People-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>   name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<People-View> name: people  location: center
          (<people~>                 selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press}))))))


;;;
;;;; People-View
;;;


(class People-View extends Scroller-View
  
  
  (form
    (<install>                                 style: document hscroll?: #t vscroll?: #t
      (<content~>                              layout-type: fill
        (<Tree-Header>                         style: document shown?: #f
          (<content~>
            (<Tree-View>          name: people portfolio: :images filled-column: person multiple-selection?: #t background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: person title: "Person" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f))))))))


;;;
;;;; Circles-Panel
;;;


(class Circles-Panel extends World-Panel
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Circles-View> name: circles location: center
          (<circles~>                 selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press}))))))


;;;
;;;; Circles-View
;;;


(class Circles-View extends Scroller-View
  
  
  (form
    (<install>                                  style: document hscroll?: #t vscroll?: #t
      (<content~>                               layout-type: fill
        (<Tree-Header>                          style: document shown?: #f
          (<content~>
            (<Tree-View>          name: circles portfolio: :images filled-column: circle multiple-selection?: #t background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: circle  title: "Circle" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f))))))))


;;;
;;;; Info-Label
;;;


(class Info-Label extends Label-View
  
  
  (form
    (<install> size: {Dimension 150 16} color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info-View
;;;


(class Info-View extends Border-View
  
  
  (form
    (<install>                          size: {Dimension 150 19} border-type: edge style: entry
      (<Scroller-View>                  hscroll?: #f vscroll?: #f
        (<content~>                     layout-type: fill
          (<World-Text-View> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method override (get-tab-stops self)
    (let ((zone (current-zone)))
      (tab-stops zone)))
  
  
  (method (on-return self evt)
    (let ((zone (current-zone)))
      (case stage
        ((new-remote) (create-remote zone))
        ((new-server) (create-server zone)))))))
