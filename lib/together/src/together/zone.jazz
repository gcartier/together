;;;============
;;;  Together
;;;============
;;;
;;;; Together Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.zone jazz


(import (jazz.component)
        (jazz.event)
        (jazz.figure)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.opengl.window)
        (jazz.outline)
        (jazz.process)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.audio)
        (world.autoload)
        (world.client.tier)
        (world.context)
        (world.geometry)
        (world.interface)
        (world.interface.clients)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.frame)
        (world.interface.panel)
        (world.interface.servers)
        (world.interface.text)
        (world.interface.templates)
        (world.interface.tiers)
        (world.io)
        (world.music)
        (world.settings)
        (world.skybox)
        (world.task)
        (world.video)
        (world.window)
        (together.settings))


(definition protected environment-suffix
  (cond-expand
    (prod  "")
    (stage " (stage)")
    (test  " (test)")
    (else  " (devel)")))


(class Together-Zone extends Zone
  
  
  (slot stage initialize #f getter generate)
  (slot root  initialize #f getter generate)
  
  
  (form
    (<install> sun-cycle?: #f))
  
  
  (method override (destroy self)
    (when (window?)
      (let ((world (current-world)))
        (clear-message world)))
    (nextmethod self))
  
  
  (method override (camera-update self)
    (nextmethod self)
    (when (window?)
      (install-camera)))
  
  
  (method override (title-update self)
    (when (window?)
      (let ((window (current-window)))
        (set-caption window "Together"))))
  
  
  (method override (main-menu? self)
    #f)

  
  (method override (show-belt? self)
    #f)
  
  
  (method override (show-compass? self)
    #f)
  
  
  (method override (show-combat? self)
    #f)
  
  
  (method override (show-chat? self)
    #f)
  
  
  (method override (about-size self)
    {Dimension 715 385})
  
  
  (method override (prepare-skybox self)
    (set! skybox (let ((skybox (find-skybox together-skybox)))
                   (prepare skybox)
                   skybox)))
  
  
  (method override (player-task self task <Task>)
    ;; to test 3d circles
    (if circle?
        (nextmethod self task)
      (with-task task
        (lambda (exit)
          (task-wait task +infinity 0. exit)))))
  
  
  (method (close-frame self)
    (let ((frame (top-frame)))
      (when frame
        (close frame))))
  
  
  (method (inhibit-focus-selects-all self view thunk)
    (if (and (is? view Text-View)
             (get-focus-selects-all? view))
        (begin
          (set-focus-selects-all? view #f)
          (prog1 (thunk)
            (set-focus-selects-all? view #t)))
      (thunk)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method protected virtual (name-return self)
    )
  
  
  (method protected virtual (name-escape self)
    )
  
  
  ;;;
  ;;;; Exception
  ;;;
  
  
  (method (add-exception-view self)
    (let ((interface (current-interface)))
      (new Exception-Label name: 'exception parent: interface title: "" location: '(center 107) size: {Dimension 600 40} font: {Font font-name: tahoma point-size: 28 shadow: thin} justification: 'center)))
  
  
  (method (find-exception-view self)
    (let ((interface (current-interface)))
      (child interface 'exception)))
  
  
  (method package (report-exception self title exc)
    (let ((view (find-exception-view self)))
      (set-title view title)
      (set-exception view exc)))
  
  
  (method (clear-exception self)
    (let ((view (find-exception-view self)))
      (set-title view "")
      (set-exception view #f))))


;;;
;;;; Together-Root
;;;


(class Together-Root extends Layout-View
  
  
  (method override (get-transparent? self)
    #t)
  
  
  (method override (mouse-down self evt)
    (focus-world)))


;;;
;;;; Kind-Label
;;;


(class Kind-Label extends Label-View
  
  
  (method override (text-color self)
    (or color {Color World-Ochre})))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color self)
    {Color World-Ochre}))


;;;
;;;; Name-View
;;;


(class Name-View extends Border-View
  
  
  (property action-view initialize #f accessors generate)
  
  
  (form
    (<install>                    size: {Dimension 250 24} border-type: edge style: entry @border-type: solid @border-color: {Color Medium-Gray}
      (<Scroller-View>            hscroll?: #f vscroll?: #f
        (<content~>               layout-type: fill
          (<Name-Text> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return} escape-press-handler: {Event-Handler :form on-escape})))))
  
  
  (method (on-content-change self evt)
    (let ((zone (current-zone)))
      (let ((text (locate self 'text)))
        (set-enabled? (child (get-root zone) action-view) (not (whitespace? (get-string-content text)))))))
  
  
  (method (on-return self evt)
    (let ((zone (current-zone)))
      (name-return zone)))
  
  
  (method (on-escape self evt)
    (let ((zone (current-zone)))
      (name-escape zone))))


;;;
;;;; Name-Text
;;;


(class Name-Text extends World-Text-View
  
  
  (method override (new-model self)
    (new Text-Model default-style: {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin}} left-padding: 12))
  
  
  (method override (handle-escape? self)
    #t))


;;;
;;;; Exception-Label
;;;


(class Exception-Label extends Label-View
  
  
  (property exception initialize #f accessors generate)
  
  
  (method override (text-color self)
    {Color World-Red})
  
  
  (method override (get-tooltip? self)
    #t)
  
  
  (method override (get-tooltip-text self)
    (typecase exception
      ((Exception)
       (exception-reason exception))
      (else
       #f))))


;;;
;;;; Camera
;;;


(definition camera-tick
  #f)

(definition camera-angle
  2.0)


(definition package (install-camera)
  (let ((window (current-window))
        (zone (current-zone)))
    (unless camera-tick
      (set! camera-tick path-camera)
      (register-tick zone camera-tick)
      ;; removes tearing in the pathing
      (enable-vsync window)
      (path-camera 0.))))


(definition package (uninstall-camera)
  (let ((window (current-window))
        (zone (current-zone)))
    (when camera-tick
      (unregister-tick zone camera-tick)
      (disable-vsync window)
      (set! camera-tick #f))))


(definition package (path-camera elapse)
  (let ((world (current-world)))
    (unless sleeping?
      (increase! camera-angle (/ elapse 10.))
      (let ((target (vertex -11.500 8.500 -32.500))
            (angle camera-angle)
            (radius 75.)
            (elevation 20.))
        (let ((x (cos angle))
              (z (sin angle)))
          (let ((flat (vertex+ target (vertex-scalar*& (vertex x 0. z) radius))))
            (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
              (let ((dir (vertex-normalize (vertex-& target pos)))
                    (dir-flat (vertex-normalize (vertex-& target flat))))
                (let ((vert-angle (vector-angle dir dir-flat)))
                  (let ((sight dir-flat)
                        (eye (get-eye world))
                        (up (get-world-up world)))
                    (let ((right (cross-product sight up)))
                      (let ((lookat (lookat sight up right)))
                        (free-motion world feedback?: #f)
                        (set-lookat eye (rotate-lookat-vertical& lookat (- vert-angle)))
                        (set-position eye pos)
                        (derive-target eye)
                        (camera-update eye))))))))))))))
