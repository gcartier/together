;;;============
;;;  Together
;;;============
;;;
;;;; Together Update
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.update jazz


(import (jazz.application)
        (jazz.component)
        (jazz.event)
        (jazz.io)
        (jazz.markup)
        (jazz.opengl.frame)
        (jazz.platform)
        (jazz.process)
        (jazz.settings)
        (jazz.view)
        (jazz.window)
        (jazz.workspace)
        (jiri.appl)
        (jiri.connection)
        (jiri.manager)
        (jiri.monitor)
        (jiri.pane)
        (jiri.remote)
        (jiri.section)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.update)
        (jiri.view)
        (jiri.window)
        (jiri.work)
        (update.settings))


;;;
;;;; Delayed
;;;


;; it is critical that only jiri code be loaded
;; when the together repository is not uptodate
;; to minimize to jiri code the danger of not
;; being able to update out of a bug


(definition (delayed-load)
  (together.run:load-together))


(definition (delayed-boot)
  (together.run:boot-together))


;;;
;;;; Application
;;;


(class Update-Application extends Jiri-Application
  
  
  (method override (new-toplevel self)
    (let ((toplevel (new Update-Toplevel)))
      (set! update-toplevel toplevel)
      toplevel))
  
  
  (method override (finish-process self)
    (nextmethod self)
    (set-title (current-frame) "Update"))

  
  (method override (initialize-settings self)
    (register-resources-alias 'Together))
  
  
  (method override (quit-process self (status 0))
    (quit-callback)))


;;;
;;;; Toplevel
;;;


(definition update-toplevel
  #f)

(definition protected (close-update-toplevel)
  (when update-toplevel
    (close update-toplevel)
    (set! update-toplevel #f)))


(class Update-Toplevel extends Jiri-Toplevel


  (form
    (<install> caption-base: "Together"))
  
  
  (method override (effective-title self)
    "Together"))


;;;
;;;; Boot
;;;


(class Update-Done extends Signal)


(definition protected (update-together)
  (catch (Update-Done exc
           (reset-current-stage)
           (delayed-boot))
    (boot-environment (new Update-Application))))


;;;
;;;; Update
;;;


(definition (update-at-together)
  (current-root-dir kernel-root)
  (set-first-install? (or (not (file-exists? (update-dir)))
                          (not (file-exists? (data-dir)))))
  (setup-stage-view)
  (let ((thread
          (new-thread
            (lambda ()
              (send-snapshot-reports (jiri-installer-snapshots))
              (send-snapshot-reports (jiri-application-snapshots))
              (set-stage-view-updating)
              (catch-jiri-exception
                (lambda ()
                  (pull-repository-if (jiri-worker-section) (worker-dir)
                    (lambda (new-content?)
                      (pull-repository (jiri-update-section) (update-dir)
                        (lambda (new-content?)
                          (if (repository-uptodate? (jiri-app-section) (app-dir) directory: (app-directory))
                              (begin
                                (set-done (get-download-task (get-connection (jiri-app-section))))
                                (pull-repository (jiri-data-section) (data-dir)
                                  (lambda (new-data-content?)
                                    (update-done new-data-content?))))
                            (delegate-update (current-root-dir) "together" first-install?)))))))))
            'update)))
    (thread-base-priority-set! thread update-priority)
    (thread-start! thread)))


(definition load-expected-direct
  (cond-expand
    (windows 445)
    (else 455)))


(definition (update-done new-content?)
  (declare (proper-tail-calls))
  (set-cursor :arrow)
  (set-work-done? #t)
  (let ((port (open-vector)))
    (load-feedback-setup port load-expected-direct)
    (let ((thread
            (new-thread
              (lambda ()
                (delayed-load)
                (load-feedback-done))
              'load)))
      (thread-base-priority-set! thread update-priority)
      (thread-start! thread))
    (update-splash new-content? port
      (lambda ()
        (delay-event
          (lambda ()
            (signal (new Update-Done))))))))


(definition (update-splash new-content? port cont)
  (let ((section (jiri-splash-section)))
    (bind (task) (get-tasks section)
      (set-title stage-view (if new-content? (jiri-splash-updated) (jiri-splash-uptodate)))
      (set-status task "Launching together")
      (launch-feedback "together" task port cont))))


;;;
;;;; Init
;;;


(jiri-background {File Resources "lib" "together" "assets" "background.png"})


(set-jiri-init
  (lambda ()
    (jiri-layout)))


(set-jiri-startup
  (lambda ()
    (update-at-together))))
