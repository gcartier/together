;;;============
;;;  Together
;;;============
;;;
;;;; BBR Debugging
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.bbr jazz


(import (jazz.graphic)
        (jazz.stream)
        (world.bbr)
        (world.client.udp)
        (world.queue)
        (world.stream)
        (world.udp))


(definition bbr-state #f)
(definition upload-socket #f)
(definition upload-queue #f)
(definition upload-queue-rate #f)
(definition upload-send-rate #f)
(definition upload-skbuff-info #f)
(definition upload-skbcb-info #f)
(definition upload-rate-info #f)
(definition upload-bbr-info #f)
(definition upload-bbrinfo-info #f)
(definition upload-bbr-update #f)
(definition upload-statistics #f)

(definition protected (effective-upload-socket)
  (or upload-socket (get-upload-socket (current-udp))))

(definition protected (set-upload-info state socket queue queue-rate send-rate skbuff-info skbcb-info rate-info bbr-info bbrinfo-info bbr-update statistics)
  (set! bbr-state state)
  (set! upload-socket socket)
  (set! upload-queue queue)
  (set! upload-queue-rate queue-rate)
  (set! upload-send-rate send-rate)
  (set! upload-skbuff-info skbuff-info)
  (set! upload-skbcb-info skbcb-info)
  (set! upload-rate-info rate-info)
  (set! upload-bbr-info bbr-info)
  (set! upload-bbrinfo-info bbrinfo-info)
  (set! upload-bbr-update bbr-update)
  (set! upload-statistics statistics))


(definition previous-values
  (make-table test: equal?))


(definition change-counts
  (make-table test: equal?))


(definition current-colors
  (make-table test: equal?))

(definition protected (reset-colors)
  (empty-table previous-values)
  (empty-table change-counts)
  (empty-table current-colors))


(definition current-update
  -1)


(definition protected (draw-bbr surface start-h start-v)
  (let ((udp (and surface (current-udp))))
    (let ((state (or bbr-state (get-bbr-state udp)))
          (sk (or upload-socket (get-upload-socket udp)))
          (queue (or upload-queue (get-upload-queue udp)))
          (queue-rate (or upload-queue-rate (get-upload-queue-rate udp)))
          (send-rate (or upload-send-rate (get-upload-send-rate udp)))
          (skb (or upload-skbuff-info (get-upload-skbuff-info udp)))
          (scb (or upload-skbcb-info (get-upload-skbcb-info udp)))
          (rate (or upload-rate-info (get-upload-rate-info udp)))
          (bbr (or upload-bbr-info (get-upload-bbr-info udp)))
          (bbrinfo (or upload-bbrinfo-info (get-upload-bbrinfo-info udp)))
          (bbr-update (or upload-bbr-update (~ get-upload-bbr-update udp)))
          (statistics (or upload-statistics (get-statistics udp)))
          (base-h start-h)
          (base-v start-v))
      (define (draw text color (padding 0))
        (when surface
          (let ((h (+ base-h padding))
                (v (+ base-v 17)))
            (draw-text surface h v text color)))
        (increase! base-v 20))
      
      (define (draw-property category name value (type #f))
        (let ((key (cons category name)))
          (let ((previous-value (table-ref previous-values key (unspecified))))
            (let ((presented (present value type))
                  (color (cond ((= current-update (bbr-update))
                                (table-ref current-colors key {Color White}))
                               ((or (unspecified? previous-value) (equal? value previous-value))
                                (if (not (table-ref change-counts key #f))
                                    {Color White}
                                  {Color World-Blue}))
                               (else
                                (table-set! change-counts key (+ (table-ref change-counts key 0) 1))
                                {Color World-Orange}))))
              (table-set! previous-values key value)
              (table-set! current-colors key color)
              (draw (format "{a}: {a}" name presented) color 0)))))
      
      (define (present value type)
        (cond ((not type)
               (format "{a}" value))
              ((eq? type 'u31)
               (if (= value 2147483647)
                   "2^31"
                 (format "{a}" value)))
              ((eq? type 'u32)
               (if (= value 4294967295)
                   "2^32"
                 (format "{a}" value)))
              ((eq? type 'us)
               (format "{r precision: 3}s" (microseconds->seconds value)))
              ((eq? type 'mbps)
               (format "{r precision: 1}Mbps" (bytes->mbps value)))
              ((eq? type 'bbrunit)
               (format "{r precision: 3}" (/ value 256.)))
              ((eq? type 'list)
               (format "{l detail: :human}" value))
              (else
               (error "Unknown type: {a}" type))))
      
      (define (present-queue)
        (if (eq? queue 'N/A)
            queue
          (format "{l separator: \", \"}" (sizes queue))))
      
      (define (present-bitrate)
        (if (eq? queue 'N/A)
            queue
          (format "{l detail: :human separator: \", \"}"
                  (map (lambda (channel)
                         (let ((consumer (get-consumer channel)))
                           (if (not consumer)
                               'N/A
                             (format "{r precision: 1}" (get-bitrate-modifier consumer)))))
                       (get-channels queue)))))
      
      (define (present-mode)
        (let ((mode (vector-ref #(Startup Drain ProbeBW ProbeRTT) (bbrinfo-bbr_mode-ref bbrinfo)))
              (phase (vector-ref #(Invalid Startup Drain ProbeRTT Up Down Cruise Refill) (bbrinfo-bbr_phase-ref bbrinfo))))
          (if (eq? mode 'ProbeBW)
              (format "{a} ({a})" mode phase)
            (format "{a}" mode))))
      
      (define (present-ca-state state)
        (let ((state (vector-ref #(Open Disorder CWR Recovery Loss) state)))
          (format "{a}" state)))
      
      (define (upload-drop)
        (let ((drop (get-upload-drop statistics)))
          (if drop
              (format "{r precision: 1}%" drop)
            "N/A")))
      
      (let ((header-color {Color World-Green})
            (info-color {Color White})
            (element-color {Color White}))
        ;; info
        (bbr_get_info sk 0 #f bbrinfo)
        ;; state
        (set! base-h start-h)
        (set! base-v 50)
        (draw "state" header-color)
        (draw-property 'state "queue" (present-queue))
        (draw-property 'state "bitrate" (present-bitrate))
        (draw-property 'state "inflight" (table-length (get-inflight-buffers state)))
        (draw-property 'state "queue" (if (eq? queue-rate 'N/A) queue-rate (get-average queue-rate)) (if (eq? queue-rate 'N/A) #f 'mbps))
        (draw-property 'state "send" (get-average send-rate) 'mbps)
        (draw-property 'state "drop" (upload-drop))
        (draw-property 'state "bbr" (present-mode))
        (set! base-h start-h)
        (set! base-v start-v)
        ;; tcp
        (draw "tcp" header-color)
        @plb (draw-property 'tcp "rcv_nxt" (tcpsock-rcv_nxt-ref sk))
        @tcp (draw-property 'tcp "snd_nxt" (tcpsock-snd_nxt-ref sk))
        (draw-property 'tcp "mss_cache" (tcpsock-mss_cache-ref sk))
        @tlp (draw-property 'tcp "tlp_orig_data_app_limited" (tcpsock-tlp_orig_data_app_limited-ref sk))
        (draw-property 'tcp "is_cwnd_limited" (tcpsock-is_cwnd_limited-ref sk))
        @tcp (draw-property 'tcp "tcp_wstamp_ns" (tcpsock-tcp_wstamp_ns-ref sk))
        (draw-property 'tcp "tcp_clock_cache" (tcpsock-tcp_clock_cache-ref sk))
        (draw-property 'tcp "tcp_mstamp" (tcpsock-tcp_mstamp-ref sk))
        (draw-property 'tcp "srtt_us" (tcpsock-srtt_us-ref sk) 'us)
        (draw-property 'tcp "rtt_min" (tcp_min_rtt sk) 'us)
        (draw-property 'tcp "packets_out" (tcpsock-packets_out-ref sk))
        @tcp (draw-property 'tcp "retrans_out" (tcpsock-retrans_out-ref sk))
        @ecn (draw-property 'tcp "ecn_flags" (tcpsock-ecn_flags-ref sk))
        (increase! base-h 220)
        (set! base-v start-v)
        ;; congestion
        (draw "congestion" header-color)
        (draw-property 'congestion "snd_ssthresh" (tcpsock-snd_ssthresh-ref sk) 'u31)
        (draw-property 'congestion "snd_cwnd" (tcpsock-snd_cwnd-ref sk))
        (draw-property 'congestion "snd_cwnd_clamp" (tcpsock-snd_cwnd_clamp-ref sk) 'u32)
        (draw-property 'congestion "prior_cwnd" (tcpsock-prior_cwnd-ref sk))
        (draw-property 'congestion "delivered" (tcpsock-delivered-ref sk))
        @ecn (draw-property 'congestion "delivered_ce" (tcpsock-delivered_ce-ref sk))
        (draw-property 'congestion "lost" (tcpsock-lost-ref sk))
        (draw-property 'congestion "app_limited" (tcpsock-app_limited-ref sk))
        (draw-property 'congestion "first_tx_mstamp" (tcpsock-first_tx_mstamp-ref sk))
        (draw-property 'congestion "delivered_mstamp" (tcpsock-delivered_mstamp-ref sk))
        (draw-property 'congestion "rate_delivered" (tcpsock-rate_delivered-ref sk))
        (draw-property 'congestion "rate_interval_us" (tcpsock-rate_interval_us-ref sk) 'us)
        @tcp (draw-property 'congestion "write_seq" (tcpsock-write_seq-ref sk))
        @tcp (draw-property 'congestion "lost_out" (tcpsock-lost_out-ref sk))
        @tcp (draw-property 'congestion "sacked_out" (tcpsock-sacked_out-ref sk))
        (increase! base-h 220)
        (set! base-v start-v)
        ;; sock
        (draw "sock" header-color)
        @tcp (draw-property 'sock "sk_pacing_status" (tcpsock-inet_conn.icsk_inet.sk.sk_pacing_status-ref sk))
        (draw-property 'sock "sk_pacing_rate" (tcpsock-inet_conn.icsk_inet.sk.sk_pacing_rate-ref sk) 'mbps)
        @tso (draw-property 'sock "sk_gso_max_size" (tcpsock-inet_conn.icsk_inet.sk.sk_gso_max_size-ref sk))
        @tso (draw-property 'sock "sk_pacing_shift" (tcpsock-inet_conn.icsk_inet.sk.sk_pacing_shift-ref sk))
        (draw-property 'sock "icsk_ca_state" (present-ca-state (tcpsock-inet_conn.icsk_ca_state-ref sk)))
        @ecn (draw-property 'sock "icsk_ack_pending" (tcpsock-inet_conn.icsk_ack.pending-ref sk))
        (increase! base-h 200)
        (set! base-v start-v)
        ;; skbuff
        (draw "skbuff" header-color)
        (draw-property 'skbuff "skb_mstamp_ns" (skbuff-skb_mstamp_ns-ref skb))
        (draw-property 'skbuff "seq" (skbcb-seq-ref scb))
        (draw-property 'skbuff "end_seq" (skbcb-end_seq-ref scb))
        (draw-property 'skbuff "sacked" (skbcb-sacked-ref scb))
        (draw-property 'skbuff "is_app_limited" (skbcb-tx.is_app_limited-ref scb))
        @ecn (draw-property 'skbuff "delivered_ce" (skbcb-tx.delivered_ce-ref scb))
        (draw-property 'skbuff "delivered" (skbcb-tx.delivered-ref scb))
        (draw-property 'skbuff "first_tx_mstamp" (skbcb-tx.first_tx_mstamp-ref scb))
        (draw-property 'skbuff "delivered_mstamp" (skbcb-tx.delivered_mstamp-ref scb))
        (draw-property 'skbuff "in_flight" (skbcb-tx.in_flight-ref scb))
        (draw-property 'skbuff "lost" (skbcb-tx.lost-ref scb))
        (increase! base-h 210)
        (set! base-v start-v)
        ;; rate
        (draw "rate" header-color)
        (draw-property 'rate "prior_mstamp" (ratesample-prior_mstamp-ref rate))
        (draw-property 'rate "prior_lost" (ratesample-prior_lost-ref rate))
        (draw-property 'rate "prior_delivered" (ratesample-prior_delivered-ref rate))
        @ecn (draw-property 'rate "prior_delivered_ce" (ratesample-prior_delivered_ce-ref rate))
        (draw-property 'rate "tx_in_flight" (ratesample-tx_in_flight-ref rate))
        (draw-property 'rate "lost" (ratesample-lost-ref rate))
        (draw-property 'rate "delivered" (ratesample-delivered-ref rate))
        @ecn (draw-property 'rate "delivered_ce" (ratesample-delivered_ce-ref rate))
        (draw-property 'rate "interval_us" (ratesample-interval_us-ref rate) 'us)
        (draw-property 'rate "snd_interval_us" (ratesample-snd_interval_us-ref rate) 'us)
        (draw-property 'rate "rcv_interval_us" (ratesample-rcv_interval_us-ref rate) 'us)
        (draw-property 'rate "rtt_us" (ratesample-rtt_us-ref rate) 'us)
        (draw-property 'rate "losses" (ratesample-losses-ref rate))
        (draw-property 'rate "acked_sacked" (ratesample-acked_sacked-ref rate))
        (draw-property 'rate "prior_in_flight" (ratesample-prior_in_flight-ref rate))
        (draw-property 'rate "last_end_seq" (ratesample-last_end_seq-ref rate))
        (draw-property 'rate "is_app_limited" (ratesample-is_app_limited-ref rate))
        (draw-property 'rate "is_retrans" (ratesample-is_retrans-ref rate))
        @tlp (draw-property 'rate "is_acking_tlp_retrans_seq" (ratesample-is_acking_tlp_retrans_seq-ref rate))
        @tcp (draw-property 'rate "is_ack_delayed" (ratesample-is_ack_delayed-ref rate))
        @ecn (draw-property 'rate "is_ece" (ratesample-is_ece-ref rate))
        (increase! base-h 220)
        (set! base-v start-v)
        ;; bbr
        (draw "bbr" header-color)
        (draw-property 'bbr "min_rtt_us" (bbr-min_rtt_us-ref bbr) 'us)
        (draw-property 'bbr "min_rtt_stamp" (bbr-min_rtt_stamp-ref bbr))
        (draw-property 'bbr "probe_rtt_done_stamp" (bbr-probe_rtt_done_stamp-ref bbr))
        (draw-property 'bbr "probe_rtt_min_us" (bbr-probe_rtt_min_us-ref bbr) 'us)
        (draw-property 'bbr "probe_rtt_min_stamp" (bbr-probe_rtt_min_stamp-ref bbr))
        (draw-property 'bbr "next_rtt_delivered" (bbr-next_rtt_delivered-ref bbr))
        (draw-property 'bbr "cycle_mstamp" (bbr-cycle_mstamp-ref bbr))
        (draw-property 'bbr "mode" (bbr-mode-ref bbr))
        (draw-property 'bbr "prev_ca_state" (bbr-prev_ca_state-ref bbr))
        (draw-property 'bbr "round_start" (bbr-round_start-ref bbr))
        @ecn (draw-property 'bbr "ce_state" (bbr-ce_state-ref bbr))
        (draw-property 'bbr "bw_probe_up_rounds" (bbr-bw_probe_up_rounds-ref bbr))
        (draw-property 'bbr "try_fast_path" (bbr-try_fast_path-ref bbr))
        (draw-property 'bbr "idle_restart" (bbr-idle_restart-ref bbr))
        (draw-property 'bbr "probe_rtt_round_done" (bbr-probe_rtt_round_done-ref bbr))
        (draw-property 'bbr "init_cwnd" (bbr-init_cwnd-ref bbr))
        (draw-property 'bbr "pacing_gain" (bbr-pacing_gain-ref bbr) 'bbrunit)
        (draw-property 'bbr "cwnd_gain" (bbr-cwnd_gain-ref bbr) 'bbrunit)
        (draw-property 'bbr "full_bw_reached" (bbr-full_bw_reached-ref bbr))
        (draw-property 'bbr "full_bw_cnt" (bbr-full_bw_cnt-ref bbr))
        (draw-property 'bbr "cycle_idx" (bbr-cycle_idx-ref bbr))
        (draw-property 'bbr "has_seen_rtt" (bbr-has_seen_rtt-ref bbr))
        (draw-property 'bbr "prior_cwnd" (bbr-prior_cwnd-ref bbr))
        (draw-property 'bbr "full_bw" (bbr-full_bw-ref bbr))
        (draw-property 'bbr "ack_epoch_mstamp" (bbr-ack_epoch_mstamp-ref bbr))
        (draw-property 'bbr "extra_acked" (list (|bbr-extra_acked[0]-ref| bbr) (|bbr-extra_acked[1]-ref| bbr)) 'list)
        (draw-property 'bbr "ack_epoch_acked" (bbr-ack_epoch_acked-ref bbr))
        (draw-property 'bbr "extra_acked_win_rtts" (bbr-extra_acked_win_rtts-ref bbr))
        (draw-property 'bbr "extra_acked_win_idx" (bbr-extra_acked_win_idx-ref bbr))
        (draw-property 'bbr "full_bw_now" (bbr-full_bw_now-ref bbr))
        (increase! base-h 220)
        (set! base-v start-v)
        (draw "bbr" header-color)
        @ecn (draw-property 'bbr "startup_ecn_rounds" (bbr-startup_ecn_rounds-ref bbr))
        (draw-property 'bbr "loss_in_cycle" (bbr-loss_in_cycle-ref bbr))
        @ecn (draw-property 'bbr "ecn_in_cycle" (bbr-ecn_in_cycle-ref bbr))
        (draw-property 'bbr "loss_round_delivered" (bbr-loss_round_delivered-ref bbr))
        (draw-property 'bbr "undo_bw_lo" (bbr-undo_bw_lo-ref bbr))
        (draw-property 'bbr "undo_inflight_lo" (bbr-undo_inflight_lo-ref bbr))
        (draw-property 'bbr "undo_inflight_hi" (bbr-undo_inflight_hi-ref bbr))
        (draw-property 'bbr "bw_latest" (bbr-bw_latest-ref bbr))
        (draw-property 'bbr "bw_lo" (bbr-bw_lo-ref bbr) 'u32)
        (draw-property 'bbr "bw_hi" (list (|bbr-bw_hi[0]-ref| bbr) (|bbr-bw_hi[1]-ref| bbr)) 'list)
        (draw-property 'bbr "inflight_latest" (bbr-inflight_latest-ref bbr))
        (draw-property 'bbr "inflight_lo" (bbr-inflight_lo-ref bbr) 'u32)
        (draw-property 'bbr "inflight_hi" (bbr-inflight_hi-ref bbr) 'u32)
        (draw-property 'bbr "bw_probe_up_cnt" (bbr-bw_probe_up_cnt-ref bbr) 'u32)
        (draw-property 'bbr "bw_probe_up_acks" (bbr-bw_probe_up_acks-ref bbr))
        (draw-property 'bbr "probe_wait_us" (bbr-probe_wait_us-ref bbr) 'us)
        @plb (draw-property 'bbr "prior_rcv_nxt" (bbr-prior_rcv_nxt-ref bbr))
        @ecn (draw-property 'bbr "ecn_eligible" (bbr-ecn_eligible-ref bbr))
        @ecn (draw-property 'bbr "ecn_alpha" (bbr-ecn_alpha-ref bbr))
        (draw-property 'bbr "bw_probe_samples" (bbr-bw_probe_samples-ref bbr))
        (draw-property 'bbr "prev_probe_too_high" (bbr-prev_probe_too_high-ref bbr))
        (draw-property 'bbr "stopped_risky_probe" (bbr-stopped_risky_probe-ref bbr))
        @reno (draw-property 'bbr "rounds_since_probe" (bbr-rounds_since_probe-ref bbr))
        (draw-property 'bbr "loss_round_start" (bbr-loss_round_start-ref bbr))
        (draw-property 'bbr "loss_in_round" (bbr-loss_in_round-ref bbr))
        @ecn (draw-property 'bbr "ecn_in_round" (bbr-ecn_in_round-ref bbr))
        (draw-property 'bbr "ack_phase" (bbr-ack_phase-ref bbr))
        (draw-property 'bbr "loss_events_in_round" (bbr-loss_events_in_round-ref bbr))
        (draw-property 'bbr "initialized" (bbr-initialized-ref bbr))
        @ecn (draw-property 'bbr "alpha_last_delivered" (bbr-alpha_last_delivered-ref bbr))
        @ecn (draw-property 'bbr "alpha_last_delivered_ce" (bbr-alpha_last_delivered_ce-ref bbr))
        ;; bbrinfo
        @bbrinfo (
        (draw "bbrinfo" header-color)
        (draw-property 'bbrinfo "mode" (present-mode))
        (draw-property 'bbrinfo "bw_lo" (bbrinfo-bbr_bw_lo-ref bbrinfo))
        (draw-property 'bbrinfo "bw_hi" (bbrinfo-bbr_bw_hi-ref bbrinfo))
        (draw-property 'bbrinfo "min_rtt" (bbrinfo-bbr_min_rtt-ref bbrinfo))
        (draw-property 'bbrinfo "pacing_gain" (bbrinfo-bbr_pacing_gain-ref bbrinfo))
        (draw-property 'bbrinfo "cwnd_gain" (bbrinfo-bbr_cwnd_gain-ref bbrinfo))
        (draw-property 'bbrinfo "inflight_lo" (bbrinfo-bbr_inflight_lo-ref bbrinfo))
        (draw-property 'bbrinfo "inflight_hi" (bbrinfo-bbr_inflight_hi-ref bbrinfo))
        (draw-property 'bbrinfo "extra_acked" (bbrinfo-bbr_extra_acked-ref bbrinfo)))
        ;; update
        (set! current-update (bbr-update)))))))
