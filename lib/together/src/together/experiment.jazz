;;;============
;;;  Together
;;;============
;;;
;;;; Together Experiments
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.experiment jazz


(import (jazz.platform)
        (world)
        (world.client.tier)
        (world.context)
        (world.task)
        (world.video)
        (together.zone))


;;;
;;;; Experiment
;;;


(definition protected experiments
  '())

(definition protected (add-experiment experiment)
  (set! experiments (append experiments (list experiment))))

(definition protected (remove-experiment experiment)
  (set! experiments (remove! experiment experiments)))


(class Experiment extends Object
  
  
  (slot title    getter generate)
  (slot action   getter generate)
  (slot running? accessors generate)
  
  
  (method override (initialize self title action)
    (nextmethod self)
    (set! self.title title)
    (set! self.action action)
    (set! self.running? #f))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" title)))))


;;;
;;;; Experiments
;;;


(definition protected (install-experiments)
  (add-experiment
    (new Experiment
      "Measure heartbeat frequency"
      (lambda (feedback)
        (measure-heartbeat-frequency feedback))))
  (add-experiment
    (new Experiment
      "Augment heartbeat frequency"
      (lambda (feedback)
        (augment-heartbeat-frequency feedback))))
  (cond-expand
    (windows
     (add-experiment
       (new Experiment
         "Augment heartbeat priority"
         (lambda (feedback)
           (augment-heartbeat-priority feedback)))))
    (else))
  (cond-expand
    (windows
     (add-experiment
       (new Experiment
         "Augment main priority"
         (lambda (feedback)
           (augment-main-priority feedback)))))
    (else))
  (add-experiment
    (new Experiment
      "Toggle camera high resolution"
      (lambda (feedback)
        (camera-high-resolution feedback)))))


(definition public heartbeat-frequency
  #f)

(definition measure-heartbeat-frequency?
  #f)

(definition measure-heartbeat-sampling
  100)

(definition measure-heartbeat-start
  #f)

(definition measure-heartbeat-count
  #f)

(definition measure-heartbeat-last-report
  #f)

(definition (measure-heartbeat-setup)
  (set! measure-heartbeat-start (current-monotonic))
  (set! measure-heartbeat-count 0))

(definition (measure-heartbeat)
  (increase! measure-heartbeat-count)
  (when (= measure-heartbeat-count measure-heartbeat-sampling)
    (let ((now (current-monotonic)))
      (let ((elapse (- now measure-heartbeat-start)))
        (let ((frequency (/ (cast <fl> measure-heartbeat-sampling) elapse)))
          (set! measure-heartbeat-start now)
          (set! measure-heartbeat-count 0)
          (set! heartbeat-frequency frequency)
          (when (or (not measure-heartbeat-last-report)
                    (> (- now measure-heartbeat-last-report) 1.))
            (terminal (fxround heartbeat-frequency))
            (set! measure-heartbeat-last-report now))))))
  (thread-heartbeat!))

(definition (measure-heartbeat-frequency feedback)
  (with-task-mutex
    (lambda ()
      (set! measure-heartbeat-frequency? (not measure-heartbeat-frequency?))
      (if measure-heartbeat-frequency?
          (begin
            (measure-heartbeat-setup)
            (interrupt-vector-set! HEARTBEAT-INTERRUPT measure-heartbeat))
        (interrupt-vector-set! HEARTBEAT-INTERRUPT thread-heartbeat!))))
  (feedback (format "Measure heartbeat frequency {a}" (if measure-heartbeat-frequency? "on" "off")))
  (sleep .25))


(definition (augment-heartbeat-frequency feedback)
  (with-task-mutex
    (lambda ()
      (if (= (get-heartbeat-interval) .01)
          (set-heartbeat-interval! .001)
        (set-heartbeat-interval! .01))))
  (feedback (format "Heartbeat interval: {a}" (get-heartbeat-interval)))
  (sleep .25))


(cond-expand
  (windows
   (definition normal-priority
     0)
   (definition above-priority
     1)
   (definition highest-priority
     2)
   (definition critical-priority
     15))
  (else))


(cond-expand
  (windows
   (definition current-heartbeat-priority
     highest-priority)
   
   (definition (augment-heartbeat-priority feedback)
     (define (gather-threads)
       (sort < (map second (table-values (collect-threads-info)))))
     
     (with-task-mutex
       (lambda ()
         (let ((heartbeat-thread (get-heartbeat-thread)))
           (let ((new-heartbeat-priority (if (= current-heartbeat-priority highest-priority)
                                             critical-priority
                                           highest-priority)))
             (feedback (format "Heartbeat priority: {a}" new-heartbeat-priority))
             (let ((threads (gather-threads)))
               (feedback (format "Before: #{a} -> {a}" (length threads) threads)))
             (let ((result (SetThreadPriorityAux heartbeat-thread new-heartbeat-priority)))
               (set! current-heartbeat-priority new-heartbeat-priority)
               (when (not result)
                 (feedback (format "GetLastError: {a}" (GetLastError)))))
             (let ((threads (gather-threads)))
               (feedback (format "After: #{a} -> {a}" (length threads) threads)))))))
     (sleep .25)))
  (else))


(cond-expand
  (windows
   (definition current-main-priority
     normal-priority)
   
   (definition (augment-main-priority feedback)
     (define (gather-threads)
       (sort < (map second (table-values (collect-threads-info)))))
     
     (with-task-mutex
       (lambda ()
         (let ((main-thread (GetCurrentThread)))
           (let ((new-main-priority (if (= current-main-priority normal-priority)
                                        highest-priority
                                      normal-priority)))
             (feedback (format "Main priority: {a}" new-main-priority))
             (let ((threads (gather-threads)))
               (feedback (format "Before: #{a} -> {a}" (length threads) threads)))
             (let ((result (SetThreadPriority main-thread new-main-priority)))
               (set! current-main-priority new-main-priority)
               (when (not result)
                 (feedback (format "GetLastError: {a}" (GetLastError)))))
             (let ((threads (gather-threads)))
               (feedback (format "After: #{a} -> {a}" (length threads) threads)))))))
     (sleep .25)))
  (else))


(definition (camera-high-resolution feedback)
  (let ((client (current-client))
        (zone (current-zone)))
    (if (neq? (get-stage zone) 'circle)
        (begin
          (bell)
          (feedback "Only available in circle"))
      (with-task-mutex
        (lambda ()
          (camera-high-resolution? (not (camera-high-resolution?)))
          (when (camera-playing? client)
            (release-camera client)
            (play-camera client))))
      (feedback (format "Camera high resolution {a}" (if (camera-high-resolution?) "on" "off")))))
  (sleep .25)))
