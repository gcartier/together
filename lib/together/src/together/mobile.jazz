;;;============
;;;  Together
;;;============
;;;
;;;; Mobile Tests
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.mobile jazz


(import (jazz.json))


(definition server-host
  ;"localhost"
  "togethersphere.com"
  )

(definition server-service
  50050
  ;50950
  )


(definition validation-code
  "TWJG")


(definition pixel-key
  "A06250E4-B0D2-4119-90AB-E4B84D2FFCF3")


(definition public port
  #f)


(definition public (ws obj)
  (write-string validation-code port)
  (print-json obj port)
  (force-output port))


(definition public (rs)
  (let ((output (open-output-string)))
    (let (loop)
      (let ((c (read-char port)))
        (if (eqv? c #\|)
            (call-with-input-string (list init: (get-output-string output) readtable: json-readtable)
              read-json)
          (write-char c output)
          (loop))))))


(definition public (c)
  (set! port (open-tcp-client (list server-address: server-host port-number: server-service)))
  (input-port-readtable-set! port json-readtable)
  (ws pixel-key)
  (terminal (rs))
  (process)
  (unspecified))


(definition process-thread
  #f)


(definition (process)
  (let ((thread
          (new-thread
            (lambda ()
              (declare (proper-tail-calls))
              (let (loop)
                (let ((form (rs)))
                  (terminal 'PROCESS form)
                  (when (pair? form)
                    (bind (kind command arguments) form
                      (when (equal? kind "call")
                        (cond ((equal? command "invite")
                               (bind (sender) arguments
                                 (if (equal? sender "Bip")
                                     (accept sender)
                                   (decline sender)))))))))
                (loop)))
            'process)))
    (set! process-thread thread)
    (thread-start! thread)))


(definition (stop)
  (exit-thread process-thread)
  (set! process-thread #f))


(definition public (d)
  (stop)
  (ws (list "deconnect"))
  (unspecified))


(definition public (i (recipient #f))
  (ws `("invite" ,(or recipient "Bip")))
  (unspecified))


(definition public (accept sender)
  (ws `("accept" ,sender))
  (unspecified))


(definition public (decline sender)
  (ws `("decline" ,sender))
  (unspecified))


(definition public (l)
  (ws `("leave"))
  (unspecified))


(definition public (w (msg #f))
  (ws `("message" "whisper" "Bip" ,(or msg "Hey you!")))
  (unspecified))


(definition public (g (msg #f))
  (ws `("message" "group" #f ,(or msg "Hey group!")))
  (unspecified))


(definition public (a (msg #f))
  (ws `("message" "gathering" #f ,(or msg "Hey all!")))
  (unspecified)))
