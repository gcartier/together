;;;============
;;;  Together
;;;============
;;;
;;;; Visualizer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module together.visualizer jazz


(import (jazz.application)
        (jazz.clipboard)
        (jazz.component)
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.platform)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.chronology)
        (world.client.udp)
        (world.context)
        (world.event)
        (world.evolution)
        (world.geometry)
        (world.interface.evolution)
        (world.interface.panel)
        (world.interface.text)
        (world.interface.timeline)
        (world.manager)
        (world.settings)
        (world.simulation)
        (world.timeline)
        (world.visualization)
        (world.udp)
        (together))


;;;
;;;; Panel
;;;


(class Together-Visualizer-Panel extends World-Panel
  
  
  (slot replay     initialize #f accessors generate)
  (slot evolution  initialize #f getter generate)
  (slot call       initialize #f getter generate)
  (slot client     initialize #f getter generate)
  (slot channel    initialize #f getter generate)
  (slot ring       initialize #f getter generate)
  (slot visualizer initialize #f getter generate)
  (slot now        initialize #f getter generate)
  
  
  (form
    (<install>                          background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: fill
      (<Border-View>       name: border border-type: solid border-color: {Color Dark-Gray} layout-type: fill
        (<Tier-Visualizer> name: tier))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (set-panel (locate self 'tier) self))
  
  
  (method protected (setup-visualizer self)
    ;; quick sanity for the moment
    (when (equal? (get-title replay) "validate")
      (let ((origin 1)
            (receiver 2))
        (set! evolution (table-ref (get-evolutions replay) receiver))
        (set! call (parameterize ((visualization? #t))
                     (simulate-udp-call (get-names replay) (get-datas replay))))
        (set! client (require-tier call (get-tier replay)))
        (set! channel (find-receive-channel client origin udp-video))
        (set! ring (get-process-ring channel))
        (set! visualizer (visualize-call call client channel ring evolution))
        (set-%c channel)
        (set-%e evolution)
        (set-%r ring))))
  
  
  (method protected (visualize-time self time)
    ;; quick sanity for the moment
    (when (equal? (get-title replay) "validate")
      (let ((last-time (get-last-time visualizer))
            (last-event (get-last-event visualizer)))
        (if (and last-time (> time last-time))
            (visualize-from visualizer (+ last-event 1) time)
          (setup-visualizer self)
          (visualize-from visualizer #f time)))
      (set! now time)
      (invalidate-view self))))


;;;
;;;; Tier
;;;


(definition protected visualizer-text-color
  (world-setting 'world.visualizer-text {Color Dark-Gray}))


(class Tier-Visualizer extends View
  
  
  (slot panel       initialize #f accessors generate)
  (slot selection   initialize #f accessors generate)
  (slot description initialize #f accessors generate)
  
  
  (method override (draw self surface context)
    (let ((giveup .05)
          (play-window .05)
          (channel (get-channel panel))
          (ring (get-ring panel)))
      (when channel
        (when description
          (draw-text surface 5 3 description visualizer-text-color))
        (let ((total (+ giveup udp-ready-window udp-process-window)))
          (let ((process-x (interpolate (+ giveup udp-ready-window) 0. total 21. 767.)))
            (let ((giveup-h (fxround (interpolate giveup 0. total 21. 767.)))
                  (freeze-h (fxround (interpolate (+ giveup udp-ready-window (- play-window)) 0. total 21. 767.)))
                  (process-h (fxround process-x))
                  (top 31)
                  (bottom 49)
                  (state-color (case (get-state ring)
                                 ((ok) {Color Green alpha: .8})
                                 ((late) {Color red: .005 green: .933 blue: .836 alpha: .8})
                                 ((waiting) {Color Red alpha: .8}))))
              (when (eq? (active-focus) self)
                (frame-rect surface (new Rect 18 (- top 3) 770 (+ bottom 3)) state-color))
              (frame-rect surface (new Rect 19 (- top 2) 769 (+ bottom 2)) state-color)
              (frame-rect surface (new Rect 20 (- top 1) 768 (+ bottom 1)) {Color Black})
              (fill-rect surface (new Rect 21 top giveup-h bottom) {Color Red alpha: .8})
              (fill-rect surface (new Rect giveup-h top freeze-h bottom) {Color Orange alpha: .8})
              (fill-rect surface (new Rect freeze-h top process-h bottom) {Color Green alpha: .8})
              (fill-rect surface (new Rect process-h top 767 bottom) {Color Yellow alpha: .8})
              (draw-ring self surface process-x)))))))
  
  
  (method (draw-ring self surface process-x)
    (let ((replay (get-replay panel))
          (ring (get-ring panel))
          (now (get-now panel)))
      (when (and ring now)
        (let ((base-time (get-base-time replay)))
          (iterate-packets self
            (lambda (packet rect)
              (let ((color (if (get-header? packet)
                               {Color Purple}
                             {Color Blue})))
                (if (get-data packet)
                    (fill-rect surface rect color)
                  (frame-rect surface rect color)))
              (when (and selection (eq? (get-sequence packet) selection))
                (frame-rect surface (inflate-rect rect 1 1) {Color White}))))))))
  
  
  (method (determine-process-x self)
    (let ((giveup .05))
      (let ((total (+ giveup udp-ready-window udp-process-window)))
        (interpolate (+ giveup udp-ready-window) 0. total 21. 767.))))
  
  
  (method (collect-packets self)
    (let ((ring (get-ring panel))
          (queue (new-queue)))
      (iterate-earliest ring
        (lambda (packet)
          (enqueue queue packet)))
      (queue-list queue)))
  
  
  (method (iterate-packets self proc)
    (let ((ring (get-ring panel))
          (now (get-now panel))
          (process-x (determine-process-x self)))
      ;; quick hack around update-time called after insert
      (when (get-time-base ring)
        (for-each (lambda (packet)
                    (let ((time (+ (get-time-base ring) (get-timestamp packet) udp-process-window))
                          (frame (get-frame packet)))
                      (let ((h (fxround (interpolate now time (- time udp-process-window) process-x 767.)))
                            (v 40))
                        (if (not frame)
                            (let ((width 8))
                              (let ((h (- h (quotient width 2))))
                                (proc packet (new Rect (- h 4) (- v 4) (+ h 4) (+ v 4)))))
                          (let ((part (get-part packet))
                                (total (get-total packet)))
                            (let ((width (- (* 9 total) 1)))
                              (let ((h (+ (- h (quotient width 2)) (* 9 part))))
                                (proc packet (new Rect (- h 4) (- v 4) (+ h 4) (+ v 4))))))))))
                  (collect-packets self)))))
  
  
  (method override (key-press self evt)
    (case (get-key evt)
      ((#\space)
       (let ((timeline (brother panel 'timeline)))
         (set-playing? timeline (not (get-playing? timeline)))))))
  
  
  (method override (left-arrow-press self modifiers)
    (let ((timeline (brother panel 'timeline)))
      (step-backward timeline (if (shift-down?) .001 .01))))
  
  (method override (right-arrow-press self modifiers)
    (let ((timeline (brother panel 'timeline)))
      (step-forward timeline (if (shift-down?) .001 .01))))
  
  
  (method override (focus-gained self)
    (nextmethod self)
    (invalidate-view self))
  
  
  (method override (focus-lost self)
    (nextmethod self)
    (invalidate-view self))
  
  
  (method override (mouse-down self evt)
    (acquire-focus self))
  
  
  (method override (mouse-up self evt)
    (define (find-packet h)
      (continuation-capture
        (lambda (return)
          (iterate-packets self
            (lambda (packet rect)
              (when (and (>= h (get-left rect))
                         (< h (get-right rect)))
                (continuation-return return packet))))
          #f)))
    
    (define (describe-packet packet)
      (format "Header {a}, timestamp {a}, sequence {a}, frame {a}, part {a}, total {a}, data {a}"
              (if (get-header? packet) 'yes 'no)
              (get-timestamp packet)
              (get-sequence packet)
              (get-frame packet)
              (get-part packet)
              (get-total packet)
              (if (get-data packet) 'yes 'no)))
    
    (acquire-focus self)
    (let ((packet (find-packet (get-h evt))))
      (when (neq? packet selection)
        (set! selection (and packet (get-sequence packet)))
        (set! description (and packet (describe-packet packet)))
        (invalidate-view self))))))
