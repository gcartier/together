;;;============
;;;  Together
;;;============
;;;
;;;; Together Update
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module launch.update jazz


(import (jazz.appl)
        (jazz.io)
        (jazz.settings)
        (jazz.splash)
        (jiri)
        (jiri.connection)
        (jiri.manager)
        (jiri.monitor)
        (jiri.remote)
        (jiri.section)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.update)
        (jiri.view)
        (jiri.window)
        (jiri.work)
        (update.settings))


;;;
;;;; Delayed
;;;


;; it is critical that only jiri code be loaded
;; when the together repository is not uptodate
;; to minimize to jiri code the danger of not
;; being able to update out of a bug


(definition (delayed-load)
  (together.run:load-together))


(definition (delayed-boot)
  (together.run:boot-together))


;;;
;;;; Boot
;;;


(definition splash-thread
  #f)

(definition splash-done?
  #f)


(definition protected (update-together base)
  (initialize-aliases)
  
  (register-resources-alias 'Together)
  
  (jiri-prepare)
  (jiri-finish)
  
  (applInit)
  (splashInit)
  (splashStart)

  (update-at-together base))


(definition protected (close-update-toplevel)
  (splashStop)
  (splashTerminate))


;;;
;;;; Update
;;;


(definition (update-at-together base)
  (current-root-dir kernel-root)
  (set-first-install? (or (not (file-exists? (update-dir)))
                          (not (file-exists? (data-dir)))))
  (setup-stage-view)
  (send-snapshot-reports (jiri-installer-snapshots))
  (send-snapshot-reports (jiri-application-snapshots))
  (set-stage-view-updating)
  (catch-jiri-exception
    (lambda ()
      (pull-repository-if (jiri-worker-section) (worker-dir)
        (lambda (new-content?)
          (pull-repository (jiri-update-section) (update-dir)
            (lambda (new-content?)
              (if (repository-uptodate? (jiri-app-section) (app-dir) directory: (app-directory))
                  (begin
                    (set-done (get-download-task (get-connection (jiri-app-section))))
                    (pull-repository (jiri-data-section) (data-dir)
                      (lambda (new-data-content?)
                        (continuation-graft base
                          (lambda ()
                            (update-done new-data-content?))))))
                (delegate-update (current-root-dir) "together" first-install?)))))))))


(definition load-expected-direct
  (cond-expand
    (windows 679)
    (else 689)))


(definition (update-done new-content?)
  (splash-set-cursor :arrow)
  (set-work-done? #t)
  (let ((port (open-vector)))
    (load-feedback-setup port load-expected-direct)
    (thread-start!
      (new-thread
        (lambda ()
          (update-splash new-content? port
            (lambda ()
              (load-feedback-done))))
        'splash)))
  (delayed-load)
  (delayed-boot))


(definition (update-splash new-content? port cont)
  (let ((section (jiri-splash-section)))
    (bind (task) (get-tasks section)
      (set-title stage-view (if new-content? (jiri-splash-updated) (jiri-splash-uptodate)))
      (set-status task "Launching together")
      (launch-feedback "together" task port cont))))


;;;
;;;; Init
;;;


(jiri-background {File Resources "lib" "together" "assets" "background.png"})


(set-jiri-init
  (lambda ()
    (jiri-layout))))
