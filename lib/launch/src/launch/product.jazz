;;;============
;;;  Together
;;;============
;;;
;;;; Together Product
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module launch.product jazz


(import (jazz.io)
        (jazz.product)
        (jazz.time))


;;;
;;;; Build
;;;


(definition (build descriptor (unit: unit #f) (skip-references?: skip-references? #f) (force?: force? #f))
  (define (resources-dir)
    (let ((bundle (product-descriptor-build-bundle descriptor)))
      (if bundle
          (new-directory {Directory Build} (format "{a}.app/Contents/Resources" bundle))
        {Directory Build})))
  
  (let ((project-dir {Directory Together})
        (resources-dir (resources-dir)))
    (define (install-filename path (src #f) (dst #f))
      (let ((src (new-file project-dir (or src path)))
            (dst (new-file resources-dir (or dst path))))
        (install-file src dst
          feedback: (lambda (action pathname)
                      (build-feedback "; {a} {a}..." action (get-name pathname))))))
    
    (define (install-dirname path (src #f) (dst #f))
      (let ((src (new-directory project-dir (or src path)))
            (dst (new-directory resources-dir (or dst path))))
        (install-directory src dst
          feedback: (let ((first? #t))
                      (lambda (action pathname)
                        (when first?
                          (build-feedback "; {a} {a}..." action (get-name pathname))
                          (set! first? #f)))))))
    
    (define (copy-info)
      (install-filename '("README"))
      (install-filename '("devel" "together" "About.ftx"))
      (install-filename '("devel" "together" "Help.ftx"))
      (install-filename '("devel" "together" "News.ftx"))
      (install-filename '("devel" "together" "Participation.ftx"))
      (install-filename '("devel" "together" "Roadmap.ftx"))
      (install-filename '("devel" "together" "Unverified.ftx")))
    
    (define (copy-assets)
      (install-dirname '("lib" "together" "assets")))
    
    (define (copy-templates)
      (install-dirname '("devel" "templates")))
    
    (define (copy-curl)
      (cond-expand
        (windows (install-filename #f '("foreign" "curl.exe") '("curl.exe")))
        (else)))
    
    (build-product-descriptor descriptor unit: unit skip-references?: skip-references? force?: force?)
    (initialize-aliases)
    (together.product-base:generate-build-metadata ".together")
    (copy-info)
    (copy-assets)
    (copy-templates)
    (copy-curl)))


;;;
;;;; Install
;;;


(definition install-dir
  (cond-expand
    (mac
     {Directory Home "Devel" "together" "install"})
    (windows
     {Directory Home "together" "install"})
    (else
     {Directory :root "mnt" "disks" "storage" "devel" "together" "install"})))


(definition install-name
  (cond-expand
    (silicon
     (cond-expand (devel
                   "together-devel-silicon")
                  (trial
                   "together-trial-silicon")
                  (test
                   "together-test-silicon")
                  (triage
                   "together-triage-silicon")
                  (stable
                   "together-stable-silicon")
                  (stage
                   "together-stage-silicon")
                  (prod
                   "together-prod-silicon")))
    (mac
     (cond-expand (devel
                   "together-devel-mac")
                  (trial
                   "together-trial-mac")
                  (test
                   "together-test-mac")
                  (triage
                   "together-triage-mac")
                  (stable
                   "together-stable-mac")
                  (stage
                   "together-stage-mac")
                  (prod
                   "together-prod-mac")))
    (else
     (cond-expand (devel
                   "together-devel")
                  (trial
                   "together-trial")
                  (test
                   "together-test")
                  (triage
                   "together-triage")
                  (stable
                   "together-stable")
                  (stage
                   "together-stage")
                  (prod
                   "together-prod")))))


(definition (install descriptor)
  (initialize-aliases)
  ;; appl
  (install-application descriptor install-dir
    name: install-name
    scriptable?: #t
    platform?: #t
    opengl?: #t
    gstreamer?: #t
    files: (cond-expand
             (mac '()) ;; already installed in resources
             (windows '("README" "Together-Worker.exe" "curl.exe"))
             (else '("README")))
    directories: (cond-expand
                   (mac '()) ;; already installed in resources
                   (else '("devel")))
    metadata: '(".together")
    ignored-contents: '("together-server.app"
                        "together-processor.app"
                        "together-worker.app"))
  ;; apps
  (cond-expand
    (mac
     (let ((app-dir (new-directory install-dir install-name)))
       @because-of-notarization-problems-the-app-is-installed-using-jas
       (install-directory {Directory Build "together-worker.app"} (new-directory app-dir '("Contents" "together-worker.app"))
         feedback: (lambda (action pathname)
                     (build-feedback "; {a} {a}..." action (get-name pathname))))
       (install-file {File Build ".together-worker"} (new-file app-dir '("Contents" "Resources" ".together-worker")))
       (build-feedback "; {a} {a}..." 'copying ".together-worker")))
    (else)))


;;;
;;;; Deploy
;;;


(definition (deploy descriptor)
  (initialize-aliases)
  ;; appl
  (deploy-application descriptor
                      (new-directory install-dir install-name)
                      make: 'launch
                      install: 'launch))


;;;
;;;; Register
;;;


(register-product 'launch
  build: build
  install: install
  deploy: deploy))
